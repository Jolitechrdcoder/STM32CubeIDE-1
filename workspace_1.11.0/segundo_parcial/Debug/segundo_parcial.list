
segundo_parcial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cb8  08004cb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004cb8  08004cb8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cb8  08004cb8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cb8  08004cb8  00014cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cbc  08004cbc  00014cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  2000000c  08004ccc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08004ccc  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125da  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a4  00000000  00000000  00032616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00034ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  00035a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cfca  00000000  00000000  00036948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013230  00000000  00000000  00053912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000adf46  00000000  00000000  00066b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00114a88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004278  00000000  00000000  00114ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c40 	.word	0x08004c40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004c40 	.word	0x08004c40

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b08c      	sub	sp, #48	; 0x30
 80001dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001de:	f000 fc75 	bl	8000acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e2:	f000 f893 	bl	800030c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e6:	f000 fa15 	bl	8000614 <MX_GPIO_Init>
  MX_DMA_Init();
 80001ea:	f000 f9ed 	bl	80005c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001ee:	f000 f9bb 	bl	8000568 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001f2:	f000 f8e7 	bl	80003c4 <MX_ADC1_Init>
  MX_DAC_Init();
 80001f6:	f000 f941 	bl	800047c <MX_DAC_Init>
  MX_TIM2_Init();
 80001fa:	f000 f969 	bl	80004d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start_DMA(&hadc1, &input_1, 1);
 80001fe:	2201      	movs	r2, #1
 8000200:	4939      	ldr	r1, [pc, #228]	; (80002e8 <main+0x110>)
 8000202:	483a      	ldr	r0, [pc, #232]	; (80002ec <main+0x114>)
 8000204:	f000 ff32 	bl	800106c <HAL_ADC_Start_DMA>
HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, &input_1, 1, DAC_ALIGN_12B_R);
 8000208:	2300      	movs	r3, #0
 800020a:	9300      	str	r3, [sp, #0]
 800020c:	2301      	movs	r3, #1
 800020e:	4a36      	ldr	r2, [pc, #216]	; (80002e8 <main+0x110>)
 8000210:	2100      	movs	r1, #0
 8000212:	4837      	ldr	r0, [pc, #220]	; (80002f0 <main+0x118>)
 8000214:	f001 fe06 	bl	8001e24 <HAL_DAC_Start_DMA>
HAL_TIM_Base_Init(&htim2);\
 8000218:	4836      	ldr	r0, [pc, #216]	; (80002f4 <main+0x11c>)
 800021a:	f003 fe33 	bl	8003e84 <HAL_TIM_Base_Init>
//char mensaje_1[20] = "encendido";
//char mensaje_2[20] = "apagado";
char mensaje_3[20] = "muteon";
 800021e:	4a36      	ldr	r2, [pc, #216]	; (80002f8 <main+0x120>)
 8000220:	f107 0314 	add.w	r3, r7, #20
 8000224:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000228:	6018      	str	r0, [r3, #0]
 800022a:	3304      	adds	r3, #4
 800022c:	8019      	strh	r1, [r3, #0]
 800022e:	3302      	adds	r3, #2
 8000230:	0c0a      	lsrs	r2, r1, #16
 8000232:	701a      	strb	r2, [r3, #0]
 8000234:	f107 031b 	add.w	r3, r7, #27
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	731a      	strb	r2, [r3, #12]
char mensaje_4[20] = "muteoff";
 8000242:	4a2e      	ldr	r2, [pc, #184]	; (80002fc <main+0x124>)
 8000244:	463b      	mov	r3, r7
 8000246:	e892 0003 	ldmia.w	r2, {r0, r1}
 800024a:	e883 0003 	stmia.w	r3, {r0, r1}
 800024e:	f107 0308 	add.w	r3, r7, #8
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
		  back();
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  }
*/

if (!HAL_GPIO_ReadPin(mute_GPIO_Port, mute_Pin)){
 800025a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800025e:	4828      	ldr	r0, [pc, #160]	; (8000300 <main+0x128>)
 8000260:	f002 f9da 	bl	8002618 <HAL_GPIO_ReadPin>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d108      	bne.n	800027c <main+0xa4>
	count ++;
 800026a:	4b26      	ldr	r3, [pc, #152]	; (8000304 <main+0x12c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	3301      	adds	r3, #1
 8000270:	4a24      	ldr	r2, [pc, #144]	; (8000304 <main+0x12c>)
 8000272:	6013      	str	r3, [r2, #0]
	HAL_Delay(400);
 8000274:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000278:	f000 fc8e 	bl	8000b98 <HAL_Delay>
}
if (count == 1){//desactiva el dac y adc cauando es 1
 800027c:	4b21      	ldr	r3, [pc, #132]	; (8000304 <main+0x12c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d113      	bne.n	80002ac <main+0xd4>
	  HAL_UART_Transmit(&huart2, (uint8_t*)mensaje_3, strlen(mensaje_3), 100);
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	4618      	mov	r0, r3
 800028a:	f7ff ff9d 	bl	80001c8 <strlen>
 800028e:	4603      	mov	r3, r0
 8000290:	b29a      	uxth	r2, r3
 8000292:	f107 0114 	add.w	r1, r7, #20
 8000296:	2364      	movs	r3, #100	; 0x64
 8000298:	481b      	ldr	r0, [pc, #108]	; (8000308 <main+0x130>)
 800029a:	f004 f8cf 	bl	800443c <HAL_UART_Transmit>
	HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
 800029e:	2100      	movs	r1, #0
 80002a0:	4813      	ldr	r0, [pc, #76]	; (80002f0 <main+0x118>)
 80002a2:	f001 fd4e 	bl	8001d42 <HAL_DAC_Stop>
	HAL_ADC_Stop(&hadc1);
 80002a6:	4811      	ldr	r0, [pc, #68]	; (80002ec <main+0x114>)
 80002a8:	f000 feab 	bl	8001002 <HAL_ADC_Stop>
}
if (count == 2){//aqui se reproduce
 80002ac:	4b15      	ldr	r3, [pc, #84]	; (8000304 <main+0x12c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b02      	cmp	r3, #2
 80002b2:	d111      	bne.n	80002d8 <main+0x100>
	  HAL_UART_Transmit(&huart2, (uint8_t*)mensaje_4, strlen(mensaje_4), 100);
 80002b4:	463b      	mov	r3, r7
 80002b6:	4618      	mov	r0, r3
 80002b8:	f7ff ff86 	bl	80001c8 <strlen>
 80002bc:	4603      	mov	r3, r0
 80002be:	b29a      	uxth	r2, r3
 80002c0:	4639      	mov	r1, r7
 80002c2:	2364      	movs	r3, #100	; 0x64
 80002c4:	4810      	ldr	r0, [pc, #64]	; (8000308 <main+0x130>)
 80002c6:	f004 f8b9 	bl	800443c <HAL_UART_Transmit>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80002ca:	2100      	movs	r1, #0
 80002cc:	4808      	ldr	r0, [pc, #32]	; (80002f0 <main+0x118>)
 80002ce:	f001 fd71 	bl	8001db4 <HAL_DAC_Start>
	HAL_ADC_Start(&hadc1);
 80002d2:	4806      	ldr	r0, [pc, #24]	; (80002ec <main+0x114>)
 80002d4:	f000 fe28 	bl	8000f28 <HAL_ADC_Start>

}
if (count == 3){
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <main+0x12c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b03      	cmp	r3, #3
 80002de:	d1bc      	bne.n	800025a <main+0x82>
	count = 0;//se cambiao a 0 si da error cambiar a 1.
 80002e0:	4b08      	ldr	r3, [pc, #32]	; (8000304 <main+0x12c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
if (!HAL_GPIO_ReadPin(mute_GPIO_Port, mute_Pin)){
 80002e6:	e7b8      	b.n	800025a <main+0x82>
 80002e8:	200001e8 	.word	0x200001e8
 80002ec:	20000028 	.word	0x20000028
 80002f0:	200000bc 	.word	0x200000bc
 80002f4:	20000114 	.word	0x20000114
 80002f8:	08004c58 	.word	0x08004c58
 80002fc:	08004c6c 	.word	0x08004c6c
 8000300:	48000800 	.word	0x48000800
 8000304:	200001ec 	.word	0x200001ec
 8000308:	20000160 	.word	0x20000160

0800030c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b09c      	sub	sp, #112	; 0x70
 8000310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000312:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000316:	2228      	movs	r2, #40	; 0x28
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f004 fc88 	bl	8004c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000320:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	605a      	str	r2, [r3, #4]
 800032a:	609a      	str	r2, [r3, #8]
 800032c:	60da      	str	r2, [r3, #12]
 800032e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000330:	463b      	mov	r3, r7
 8000332:	2234      	movs	r2, #52	; 0x34
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f004 fc7a 	bl	8004c30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800033c:	2301      	movs	r3, #1
 800033e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000340:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000344:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034a:	2301      	movs	r3, #1
 800034c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034e:	2302      	movs	r3, #2
 8000350:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000356:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000358:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800035c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000362:	4618      	mov	r0, r3
 8000364:	f002 f988 	bl	8002678 <HAL_RCC_OscConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800036e:	f000 f9cf 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000372:	230f      	movs	r3, #15
 8000374:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000376:	2302      	movs	r3, #2
 8000378:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800037e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000382:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000388:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800038c:	2102      	movs	r1, #2
 800038e:	4618      	mov	r0, r3
 8000390:	f003 f9b0 	bl	80036f4 <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800039a:	f000 f9b9 	bl	8000710 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 800039e:	2380      	movs	r3, #128	; 0x80
 80003a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80003a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a8:	463b      	mov	r3, r7
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 fbd8 	bl	8003b60 <HAL_RCCEx_PeriphCLKConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003b6:	f000 f9ab 	bl	8000710 <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3770      	adds	r7, #112	; 0x70
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ca:	463b      	mov	r3, r7
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
 80003d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003da:	4b27      	ldr	r3, [pc, #156]	; (8000478 <MX_ADC1_Init+0xb4>)
 80003dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003e2:	4b25      	ldr	r3, [pc, #148]	; (8000478 <MX_ADC1_Init+0xb4>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003e8:	4b23      	ldr	r3, [pc, #140]	; (8000478 <MX_ADC1_Init+0xb4>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ee:	4b22      	ldr	r3, [pc, #136]	; (8000478 <MX_ADC1_Init+0xb4>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003f4:	4b20      	ldr	r3, [pc, #128]	; (8000478 <MX_ADC1_Init+0xb4>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003fa:	4b1f      	ldr	r3, [pc, #124]	; (8000478 <MX_ADC1_Init+0xb4>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000402:	4b1d      	ldr	r3, [pc, #116]	; (8000478 <MX_ADC1_Init+0xb4>)
 8000404:	2200      	movs	r2, #0
 8000406:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <MX_ADC1_Init+0xb4>)
 800040a:	2201      	movs	r2, #1
 800040c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800040e:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <MX_ADC1_Init+0xb4>)
 8000410:	2200      	movs	r2, #0
 8000412:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000414:	4b18      	ldr	r3, [pc, #96]	; (8000478 <MX_ADC1_Init+0xb4>)
 8000416:	2201      	movs	r2, #1
 8000418:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800041a:	4b17      	ldr	r3, [pc, #92]	; (8000478 <MX_ADC1_Init+0xb4>)
 800041c:	2201      	movs	r2, #1
 800041e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <MX_ADC1_Init+0xb4>)
 8000424:	2204      	movs	r2, #4
 8000426:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000428:	4b13      	ldr	r3, [pc, #76]	; (8000478 <MX_ADC1_Init+0xb4>)
 800042a:	2200      	movs	r2, #0
 800042c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <MX_ADC1_Init+0xb4>)
 8000430:	2200      	movs	r2, #0
 8000432:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000434:	4810      	ldr	r0, [pc, #64]	; (8000478 <MX_ADC1_Init+0xb4>)
 8000436:	f000 fbf1 	bl	8000c1c <HAL_ADC_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000440:	f000 f966 	bl	8000710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000444:	2301      	movs	r3, #1
 8000446:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000448:	2301      	movs	r3, #1
 800044a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000450:	2307      	movs	r3, #7
 8000452:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000454:	2300      	movs	r3, #0
 8000456:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800045c:	463b      	mov	r3, r7
 800045e:	4619      	mov	r1, r3
 8000460:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_ADC1_Init+0xb4>)
 8000462:	f000 fe9f 	bl	80011a4 <HAL_ADC_ConfigChannel>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800046c:	f000 f950 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000470:	bf00      	nop
 8000472:	3718      	adds	r7, #24
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000028 	.word	0x20000028

0800047c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800048c:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <MX_DAC_Init+0x4c>)
 800048e:	4a0f      	ldr	r2, [pc, #60]	; (80004cc <MX_DAC_Init+0x50>)
 8000490:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000492:	480d      	ldr	r0, [pc, #52]	; (80004c8 <MX_DAC_Init+0x4c>)
 8000494:	f001 fc33 	bl	8001cfe <HAL_DAC_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 800049e:	f000 f937 	bl	8000710 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80004a2:	2324      	movs	r3, #36	; 0x24
 80004a4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2200      	movs	r2, #0
 80004ae:	4619      	mov	r1, r3
 80004b0:	4805      	ldr	r0, [pc, #20]	; (80004c8 <MX_DAC_Init+0x4c>)
 80004b2:	f001 fd25 	bl	8001f00 <HAL_DAC_ConfigChannel>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 80004bc:	f000 f928 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80004c0:	bf00      	nop
 80004c2:	3710      	adds	r7, #16
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	200000bc 	.word	0x200000bc
 80004cc:	40007400 	.word	0x40007400

080004d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004ee:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <MX_TIM2_Init+0x94>)
 80004f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80004f6:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <MX_TIM2_Init+0x94>)
 80004f8:	2247      	movs	r2, #71	; 0x47
 80004fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fc:	4b19      	ldr	r3, [pc, #100]	; (8000564 <MX_TIM2_Init+0x94>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <MX_TIM2_Init+0x94>)
 8000504:	2263      	movs	r2, #99	; 0x63
 8000506:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <MX_TIM2_Init+0x94>)
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <MX_TIM2_Init+0x94>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000514:	4813      	ldr	r0, [pc, #76]	; (8000564 <MX_TIM2_Init+0x94>)
 8000516:	f003 fcb5 	bl	8003e84 <HAL_TIM_Base_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000520:	f000 f8f6 	bl	8000710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000528:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	4619      	mov	r1, r3
 8000530:	480c      	ldr	r0, [pc, #48]	; (8000564 <MX_TIM2_Init+0x94>)
 8000532:	f003 fcfe 	bl	8003f32 <HAL_TIM_ConfigClockSource>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800053c:	f000 f8e8 	bl	8000710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000540:	2320      	movs	r3, #32
 8000542:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	4619      	mov	r1, r3
 800054c:	4805      	ldr	r0, [pc, #20]	; (8000564 <MX_TIM2_Init+0x94>)
 800054e:	f003 fec1 	bl	80042d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000558:	f000 f8da 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000114 	.word	0x20000114

08000568 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 800056e:	4a15      	ldr	r2, [pc, #84]	; (80005c4 <MX_USART2_UART_Init+0x5c>)
 8000570:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 8000574:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000578:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 800058e:	220c      	movs	r2, #12
 8000590:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <MX_USART2_UART_Init+0x58>)
 80005ac:	f003 fef8 	bl	80043a0 <HAL_UART_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005b6:	f000 f8ab 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000160 	.word	0x20000160
 80005c4:	40004400 	.word	0x40004400

080005c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <MX_DMA_Init+0x48>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <MX_DMA_Init+0x48>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <MX_DMA_Init+0x48>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	200b      	movs	r0, #11
 80005ec:	f001 fb51 	bl	8001c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005f0:	200b      	movs	r0, #11
 80005f2:	f001 fb6a 	bl	8001cca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	200d      	movs	r0, #13
 80005fc:	f001 fb49 	bl	8001c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000600:	200d      	movs	r0, #13
 8000602:	f001 fb62 	bl	8001cca <HAL_NVIC_EnableIRQ>

}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	4b36      	ldr	r3, [pc, #216]	; (8000704 <MX_GPIO_Init+0xf0>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a35      	ldr	r2, [pc, #212]	; (8000704 <MX_GPIO_Init+0xf0>)
 8000630:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000634:	6153      	str	r3, [r2, #20]
 8000636:	4b33      	ldr	r3, [pc, #204]	; (8000704 <MX_GPIO_Init+0xf0>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000642:	4b30      	ldr	r3, [pc, #192]	; (8000704 <MX_GPIO_Init+0xf0>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a2f      	ldr	r2, [pc, #188]	; (8000704 <MX_GPIO_Init+0xf0>)
 8000648:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <MX_GPIO_Init+0xf0>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <MX_GPIO_Init+0xf0>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a29      	ldr	r2, [pc, #164]	; (8000704 <MX_GPIO_Init+0xf0>)
 8000660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <MX_GPIO_Init+0xf0>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	4b24      	ldr	r3, [pc, #144]	; (8000704 <MX_GPIO_Init+0xf0>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a23      	ldr	r2, [pc, #140]	; (8000704 <MX_GPIO_Init+0xf0>)
 8000678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800067c:	6153      	str	r3, [r2, #20]
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <MX_GPIO_Init+0xf0>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000690:	481d      	ldr	r0, [pc, #116]	; (8000708 <MX_GPIO_Init+0xf4>)
 8000692:	f001 ffd9 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, anterior_Pin|siguiente_Pin, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 7140 	mov.w	r1, #768	; 0x300
 800069c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a0:	f001 ffd2 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : mute_Pin */
  GPIO_InitStruct.Pin = mute_Pin;
 80006a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(mute_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	4814      	ldr	r0, [pc, #80]	; (800070c <MX_GPIO_Init+0xf8>)
 80006ba:	f001 fe3b 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	480c      	ldr	r0, [pc, #48]	; (8000708 <MX_GPIO_Init+0xf4>)
 80006d8:	f001 fe2c 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : anterior_Pin siguiente_Pin */
  GPIO_InitStruct.Pin = anterior_Pin|siguiente_Pin;
 80006dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006e6:	2302      	movs	r3, #2
 80006e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f8:	f001 fe1c 	bl	8002334 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	; 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000
 8000708:	48000400 	.word	0x48000400
 800070c:	48000800 	.word	0x48000800

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_MspInit+0x44>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <HAL_MspInit+0x44>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6193      	str	r3, [r2, #24]
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <HAL_MspInit+0x44>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_MspInit+0x44>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a08      	ldr	r2, [pc, #32]	; (8000760 <HAL_MspInit+0x44>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_MspInit+0x44>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000752:	2007      	movs	r0, #7
 8000754:	f001 fa92 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000784:	d14c      	bne.n	8000820 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000786:	4b28      	ldr	r3, [pc, #160]	; (8000828 <HAL_ADC_MspInit+0xc4>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a27      	ldr	r2, [pc, #156]	; (8000828 <HAL_ADC_MspInit+0xc4>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	4b25      	ldr	r3, [pc, #148]	; (8000828 <HAL_ADC_MspInit+0xc4>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b22      	ldr	r3, [pc, #136]	; (8000828 <HAL_ADC_MspInit+0xc4>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	4a21      	ldr	r2, [pc, #132]	; (8000828 <HAL_ADC_MspInit+0xc4>)
 80007a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a8:	6153      	str	r3, [r2, #20]
 80007aa:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <HAL_ADC_MspInit+0xc4>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b6:	2301      	movs	r3, #1
 80007b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ba:	2303      	movs	r3, #3
 80007bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007cc:	f001 fdb2 	bl	8002334 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <HAL_ADC_MspInit+0xc8>)
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <HAL_ADC_MspInit+0xcc>)
 80007d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <HAL_ADC_MspInit+0xc8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <HAL_ADC_MspInit+0xc8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_ADC_MspInit+0xc8>)
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <HAL_ADC_MspInit+0xc8>)
 80007ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <HAL_ADC_MspInit+0xc8>)
 80007f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <HAL_ADC_MspInit+0xc8>)
 80007fa:	2220      	movs	r2, #32
 80007fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <HAL_ADC_MspInit+0xc8>)
 8000800:	2200      	movs	r2, #0
 8000802:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000804:	4809      	ldr	r0, [pc, #36]	; (800082c <HAL_ADC_MspInit+0xc8>)
 8000806:	f001 fbfe 	bl	8002006 <HAL_DMA_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000810:	f7ff ff7e 	bl	8000710 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <HAL_ADC_MspInit+0xc8>)
 8000818:	639a      	str	r2, [r3, #56]	; 0x38
 800081a:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_ADC_MspInit+0xc8>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	; 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40021000 	.word	0x40021000
 800082c:	20000078 	.word	0x20000078
 8000830:	40020008 	.word	0x40020008

08000834 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a2c      	ldr	r2, [pc, #176]	; (8000904 <HAL_DAC_MspInit+0xd0>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d152      	bne.n	80008fc <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000856:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <HAL_DAC_MspInit+0xd4>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	4a2b      	ldr	r2, [pc, #172]	; (8000908 <HAL_DAC_MspInit+0xd4>)
 800085c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000860:	61d3      	str	r3, [r2, #28]
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <HAL_DAC_MspInit+0xd4>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <HAL_DAC_MspInit+0xd4>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a25      	ldr	r2, [pc, #148]	; (8000908 <HAL_DAC_MspInit+0xd4>)
 8000874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b23      	ldr	r3, [pc, #140]	; (8000908 <HAL_DAC_MspInit+0xd4>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000886:	2310      	movs	r3, #16
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088a:	2303      	movs	r3, #3
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089c:	f001 fd4a 	bl	8002334 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <HAL_DAC_MspInit+0xd8>)
 80008a2:	4a1b      	ldr	r2, [pc, #108]	; (8000910 <HAL_DAC_MspInit+0xdc>)
 80008a4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <HAL_DAC_MspInit+0xd8>)
 80008a8:	2210      	movs	r2, #16
 80008aa:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <HAL_DAC_MspInit+0xd8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <HAL_DAC_MspInit+0xd8>)
 80008b4:	2280      	movs	r2, #128	; 0x80
 80008b6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <HAL_DAC_MspInit+0xd8>)
 80008ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008be:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_DAC_MspInit+0xd8>)
 80008c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008c6:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80008c8:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_DAC_MspInit+0xd8>)
 80008ca:	2220      	movs	r2, #32
 80008cc:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_DAC_MspInit+0xd8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <HAL_DAC_MspInit+0xd8>)
 80008d6:	f001 fb96 	bl	8002006 <HAL_DMA_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 80008e0:	f7ff ff16 	bl	8000710 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <HAL_DAC_MspInit+0xe0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <HAL_DAC_MspInit+0xe0>)
 80008ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008ee:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a06      	ldr	r2, [pc, #24]	; (800090c <HAL_DAC_MspInit+0xd8>)
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <HAL_DAC_MspInit+0xd8>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80008fc:	bf00      	nop
 80008fe:	3728      	adds	r7, #40	; 0x28
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40007400 	.word	0x40007400
 8000908:	40021000 	.word	0x40021000
 800090c:	200000d0 	.word	0x200000d0
 8000910:	40020030 	.word	0x40020030
 8000914:	40010000 	.word	0x40010000

08000918 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000928:	d10b      	bne.n	8000942 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <HAL_TIM_Base_MspInit+0x38>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <HAL_TIM_Base_MspInit+0x38>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	61d3      	str	r3, [r2, #28]
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_TIM_Base_MspInit+0x38>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <HAL_UART_MspInit+0x7c>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d128      	bne.n	80009c8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_UART_MspInit+0x80>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	4a16      	ldr	r2, [pc, #88]	; (80009d4 <HAL_UART_MspInit+0x80>)
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	61d3      	str	r3, [r2, #28]
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_UART_MspInit+0x80>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_UART_MspInit+0x80>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <HAL_UART_MspInit+0x80>)
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	6153      	str	r3, [r2, #20]
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_UART_MspInit+0x80>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009a6:	230c      	movs	r3, #12
 80009a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b6:	2307      	movs	r3, #7
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c4:	f001 fcb6 	bl	8002334 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	; 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40004400 	.word	0x40004400
 80009d4:	40021000 	.word	0x40021000

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f898 	bl	8000b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <DMA1_Channel1_IRQHandler+0x10>)
 8000a32:	f001 fb8e 	bl	8002152 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000078 	.word	0x20000078

08000a40 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <DMA1_Channel3_IRQHandler+0x10>)
 8000a46:	f001 fb84 	bl	8002152 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200000d0 	.word	0x200000d0

08000a54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <SystemInit+0x20>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5e:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <SystemInit+0x20>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a7c:	f7ff ffea 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a82:	490d      	ldr	r1, [pc, #52]	; (8000ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <LoopForever+0xe>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a98:	4c0a      	ldr	r4, [pc, #40]	; (8000ac4 <LoopForever+0x16>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f004 f89f 	bl	8004be8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aaa:	f7ff fb95 	bl	80001d8 <main>

08000aae <LoopForever>:

LoopForever:
    b LoopForever
 8000aae:	e7fe      	b.n	8000aae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ab0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000abc:	08004cc0 	.word	0x08004cc0
  ldr r2, =_sbss
 8000ac0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ac4:	200001f4 	.word	0x200001f4

08000ac8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC1_IRQHandler>
	...

08000acc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_Init+0x28>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_Init+0x28>)
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f001 f8cd 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 f808 	bl	8000af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae8:	f7ff fe18 	bl	800071c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40022000 	.word	0x40022000

08000af8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_InitTick+0x54>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_InitTick+0x58>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 f8e5 	bl	8001ce6 <HAL_SYSTICK_Config>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00e      	b.n	8000b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b0f      	cmp	r3, #15
 8000b2a:	d80a      	bhi.n	8000b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f001 f8ad 	bl	8001c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b38:	4a06      	ldr	r2, [pc, #24]	; (8000b54 <HAL_InitTick+0x5c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e000      	b.n	8000b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000004 	.word	0x20000004

08000b58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x20>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x24>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_IncTick+0x24>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	200001f0 	.word	0x200001f0

08000b80 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <HAL_GetTick+0x14>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	200001f0 	.word	0x200001f0

08000b98 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba0:	f7ff ffee 	bl	8000b80 <HAL_GetTick>
 8000ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb0:	d005      	beq.n	8000bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_Delay+0x44>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4413      	add	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bbe:	bf00      	nop
 8000bc0:	f7ff ffde 	bl	8000b80 <HAL_GetTick>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d8f7      	bhi.n	8000bc0 <HAL_Delay+0x28>
  {
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000008 	.word	0x20000008

08000be0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b09a      	sub	sp, #104	; 0x68
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e169      	b.n	8000f10 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 0310 	and.w	r3, r3, #16
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d176      	bne.n	8000d3c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d152      	bne.n	8000cfc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff fd77 	bl	8000764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d13b      	bne.n	8000cfc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 fe0d 	bl	80018a4 <ADC_Disable>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f003 0310 	and.w	r3, r3, #16
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d12f      	bne.n	8000cfc <HAL_ADC_Init+0xe0>
 8000c9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d12b      	bne.n	8000cfc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cac:	f023 0302 	bic.w	r3, r3, #2
 8000cb0:	f043 0202 	orr.w	r2, r3, #2
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	689a      	ldr	r2, [r3, #8]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cc6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cd6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cd8:	4b8f      	ldr	r3, [pc, #572]	; (8000f18 <HAL_ADC_Init+0x2fc>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a8f      	ldr	r2, [pc, #572]	; (8000f1c <HAL_ADC_Init+0x300>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	0c9a      	lsrs	r2, r3, #18
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cee:	e002      	b.n	8000cf6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f9      	bne.n	8000cf0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d007      	beq.n	8000d1a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d18:	d110      	bne.n	8000d3c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f023 0312 	bic.w	r3, r3, #18
 8000d22:	f043 0210 	orr.w	r2, r3, #16
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f043 0201 	orr.w	r2, r3, #1
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f003 0310 	and.w	r3, r3, #16
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f040 80d6 	bne.w	8000ef6 <HAL_ADC_Init+0x2da>
 8000d4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 80d1 	bne.w	8000ef6 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 80c9 	bne.w	8000ef6 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000d6c:	f043 0202 	orr.w	r2, r3, #2
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d74:	4b6a      	ldr	r3, [pc, #424]	; (8000f20 <HAL_ADC_Init+0x304>)
 8000d76:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d108      	bne.n	8000d9c <HAL_ADC_Init+0x180>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d101      	bne.n	8000d9c <HAL_ADC_Init+0x180>
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e000      	b.n	8000d9e <HAL_ADC_Init+0x182>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d11c      	bne.n	8000ddc <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000da2:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d010      	beq.n	8000dca <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d107      	bne.n	8000dc4 <HAL_ADC_Init+0x1a8>
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d101      	bne.n	8000dc4 <HAL_ADC_Init+0x1a8>
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e000      	b.n	8000dc6 <HAL_ADC_Init+0x1aa>
 8000dc4:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d108      	bne.n	8000ddc <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dda:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7e5b      	ldrb	r3, [r3, #25]
 8000de0:	035b      	lsls	r3, r3, #13
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000de6:	2a01      	cmp	r2, #1
 8000de8:	d002      	beq.n	8000df0 <HAL_ADC_Init+0x1d4>
 8000dea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dee:	e000      	b.n	8000df2 <HAL_ADC_Init+0x1d6>
 8000df0:	2200      	movs	r2, #0
 8000df2:	431a      	orrs	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e02:	4313      	orrs	r3, r2
 8000e04:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d11b      	bne.n	8000e48 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	7e5b      	ldrb	r3, [r3, #25]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d109      	bne.n	8000e2c <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	045a      	lsls	r2, r3, #17
 8000e20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e22:	4313      	orrs	r3, r2
 8000e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e28:	663b      	str	r3, [r7, #96]	; 0x60
 8000e2a:	e00d      	b.n	8000e48 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000e34:	f043 0220 	orr.w	r2, r3, #32
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e40:	f043 0201 	orr.w	r2, r3, #1
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d007      	beq.n	8000e60 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f003 030c 	and.w	r3, r3, #12
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d114      	bne.n	8000e98 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	6812      	ldr	r2, [r2, #0]
 8000e78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e7c:	f023 0302 	bic.w	r3, r3, #2
 8000e80:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7e1b      	ldrb	r3, [r3, #24]
 8000e86:	039a      	lsls	r2, r3, #14
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4313      	orrs	r3, r2
 8000e92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e94:	4313      	orrs	r3, r2
 8000e96:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <HAL_ADC_Init+0x308>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000ea8:	430b      	orrs	r3, r1
 8000eaa:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d10c      	bne.n	8000ece <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f023 010f 	bic.w	r1, r3, #15
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	1e5a      	subs	r2, r3, #1
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	631a      	str	r2, [r3, #48]	; 0x30
 8000ecc:	e007      	b.n	8000ede <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 020f 	bic.w	r2, r2, #15
 8000edc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	f023 0303 	bic.w	r3, r3, #3
 8000eec:	f043 0201 	orr.w	r2, r3, #1
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ef4:	e00a      	b.n	8000f0c <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f023 0312 	bic.w	r3, r3, #18
 8000efe:	f043 0210 	orr.w	r2, r3, #16
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000f06:	2301      	movs	r3, #1
 8000f08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000f0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3768      	adds	r7, #104	; 0x68
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	431bde83 	.word	0x431bde83
 8000f20:	50000300 	.word	0x50000300
 8000f24:	fff0c007 	.word	0xfff0c007

08000f28 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d158      	bne.n	8000ff4 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d101      	bne.n	8000f50 <HAL_ADC_Start+0x28>
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	e054      	b.n	8000ffa <HAL_ADC_Start+0xd2>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 fc3f 	bl	80017dc <ADC_Enable>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d140      	bne.n	8000fea <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f70:	f023 0301 	bic.w	r3, r3, #1
 8000f74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d007      	beq.n	8000fa6 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fb2:	d106      	bne.n	8000fc2 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb8:	f023 0206 	bic.w	r2, r3, #6
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	645a      	str	r2, [r3, #68]	; 0x44
 8000fc0:	e002      	b.n	8000fc8 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	221c      	movs	r2, #28
 8000fd6:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0204 	orr.w	r2, r2, #4
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	e006      	b.n	8000ff8 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000ff2:	e001      	b.n	8000ff8 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <HAL_ADC_Stop+0x1a>
 8001018:	2302      	movs	r3, #2
 800101a:	e023      	b.n	8001064 <HAL_ADC_Stop+0x62>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001024:	216c      	movs	r1, #108	; 0x6c
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 fca2 	bl	8001970 <ADC_ConversionStop>
 800102c:	4603      	mov	r3, r0
 800102e:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d111      	bne.n	800105a <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 fc34 	bl	80018a4 <ADC_Disable>
 800103c:	4603      	mov	r3, r0
 800103e:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d109      	bne.n	800105a <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800104e:	f023 0301 	bic.w	r3, r3, #1
 8001052:	f043 0201 	orr.w	r2, r3, #1
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	2b00      	cmp	r3, #0
 8001088:	d17e      	bne.n	8001188 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001090:	2b01      	cmp	r3, #1
 8001092:	d101      	bne.n	8001098 <HAL_ADC_Start_DMA+0x2c>
 8001094:	2302      	movs	r3, #2
 8001096:	e07a      	b.n	800118e <HAL_ADC_Start_DMA+0x122>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f000 fb9b 	bl	80017dc <ADC_Enable>
 80010a6:	4603      	mov	r3, r0
 80010a8:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d166      	bne.n	800117e <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010b8:	f023 0301 	bic.w	r3, r3, #1
 80010bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d007      	beq.n	80010ee <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010fa:	d106      	bne.n	800110a <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001100:	f023 0206 	bic.w	r2, r3, #6
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	645a      	str	r2, [r3, #68]	; 0x44
 8001108:	e002      	b.n	8001110 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2200      	movs	r2, #0
 800110e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111c:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <HAL_ADC_Start_DMA+0x12c>)
 800111e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001124:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_ADC_Start_DMA+0x130>)
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800112c:	4a1c      	ldr	r2, [pc, #112]	; (80011a0 <HAL_ADC_Start_DMA+0x134>)
 800112e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	221c      	movs	r2, #28
 8001136:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 0210 	orr.w	r2, r2, #16
 8001146:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0201 	orr.w	r2, r2, #1
 8001156:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3340      	adds	r3, #64	; 0x40
 8001162:	4619      	mov	r1, r3
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f000 ff94 	bl	8002094 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0204 	orr.w	r2, r2, #4
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	e006      	b.n	800118c <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001186:	e001      	b.n	800118c <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001188:	2302      	movs	r3, #2
 800118a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800118c:	7dfb      	ldrb	r3, [r7, #23]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	08001711 	.word	0x08001711
 800119c:	0800178b 	.word	0x0800178b
 80011a0:	080017a7 	.word	0x080017a7

080011a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b09b      	sub	sp, #108	; 0x6c
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <HAL_ADC_ConfigChannel+0x22>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e299      	b.n	80016fa <HAL_ADC_ConfigChannel+0x556>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f040 827d 	bne.w	80016d8 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d81c      	bhi.n	8001220 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	461a      	mov	r2, r3
 80011fa:	231f      	movs	r3, #31
 80011fc:	4093      	lsls	r3, r2
 80011fe:	43db      	mvns	r3, r3
 8001200:	4019      	ands	r1, r3
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa00 f203 	lsl.w	r2, r0, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	631a      	str	r2, [r3, #48]	; 0x30
 800121e:	e063      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b09      	cmp	r3, #9
 8001226:	d81e      	bhi.n	8001266 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	3b1e      	subs	r3, #30
 800123c:	221f      	movs	r2, #31
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	4019      	ands	r1, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	6818      	ldr	r0, [r3, #0]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	3b1e      	subs	r3, #30
 8001258:	fa00 f203 	lsl.w	r2, r0, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	635a      	str	r2, [r3, #52]	; 0x34
 8001264:	e040      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b0e      	cmp	r3, #14
 800126c:	d81e      	bhi.n	80012ac <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	3b3c      	subs	r3, #60	; 0x3c
 8001282:	221f      	movs	r2, #31
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	4019      	ands	r1, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	3b3c      	subs	r3, #60	; 0x3c
 800129e:	fa00 f203 	lsl.w	r2, r0, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	639a      	str	r2, [r3, #56]	; 0x38
 80012aa:	e01d      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	3b5a      	subs	r3, #90	; 0x5a
 80012c0:	221f      	movs	r2, #31
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	4019      	ands	r1, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	3b5a      	subs	r3, #90	; 0x5a
 80012dc:	fa00 f203 	lsl.w	r2, r0, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f040 80e5 	bne.w	80014c2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b09      	cmp	r3, #9
 80012fe:	d91c      	bls.n	800133a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6999      	ldr	r1, [r3, #24]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	3b1e      	subs	r3, #30
 8001312:	2207      	movs	r2, #7
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	4019      	ands	r1, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	6898      	ldr	r0, [r3, #8]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	3b1e      	subs	r3, #30
 800132c:	fa00 f203 	lsl.w	r2, r0, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	619a      	str	r2, [r3, #24]
 8001338:	e019      	b.n	800136e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6959      	ldr	r1, [r3, #20]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	2207      	movs	r2, #7
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	4019      	ands	r1, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	6898      	ldr	r0, [r3, #8]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	fa00 f203 	lsl.w	r2, r0, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	695a      	ldr	r2, [r3, #20]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	3b01      	subs	r3, #1
 800138c:	2b03      	cmp	r3, #3
 800138e:	d84f      	bhi.n	8001430 <HAL_ADC_ConfigChannel+0x28c>
 8001390:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <HAL_ADC_ConfigChannel+0x1f4>)
 8001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	080013a9 	.word	0x080013a9
 800139c:	080013cb 	.word	0x080013cb
 80013a0:	080013ed 	.word	0x080013ed
 80013a4:	0800140f 	.word	0x0800140f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013ae:	4b99      	ldr	r3, [pc, #612]	; (8001614 <HAL_ADC_ConfigChannel+0x470>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	0691      	lsls	r1, r2, #26
 80013b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013ba:	430a      	orrs	r2, r1
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013c6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013c8:	e07e      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80013d0:	4b90      	ldr	r3, [pc, #576]	; (8001614 <HAL_ADC_ConfigChannel+0x470>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	0691      	lsls	r1, r2, #26
 80013da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013dc:	430a      	orrs	r2, r1
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013e8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013ea:	e06d      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80013f2:	4b88      	ldr	r3, [pc, #544]	; (8001614 <HAL_ADC_ConfigChannel+0x470>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	0691      	lsls	r1, r2, #26
 80013fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013fe:	430a      	orrs	r2, r1
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800140a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800140c:	e05c      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001414:	4b7f      	ldr	r3, [pc, #508]	; (8001614 <HAL_ADC_ConfigChannel+0x470>)
 8001416:	4013      	ands	r3, r2
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	0691      	lsls	r1, r2, #26
 800141e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001420:	430a      	orrs	r2, r1
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800142c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800142e:	e04b      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001436:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	069b      	lsls	r3, r3, #26
 8001440:	429a      	cmp	r2, r3
 8001442:	d107      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001452:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800145a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	069b      	lsls	r3, r3, #26
 8001464:	429a      	cmp	r2, r3
 8001466:	d107      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001476:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800147e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	069b      	lsls	r3, r3, #26
 8001488:	429a      	cmp	r2, r3
 800148a:	d107      	bne.n	800149c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800149a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	069b      	lsls	r3, r3, #26
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d10a      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014be:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80014c0:	e001      	b.n	80014c6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80014c2:	bf00      	nop
 80014c4:	e000      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80014c6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d108      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x344>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x344>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <HAL_ADC_ConfigChannel+0x346>
 80014e8:	2300      	movs	r3, #0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f040 80ff 	bne.w	80016ee <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d00f      	beq.n	8001518 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2201      	movs	r2, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	400a      	ands	r2, r1
 8001512:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001516:	e049      	b.n	80015ac <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2201      	movs	r2, #1
 8001526:	409a      	lsls	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b09      	cmp	r3, #9
 8001538:	d91c      	bls.n	8001574 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6999      	ldr	r1, [r3, #24]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	3b1b      	subs	r3, #27
 800154c:	2207      	movs	r2, #7
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	4019      	ands	r1, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	6898      	ldr	r0, [r3, #8]
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4613      	mov	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	3b1b      	subs	r3, #27
 8001566:	fa00 f203 	lsl.w	r2, r0, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	619a      	str	r2, [r3, #24]
 8001572:	e01b      	b.n	80015ac <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6959      	ldr	r1, [r3, #20]
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	2207      	movs	r2, #7
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	4019      	ands	r1, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	6898      	ldr	r0, [r3, #8]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	fa00 f203 	lsl.w	r2, r0, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <HAL_ADC_ConfigChannel+0x474>)
 80015ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b10      	cmp	r3, #16
 80015b6:	d105      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80015b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d014      	beq.n	80015ee <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80015c8:	2b11      	cmp	r3, #17
 80015ca:	d105      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00a      	beq.n	80015ee <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015dc:	2b12      	cmp	r3, #18
 80015de:	f040 8086 	bne.w	80016ee <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80015e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d17f      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d10d      	bne.n	800161c <HAL_ADC_ConfigChannel+0x478>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b01      	cmp	r3, #1
 800160c:	d106      	bne.n	800161c <HAL_ADC_ConfigChannel+0x478>
 800160e:	2301      	movs	r3, #1
 8001610:	e005      	b.n	800161e <HAL_ADC_ConfigChannel+0x47a>
 8001612:	bf00      	nop
 8001614:	83fff000 	.word	0x83fff000
 8001618:	50000300 	.word	0x50000300
 800161c:	2300      	movs	r3, #0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d150      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001622:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001624:	2b00      	cmp	r3, #0
 8001626:	d010      	beq.n	800164a <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b01      	cmp	r3, #1
 8001632:	d107      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x4a0>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x4a0>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_ADC_ConfigChannel+0x4a2>
 8001644:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001646:	2b00      	cmp	r3, #0
 8001648:	d13c      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b10      	cmp	r3, #16
 8001650:	d11d      	bne.n	800168e <HAL_ADC_ConfigChannel+0x4ea>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800165a:	d118      	bne.n	800168e <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800165c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001666:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <HAL_ADC_ConfigChannel+0x564>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a27      	ldr	r2, [pc, #156]	; (800170c <HAL_ADC_ConfigChannel+0x568>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	0c9a      	lsrs	r2, r3, #18
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800167e:	e002      	b.n	8001686 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	3b01      	subs	r3, #1
 8001684:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f9      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800168c:	e02e      	b.n	80016ec <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b11      	cmp	r3, #17
 8001694:	d10b      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x50a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800169e:	d106      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80016a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80016a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016aa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016ac:	e01e      	b.n	80016ec <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b12      	cmp	r3, #18
 80016b4:	d11a      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80016b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016c0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016c2:	e013      	b.n	80016ec <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f043 0220 	orr.w	r2, r3, #32
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80016d6:	e00a      	b.n	80016ee <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f043 0220 	orr.w	r2, r3, #32
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80016ea:	e000      	b.n	80016ee <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016ec:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	376c      	adds	r7, #108	; 0x6c
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000000 	.word	0x20000000
 800170c:	431bde83 	.word	0x431bde83

08001710 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001726:	2b00      	cmp	r3, #0
 8001728:	d126      	bne.n	8001778 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001740:	2b00      	cmp	r3, #0
 8001742:	d115      	bne.n	8001770 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001748:	2b00      	cmp	r3, #0
 800174a:	d111      	bne.n	8001770 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d105      	bne.n	8001770 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f043 0201 	orr.w	r2, r3, #1
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f7ff fa35 	bl	8000be0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001776:	e004      	b.n	8001782 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	4798      	blx	r3
}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f7ff fa2b 	bl	8000bf4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b084      	sub	sp, #16
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c4:	f043 0204 	orr.w	r2, r3, #4
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f7ff fa1b 	bl	8000c08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d108      	bne.n	8001808 <ADC_Enable+0x2c>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <ADC_Enable+0x2c>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <ADC_Enable+0x2e>
 8001808:	2300      	movs	r3, #0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d143      	bne.n	8001896 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <ADC_Enable+0xc4>)
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00d      	beq.n	8001838 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f043 0210 	orr.w	r2, r3, #16
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182c:	f043 0201 	orr.w	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e02f      	b.n	8001898 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001848:	f7ff f99a 	bl	8000b80 <HAL_GetTick>
 800184c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800184e:	e01b      	b.n	8001888 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001850:	f7ff f996 	bl	8000b80 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d914      	bls.n	8001888 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	d00d      	beq.n	8001888 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f043 0210 	orr.w	r2, r3, #16
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e007      	b.n	8001898 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b01      	cmp	r3, #1
 8001894:	d1dc      	bne.n	8001850 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	8000003f 	.word	0x8000003f

080018a4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d108      	bne.n	80018d0 <ADC_Disable+0x2c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <ADC_Disable+0x2c>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <ADC_Disable+0x2e>
 80018d0:	2300      	movs	r3, #0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d047      	beq.n	8001966 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 030d 	and.w	r3, r3, #13
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d10f      	bne.n	8001904 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0202 	orr.w	r2, r2, #2
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2203      	movs	r2, #3
 80018fa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80018fc:	f7ff f940 	bl	8000b80 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001902:	e029      	b.n	8001958 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f043 0210 	orr.w	r2, r3, #16
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	f043 0201 	orr.w	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e023      	b.n	8001968 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001920:	f7ff f92e 	bl	8000b80 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d914      	bls.n	8001958 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b01      	cmp	r3, #1
 800193a:	d10d      	bne.n	8001958 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f043 0210 	orr.w	r2, r3, #16
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	f043 0201 	orr.w	r2, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e007      	b.n	8001968 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b01      	cmp	r3, #1
 8001964:	d0dc      	beq.n	8001920 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 809b 	beq.w	8001acc <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019a4:	d12a      	bne.n	80019fc <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d126      	bne.n	80019fc <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d122      	bne.n	80019fc <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80019b6:	230c      	movs	r3, #12
 80019b8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80019ba:	e014      	b.n	80019e6 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4a46      	ldr	r2, [pc, #280]	; (8001ad8 <ADC_ConversionStop+0x168>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d90d      	bls.n	80019e0 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f043 0210 	orr.w	r2, r3, #16
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d4:	f043 0201 	orr.w	r2, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e076      	b.n	8001ace <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	3301      	adds	r3, #1
 80019e4:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f0:	2b40      	cmp	r3, #64	; 0x40
 80019f2:	d1e3      	bne.n	80019bc <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2240      	movs	r2, #64	; 0x40
 80019fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2b60      	cmp	r3, #96	; 0x60
 8001a00:	d015      	beq.n	8001a2e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d10e      	bne.n	8001a2e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d107      	bne.n	8001a2e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0210 	orr.w	r2, r2, #16
 8001a2c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2b0c      	cmp	r3, #12
 8001a32:	d015      	beq.n	8001a60 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d10e      	bne.n	8001a60 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d107      	bne.n	8001a60 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0220 	orr.w	r2, r2, #32
 8001a5e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	2b60      	cmp	r3, #96	; 0x60
 8001a64:	d005      	beq.n	8001a72 <ADC_ConversionStop+0x102>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2b6c      	cmp	r3, #108	; 0x6c
 8001a6a:	d105      	bne.n	8001a78 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	617b      	str	r3, [r7, #20]
        break;
 8001a70:	e005      	b.n	8001a7e <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001a72:	2308      	movs	r3, #8
 8001a74:	617b      	str	r3, [r7, #20]
        break;
 8001a76:	e002      	b.n	8001a7e <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001a78:	2304      	movs	r3, #4
 8001a7a:	617b      	str	r3, [r7, #20]
        break;
 8001a7c:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001a7e:	f7ff f87f 	bl	8000b80 <HAL_GetTick>
 8001a82:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001a84:	e01b      	b.n	8001abe <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001a86:	f7ff f87b 	bl	8000b80 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b0b      	cmp	r3, #11
 8001a92:	d914      	bls.n	8001abe <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00d      	beq.n	8001abe <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f043 0210 	orr.w	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f043 0201 	orr.w	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e007      	b.n	8001ace <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1dc      	bne.n	8001a86 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	000993ff 	.word	0x000993ff

08001adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af8:	4013      	ands	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0e:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	60d3      	str	r3, [r2, #12]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <__NVIC_GetPriorityGrouping+0x18>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	f003 0307 	and.w	r3, r3, #7
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	db0b      	blt.n	8001b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	f003 021f 	and.w	r2, r3, #31
 8001b58:	4907      	ldr	r1, [pc, #28]	; (8001b78 <__NVIC_EnableIRQ+0x38>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	095b      	lsrs	r3, r3, #5
 8001b60:	2001      	movs	r0, #1
 8001b62:	fa00 f202 	lsl.w	r2, r0, r2
 8001b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000e100 	.word	0xe000e100

08001b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db0a      	blt.n	8001ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	490c      	ldr	r1, [pc, #48]	; (8001bc8 <__NVIC_SetPriority+0x4c>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba4:	e00a      	b.n	8001bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4908      	ldr	r1, [pc, #32]	; (8001bcc <__NVIC_SetPriority+0x50>)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	3b04      	subs	r3, #4
 8001bb4:	0112      	lsls	r2, r2, #4
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	761a      	strb	r2, [r3, #24]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f1c3 0307 	rsb	r3, r3, #7
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf28      	it	cs
 8001bee:	2304      	movcs	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d902      	bls.n	8001c00 <NVIC_EncodePriority+0x30>
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3b03      	subs	r3, #3
 8001bfe:	e000      	b.n	8001c02 <NVIC_EncodePriority+0x32>
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	4313      	orrs	r3, r2
         );
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3724      	adds	r7, #36	; 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c48:	d301      	bcc.n	8001c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00f      	b.n	8001c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <SysTick_Config+0x40>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c56:	210f      	movs	r1, #15
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f7ff ff8e 	bl	8001b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <SysTick_Config+0x40>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c66:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <SysTick_Config+0x40>)
 8001c68:	2207      	movs	r2, #7
 8001c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	e000e010 	.word	0xe000e010

08001c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff29 	bl	8001adc <__NVIC_SetPriorityGrouping>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca4:	f7ff ff3e 	bl	8001b24 <__NVIC_GetPriorityGrouping>
 8001ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	6978      	ldr	r0, [r7, #20]
 8001cb0:	f7ff ff8e 	bl	8001bd0 <NVIC_EncodePriority>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff5d 	bl	8001b7c <__NVIC_SetPriority>
}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff31 	bl	8001b40 <__NVIC_EnableIRQ>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ffa2 	bl	8001c38 <SysTick_Config>
 8001cf4:	4603      	mov	r3, r0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e014      	b.n	8001d3a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	791b      	ldrb	r3, [r3, #4]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7fe fd87 	bl	8000834 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6819      	ldr	r1, [r3, #0]
 8001d52:	2201      	movs	r2, #1
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	400a      	ands	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	795b      	ldrb	r3, [r3, #5]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_DAC_Start+0x16>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e025      	b.n	8001e16 <HAL_DAC_Start+0x62>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6819      	ldr	r1, [r3, #0]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	409a      	lsls	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001df4:	2b3c      	cmp	r3, #60	; 0x3c
 8001df6:	d107      	bne.n	8001e08 <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	795b      	ldrb	r3, [r3, #5]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_DAC_Start_DMA+0x1e>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e053      	b.n	8001eea <HAL_DAC_Start_DMA+0xc6>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	711a      	strb	r2, [r3, #4]
    
  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	4a28      	ldr	r2, [pc, #160]	; (8001ef4 <HAL_DAC_Start_DMA+0xd0>)
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	4a27      	ldr	r2, [pc, #156]	; (8001ef8 <HAL_DAC_Start_DMA+0xd4>)
 8001e5c:	62da      	str	r2, [r3, #44]	; 0x2c
    
  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	4a26      	ldr	r2, [pc, #152]	; (8001efc <HAL_DAC_Start_DMA+0xd8>)
 8001e64:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e74:	601a      	str	r2, [r3, #0]
    
  /* Case of use of channel 1U */
  switch(Alignment)
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d013      	beq.n	8001ea4 <HAL_DAC_Start_DMA+0x80>
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d815      	bhi.n	8001eae <HAL_DAC_Start_DMA+0x8a>
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_DAC_Start_DMA+0x6c>
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d005      	beq.n	8001e9a <HAL_DAC_Start_DMA+0x76>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
      break;
    default:
      break;
 8001e8e:	e00e      	b.n	8001eae <HAL_DAC_Start_DMA+0x8a>
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	3308      	adds	r3, #8
 8001e96:	617b      	str	r3, [r7, #20]
      break;
 8001e98:	e00a      	b.n	8001eb0 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	330c      	adds	r3, #12
 8001ea0:	617b      	str	r3, [r7, #20]
      break;
 8001ea2:	e005      	b.n	8001eb0 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	3310      	adds	r3, #16
 8001eaa:	617b      	str	r3, [r7, #20]
      break;
 8001eac:	e000      	b.n	8001eb0 <HAL_DAC_Start_DMA+0x8c>
      break;
 8001eae:	bf00      	nop
  }
  
  /* Enable the DMA Channel */
  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ebe:	601a      	str	r2, [r3, #0]

  /* Enable the DMA Channel */
  HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6898      	ldr	r0, [r3, #8]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	f000 f8e3 	bl	8002094 <HAL_DMA_Start_IT>
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel); 
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6819      	ldr	r1, [r3, #0]
 8001eda:	2201      	movs	r2, #1
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
 
  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	08001f9b 	.word	0x08001f9b
 8001ef8:	08001fbd 	.word	0x08001fbd
 8001efc:	08001fd9 	.word	0x08001fd9

08001f00 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	795b      	ldrb	r3, [r3, #5]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_DAC_ConfigChannel+0x20>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e036      	b.n	8001f8e <HAL_DAC_ConfigChannel+0x8e>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2201      	movs	r2, #1
 8001f24:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001f34:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	4013      	ands	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6819      	ldr	r1, [r3, #0]
 8001f6e:	22c0      	movs	r2, #192	; 0xc0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	371c      	adds	r7, #28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7ff fee5 	bl	8001d78 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	711a      	strb	r2, [r3, #4]
}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7ff fede 	bl	8001d8c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8001fd0:	bf00      	nop
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f043 0204 	orr.w	r2, r3, #4
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7ff fed4 	bl	8001da0 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	711a      	strb	r2, [r3, #4]
}
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e037      	b.n	800208c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002032:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002036:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002040:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800204c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002058:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f940 	bl	80022f4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}  
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_DMA_Start_IT+0x20>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e04a      	b.n	800214a <HAL_DMA_Start_IT+0xb6>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d13a      	bne.n	800213c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2202      	movs	r2, #2
 80020ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f8d4 	bl	8002298 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 020e 	orr.w	r2, r2, #14
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	e00f      	b.n	800212a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 020a 	orr.w	r2, r2, #10
 8002118:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0204 	bic.w	r2, r2, #4
 8002128:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0201 	orr.w	r2, r2, #1
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e005      	b.n	8002148 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002144:	2302      	movs	r3, #2
 8002146:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002148:	7dfb      	ldrb	r3, [r7, #23]
} 
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b084      	sub	sp, #16
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	2204      	movs	r2, #4
 8002170:	409a      	lsls	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d024      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x72>
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01f      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	2b00      	cmp	r3, #0
 8002190:	d107      	bne.n	80021a2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0204 	bic.w	r2, r2, #4
 80021a0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021aa:	2104      	movs	r1, #4
 80021ac:	fa01 f202 	lsl.w	r2, r1, r2
 80021b0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d06a      	beq.n	8002290 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80021c2:	e065      	b.n	8002290 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2202      	movs	r2, #2
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d02c      	beq.n	800222e <HAL_DMA_IRQHandler+0xdc>
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d027      	beq.n	800222e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10b      	bne.n	8002204 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 020a 	bic.w	r2, r2, #10
 80021fa:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220c:	2102      	movs	r1, #2
 800220e:	fa01 f202 	lsl.w	r2, r1, r2
 8002212:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	2b00      	cmp	r3, #0
 8002222:	d035      	beq.n	8002290 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800222c:	e030      	b.n	8002290 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2208      	movs	r2, #8
 8002234:	409a      	lsls	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4013      	ands	r3, r2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d028      	beq.n	8002290 <HAL_DMA_IRQHandler+0x13e>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d023      	beq.n	8002290 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 020e 	bic.w	r2, r2, #14
 8002256:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002260:	2101      	movs	r1, #1
 8002262:	fa01 f202 	lsl.w	r2, r1, r2
 8002266:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	2b00      	cmp	r3, #0
 8002284:	d004      	beq.n	8002290 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	4798      	blx	r3
    }
  }
}  
 800228e:	e7ff      	b.n	8002290 <HAL_DMA_IRQHandler+0x13e>
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	2101      	movs	r1, #1
 80022b0:	fa01 f202 	lsl.w	r2, r1, r2
 80022b4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d108      	bne.n	80022d8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022d6:	e007      	b.n	80022e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	60da      	str	r2, [r3, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <DMA_CalcBaseAndBitshift+0x34>)
 8002304:	4413      	add	r3, r2
 8002306:	4a09      	ldr	r2, [pc, #36]	; (800232c <DMA_CalcBaseAndBitshift+0x38>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	009a      	lsls	r2, r3, #2
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a06      	ldr	r2, [pc, #24]	; (8002330 <DMA_CalcBaseAndBitshift+0x3c>)
 8002318:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	bffdfff8 	.word	0xbffdfff8
 800232c:	cccccccd 	.word	0xcccccccd
 8002330:	40020000 	.word	0x40020000

08002334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002342:	e14e      	b.n	80025e2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2101      	movs	r1, #1
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	4013      	ands	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8140 	beq.w	80025dc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b01      	cmp	r3, #1
 8002366:	d005      	beq.n	8002374 <HAL_GPIO_Init+0x40>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d130      	bne.n	80023d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023aa:	2201      	movs	r2, #1
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	f003 0201 	and.w	r2, r3, #1
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d017      	beq.n	8002412 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	2203      	movs	r2, #3
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d123      	bne.n	8002466 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	08da      	lsrs	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3208      	adds	r2, #8
 8002426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	220f      	movs	r2, #15
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	08da      	lsrs	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3208      	adds	r2, #8
 8002460:	6939      	ldr	r1, [r7, #16]
 8002462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0203 	and.w	r2, r3, #3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 809a 	beq.w	80025dc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a8:	4b55      	ldr	r3, [pc, #340]	; (8002600 <HAL_GPIO_Init+0x2cc>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4a54      	ldr	r2, [pc, #336]	; (8002600 <HAL_GPIO_Init+0x2cc>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6193      	str	r3, [r2, #24]
 80024b4:	4b52      	ldr	r3, [pc, #328]	; (8002600 <HAL_GPIO_Init+0x2cc>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024c0:	4a50      	ldr	r2, [pc, #320]	; (8002604 <HAL_GPIO_Init+0x2d0>)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	3302      	adds	r3, #2
 80024c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024ea:	d013      	beq.n	8002514 <HAL_GPIO_Init+0x1e0>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a46      	ldr	r2, [pc, #280]	; (8002608 <HAL_GPIO_Init+0x2d4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00d      	beq.n	8002510 <HAL_GPIO_Init+0x1dc>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a45      	ldr	r2, [pc, #276]	; (800260c <HAL_GPIO_Init+0x2d8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d007      	beq.n	800250c <HAL_GPIO_Init+0x1d8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a44      	ldr	r2, [pc, #272]	; (8002610 <HAL_GPIO_Init+0x2dc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d101      	bne.n	8002508 <HAL_GPIO_Init+0x1d4>
 8002504:	2303      	movs	r3, #3
 8002506:	e006      	b.n	8002516 <HAL_GPIO_Init+0x1e2>
 8002508:	2305      	movs	r3, #5
 800250a:	e004      	b.n	8002516 <HAL_GPIO_Init+0x1e2>
 800250c:	2302      	movs	r3, #2
 800250e:	e002      	b.n	8002516 <HAL_GPIO_Init+0x1e2>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_GPIO_Init+0x1e2>
 8002514:	2300      	movs	r3, #0
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	f002 0203 	and.w	r2, r2, #3
 800251c:	0092      	lsls	r2, r2, #2
 800251e:	4093      	lsls	r3, r2
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002526:	4937      	ldr	r1, [pc, #220]	; (8002604 <HAL_GPIO_Init+0x2d0>)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	3302      	adds	r3, #2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002534:	4b37      	ldr	r3, [pc, #220]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	43db      	mvns	r3, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002558:	4a2e      	ldr	r2, [pc, #184]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800255e:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	43db      	mvns	r3, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	43db      	mvns	r3, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025ac:	4a19      	ldr	r2, [pc, #100]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025d6:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3301      	adds	r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f aea9 	bne.w	8002344 <HAL_GPIO_Init+0x10>
  }
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40021000 	.word	0x40021000
 8002604:	40010000 	.word	0x40010000
 8002608:	48000400 	.word	0x48000400
 800260c:	48000800 	.word	0x48000800
 8002610:	48000c00 	.word	0x48000c00
 8002614:	40010400 	.word	0x40010400

08002618 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	887b      	ldrh	r3, [r7, #2]
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
 8002634:	e001      	b.n	800263a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800263a:	7bfb      	ldrb	r3, [r7, #15]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	807b      	strh	r3, [r7, #2]
 8002654:	4613      	mov	r3, r2
 8002656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002658:	787b      	ldrb	r3, [r7, #1]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002664:	e002      	b.n	800266c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800267e:	af00      	add	r7, sp, #0
 8002680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002684:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002688:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	f001 b823 	b.w	80036e4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 817d 	beq.w	80029ae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026b4:	4bbc      	ldr	r3, [pc, #752]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 030c 	and.w	r3, r3, #12
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d00c      	beq.n	80026da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026c0:	4bb9      	ldr	r3, [pc, #740]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d15c      	bne.n	8002786 <HAL_RCC_OscConfig+0x10e>
 80026cc:	4bb6      	ldr	r3, [pc, #728]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d8:	d155      	bne.n	8002786 <HAL_RCC_OscConfig+0x10e>
 80026da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	095b      	lsrs	r3, r3, #5
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d102      	bne.n	800270c <HAL_RCC_OscConfig+0x94>
 8002706:	4ba8      	ldr	r3, [pc, #672]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	e015      	b.n	8002738 <HAL_RCC_OscConfig+0xc0>
 800270c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002710:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002718:	fa93 f3a3 	rbit	r3, r3
 800271c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002720:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002724:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002728:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800272c:	fa93 f3a3 	rbit	r3, r3
 8002730:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002734:	4b9c      	ldr	r3, [pc, #624]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800273c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002740:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002744:	fa92 f2a2 	rbit	r2, r2
 8002748:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800274c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002750:	fab2 f282 	clz	r2, r2
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	f042 0220 	orr.w	r2, r2, #32
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	f002 021f 	and.w	r2, r2, #31
 8002760:	2101      	movs	r1, #1
 8002762:	fa01 f202 	lsl.w	r2, r1, r2
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 811f 	beq.w	80029ac <HAL_RCC_OscConfig+0x334>
 800276e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002772:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	f040 8116 	bne.w	80029ac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	f000 bfaf 	b.w	80036e4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002796:	d106      	bne.n	80027a6 <HAL_RCC_OscConfig+0x12e>
 8002798:	4b83      	ldr	r3, [pc, #524]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a82      	ldr	r2, [pc, #520]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 800279e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	e036      	b.n	8002814 <HAL_RCC_OscConfig+0x19c>
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x158>
 80027b6:	4b7c      	ldr	r3, [pc, #496]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a7b      	ldr	r2, [pc, #492]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 80027bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	4b79      	ldr	r3, [pc, #484]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a78      	ldr	r2, [pc, #480]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 80027c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e021      	b.n	8002814 <HAL_RCC_OscConfig+0x19c>
 80027d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0x184>
 80027e2:	4b71      	ldr	r3, [pc, #452]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a70      	ldr	r2, [pc, #448]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 80027e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b6e      	ldr	r3, [pc, #440]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a6d      	ldr	r2, [pc, #436]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 80027f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	e00b      	b.n	8002814 <HAL_RCC_OscConfig+0x19c>
 80027fc:	4b6a      	ldr	r3, [pc, #424]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a69      	ldr	r2, [pc, #420]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 8002802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b67      	ldr	r3, [pc, #412]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a66      	ldr	r2, [pc, #408]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 800280e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002812:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002814:	4b64      	ldr	r3, [pc, #400]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	f023 020f 	bic.w	r2, r3, #15
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	495f      	ldr	r1, [pc, #380]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 800282a:	4313      	orrs	r3, r2
 800282c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800282e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002832:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d059      	beq.n	80028f2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7fe f99f 	bl	8000b80 <HAL_GetTick>
 8002842:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	e00a      	b.n	800285e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002848:	f7fe f99a 	bl	8000b80 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b64      	cmp	r3, #100	; 0x64
 8002856:	d902      	bls.n	800285e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	f000 bf43 	b.w	80036e4 <HAL_RCC_OscConfig+0x106c>
 800285e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002862:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002872:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	095b      	lsrs	r3, r3, #5
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d102      	bne.n	8002890 <HAL_RCC_OscConfig+0x218>
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	e015      	b.n	80028bc <HAL_RCC_OscConfig+0x244>
 8002890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002894:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80028a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028a8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80028ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80028b0:	fa93 f3a3 	rbit	r3, r3
 80028b4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80028b8:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028c0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80028c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80028c8:	fa92 f2a2 	rbit	r2, r2
 80028cc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80028d0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80028d4:	fab2 f282 	clz	r2, r2
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	f042 0220 	orr.w	r2, r2, #32
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	f002 021f 	and.w	r2, r2, #31
 80028e4:	2101      	movs	r1, #1
 80028e6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0ab      	beq.n	8002848 <HAL_RCC_OscConfig+0x1d0>
 80028f0:	e05d      	b.n	80029ae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f2:	f7fe f945 	bl	8000b80 <HAL_GetTick>
 80028f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fc:	f7fe f940 	bl	8000b80 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b64      	cmp	r3, #100	; 0x64
 800290a:	d902      	bls.n	8002912 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	f000 bee9 	b.w	80036e4 <HAL_RCC_OscConfig+0x106c>
 8002912:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002916:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002926:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d102      	bne.n	8002944 <HAL_RCC_OscConfig+0x2cc>
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	e015      	b.n	8002970 <HAL_RCC_OscConfig+0x2f8>
 8002944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002948:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800295c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002960:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800296c:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <HAL_RCC_OscConfig+0x330>)
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002974:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002978:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800297c:	fa92 f2a2 	rbit	r2, r2
 8002980:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002984:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002988:	fab2 f282 	clz	r2, r2
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	f042 0220 	orr.w	r2, r2, #32
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	f002 021f 	and.w	r2, r2, #31
 8002998:	2101      	movs	r1, #1
 800299a:	fa01 f202 	lsl.w	r2, r1, r2
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1ab      	bne.n	80028fc <HAL_RCC_OscConfig+0x284>
 80029a4:	e003      	b.n	80029ae <HAL_RCC_OscConfig+0x336>
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 817d 	beq.w	8002cbe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029c4:	4ba6      	ldr	r3, [pc, #664]	; (8002c60 <HAL_RCC_OscConfig+0x5e8>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00b      	beq.n	80029e8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029d0:	4ba3      	ldr	r3, [pc, #652]	; (8002c60 <HAL_RCC_OscConfig+0x5e8>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d172      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x44a>
 80029dc:	4ba0      	ldr	r3, [pc, #640]	; (8002c60 <HAL_RCC_OscConfig+0x5e8>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d16c      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x44a>
 80029e8:	2302      	movs	r3, #2
 80029ea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80029fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d102      	bne.n	8002a18 <HAL_RCC_OscConfig+0x3a0>
 8002a12:	4b93      	ldr	r3, [pc, #588]	; (8002c60 <HAL_RCC_OscConfig+0x5e8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	e013      	b.n	8002a40 <HAL_RCC_OscConfig+0x3c8>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002a30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002a3c:	4b88      	ldr	r3, [pc, #544]	; (8002c60 <HAL_RCC_OscConfig+0x5e8>)
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	2202      	movs	r2, #2
 8002a42:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002a46:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002a4a:	fa92 f2a2 	rbit	r2, r2
 8002a4e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002a52:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002a56:	fab2 f282 	clz	r2, r2
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	f042 0220 	orr.w	r2, r2, #32
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	f002 021f 	and.w	r2, r2, #31
 8002a66:	2101      	movs	r1, #1
 8002a68:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_RCC_OscConfig+0x410>
 8002a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d002      	beq.n	8002a88 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f000 be2e 	b.w	80036e4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a88:	4b75      	ldr	r3, [pc, #468]	; (8002c60 <HAL_RCC_OscConfig+0x5e8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	21f8      	movs	r1, #248	; 0xf8
 8002a9e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002aa6:	fa91 f1a1 	rbit	r1, r1
 8002aaa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002aae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002ab2:	fab1 f181 	clz	r1, r1
 8002ab6:	b2c9      	uxtb	r1, r1
 8002ab8:	408b      	lsls	r3, r1
 8002aba:	4969      	ldr	r1, [pc, #420]	; (8002c60 <HAL_RCC_OscConfig+0x5e8>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac0:	e0fd      	b.n	8002cbe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 8088 	beq.w	8002be4 <HAL_RCC_OscConfig+0x56c>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002ae6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002af4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	461a      	mov	r2, r3
 8002afc:	2301      	movs	r3, #1
 8002afe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fe f83e 	bl	8000b80 <HAL_GetTick>
 8002b04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b08:	e00a      	b.n	8002b20 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0a:	f7fe f839 	bl	8000b80 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d902      	bls.n	8002b20 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	f000 bde2 	b.w	80036e4 <HAL_RCC_OscConfig+0x106c>
 8002b20:	2302      	movs	r3, #2
 8002b22:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002b32:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d102      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4d8>
 8002b4a:	4b45      	ldr	r3, [pc, #276]	; (8002c60 <HAL_RCC_OscConfig+0x5e8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	e013      	b.n	8002b78 <HAL_RCC_OscConfig+0x500>
 8002b50:	2302      	movs	r3, #2
 8002b52:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b62:	2302      	movs	r3, #2
 8002b64:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b68:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002b74:	4b3a      	ldr	r3, [pc, #232]	; (8002c60 <HAL_RCC_OscConfig+0x5e8>)
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	2202      	movs	r2, #2
 8002b7a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002b7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002b82:	fa92 f2a2 	rbit	r2, r2
 8002b86:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002b8a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002b8e:	fab2 f282 	clz	r2, r2
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	f042 0220 	orr.w	r2, r2, #32
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	f002 021f 	and.w	r2, r2, #31
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0af      	beq.n	8002b0a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002baa:	4b2d      	ldr	r3, [pc, #180]	; (8002c60 <HAL_RCC_OscConfig+0x5e8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	21f8      	movs	r1, #248	; 0xf8
 8002bc0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002bc8:	fa91 f1a1 	rbit	r1, r1
 8002bcc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002bd0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002bd4:	fab1 f181 	clz	r1, r1
 8002bd8:	b2c9      	uxtb	r1, r1
 8002bda:	408b      	lsls	r3, r1
 8002bdc:	4920      	ldr	r1, [pc, #128]	; (8002c60 <HAL_RCC_OscConfig+0x5e8>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
 8002be2:	e06c      	b.n	8002cbe <HAL_RCC_OscConfig+0x646>
 8002be4:	2301      	movs	r3, #1
 8002be6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002bf6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fd ffb6 	bl	8000b80 <HAL_GetTick>
 8002c14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c18:	e00a      	b.n	8002c30 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c1a:	f7fd ffb1 	bl	8000b80 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d902      	bls.n	8002c30 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	f000 bd5a 	b.w	80036e4 <HAL_RCC_OscConfig+0x106c>
 8002c30:	2302      	movs	r3, #2
 8002c32:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d104      	bne.n	8002c64 <HAL_RCC_OscConfig+0x5ec>
 8002c5a:	4b01      	ldr	r3, [pc, #4]	; (8002c60 <HAL_RCC_OscConfig+0x5e8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	e015      	b.n	8002c8c <HAL_RCC_OscConfig+0x614>
 8002c60:	40021000 	.word	0x40021000
 8002c64:	2302      	movs	r3, #2
 8002c66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c76:	2302      	movs	r3, #2
 8002c78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002c7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c88:	4bc8      	ldr	r3, [pc, #800]	; (8002fac <HAL_RCC_OscConfig+0x934>)
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002c92:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c96:	fa92 f2a2 	rbit	r2, r2
 8002c9a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002c9e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002ca2:	fab2 f282 	clz	r2, r2
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	f042 0220 	orr.w	r2, r2, #32
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	f002 021f 	and.w	r2, r2, #31
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1ad      	bne.n	8002c1a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 8110 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d079      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x760>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	4bab      	ldr	r3, [pc, #684]	; (8002fb0 <HAL_RCC_OscConfig+0x938>)
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0e:	f7fd ff37 	bl	8000b80 <HAL_GetTick>
 8002d12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d18:	f7fd ff32 	bl	8000b80 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d902      	bls.n	8002d2e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	f000 bcdb 	b.w	80036e4 <HAL_RCC_OscConfig+0x106c>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d44:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d48:	2202      	movs	r2, #2
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d50:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	fa93 f2a3 	rbit	r2, r3
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	fa93 f2a3 	rbit	r2, r3
 8002d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d86:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d88:	4b88      	ldr	r3, [pc, #544]	; (8002fac <HAL_RCC_OscConfig+0x934>)
 8002d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d94:	2102      	movs	r1, #2
 8002d96:	6019      	str	r1, [r3, #0]
 8002d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f1a3 	rbit	r1, r3
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002dae:	6019      	str	r1, [r3, #0]
  return result;
 8002db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	2101      	movs	r1, #1
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0a0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x6a0>
 8002dd6:	e08d      	b.n	8002ef4 <HAL_RCC_OscConfig+0x87c>
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	fa93 f2a3 	rbit	r2, r3
 8002df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002dfa:	601a      	str	r2, [r3, #0]
  return result;
 8002dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e04:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b68      	ldr	r3, [pc, #416]	; (8002fb0 <HAL_RCC_OscConfig+0x938>)
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	461a      	mov	r2, r3
 8002e16:	2300      	movs	r3, #0
 8002e18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1a:	f7fd feb1 	bl	8000b80 <HAL_GetTick>
 8002e1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e24:	f7fd feac 	bl	8000b80 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d902      	bls.n	8002e3a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	f000 bc55 	b.w	80036e4 <HAL_RCC_OscConfig+0x106c>
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e42:	2202      	movs	r2, #2
 8002e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	fa93 f2a3 	rbit	r2, r3
 8002e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e62:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e66:	2202      	movs	r2, #2
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	fa93 f2a3 	rbit	r2, r3
 8002e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	fa93 f2a3 	rbit	r2, r3
 8002e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ea4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea6:	4b41      	ldr	r3, [pc, #260]	; (8002fac <HAL_RCC_OscConfig+0x934>)
 8002ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	6019      	str	r1, [r3, #0]
 8002eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	fa93 f1a3 	rbit	r1, r3
 8002ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ecc:	6019      	str	r1, [r3, #0]
  return result;
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d197      	bne.n	8002e24 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 81a1 	beq.w	800324c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f10:	4b26      	ldr	r3, [pc, #152]	; (8002fac <HAL_RCC_OscConfig+0x934>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d116      	bne.n	8002f4a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1c:	4b23      	ldr	r3, [pc, #140]	; (8002fac <HAL_RCC_OscConfig+0x934>)
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	4a22      	ldr	r2, [pc, #136]	; (8002fac <HAL_RCC_OscConfig+0x934>)
 8002f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f26:	61d3      	str	r3, [r2, #28]
 8002f28:	4b20      	ldr	r3, [pc, #128]	; (8002fac <HAL_RCC_OscConfig+0x934>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002f42:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <HAL_RCC_OscConfig+0x93c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d11a      	bne.n	8002f8c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f56:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <HAL_RCC_OscConfig+0x93c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <HAL_RCC_OscConfig+0x93c>)
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f62:	f7fd fe0d 	bl	8000b80 <HAL_GetTick>
 8002f66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6a:	e009      	b.n	8002f80 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6c:	f7fd fe08 	bl	8000b80 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b64      	cmp	r3, #100	; 0x64
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e3b1      	b.n	80036e4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <HAL_RCC_OscConfig+0x93c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ef      	beq.n	8002f6c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d10d      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x940>
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_RCC_OscConfig+0x934>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4a02      	ldr	r2, [pc, #8]	; (8002fac <HAL_RCC_OscConfig+0x934>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6213      	str	r3, [r2, #32]
 8002fa8:	e03c      	b.n	8003024 <HAL_RCC_OscConfig+0x9ac>
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	10908120 	.word	0x10908120
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10c      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x96a>
 8002fc8:	4bc1      	ldr	r3, [pc, #772]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	4ac0      	ldr	r2, [pc, #768]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6213      	str	r3, [r2, #32]
 8002fd4:	4bbe      	ldr	r3, [pc, #760]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	4abd      	ldr	r2, [pc, #756]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 8002fda:	f023 0304 	bic.w	r3, r3, #4
 8002fde:	6213      	str	r3, [r2, #32]
 8002fe0:	e020      	b.n	8003024 <HAL_RCC_OscConfig+0x9ac>
 8002fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d10c      	bne.n	800300c <HAL_RCC_OscConfig+0x994>
 8002ff2:	4bb7      	ldr	r3, [pc, #732]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	4ab6      	ldr	r2, [pc, #728]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 8002ff8:	f043 0304 	orr.w	r3, r3, #4
 8002ffc:	6213      	str	r3, [r2, #32]
 8002ffe:	4bb4      	ldr	r3, [pc, #720]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	4ab3      	ldr	r2, [pc, #716]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	6213      	str	r3, [r2, #32]
 800300a:	e00b      	b.n	8003024 <HAL_RCC_OscConfig+0x9ac>
 800300c:	4bb0      	ldr	r3, [pc, #704]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	4aaf      	ldr	r2, [pc, #700]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 8003012:	f023 0301 	bic.w	r3, r3, #1
 8003016:	6213      	str	r3, [r2, #32]
 8003018:	4bad      	ldr	r3, [pc, #692]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4aac      	ldr	r2, [pc, #688]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 800301e:	f023 0304 	bic.w	r3, r3, #4
 8003022:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003028:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8081 	beq.w	8003138 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003036:	f7fd fda3 	bl	8000b80 <HAL_GetTick>
 800303a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303e:	e00b      	b.n	8003058 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003040:	f7fd fd9e 	bl	8000b80 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003050:	4293      	cmp	r3, r2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e345      	b.n	80036e4 <HAL_RCC_OscConfig+0x106c>
 8003058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003060:	2202      	movs	r2, #2
 8003062:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003068:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	fa93 f2a3 	rbit	r2, r3
 8003072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003076:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003080:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003084:	2202      	movs	r2, #2
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	fa93 f2a3 	rbit	r2, r3
 8003096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800309e:	601a      	str	r2, [r3, #0]
  return result;
 80030a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80030a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f043 0302 	orr.w	r3, r3, #2
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d102      	bne.n	80030c4 <HAL_RCC_OscConfig+0xa4c>
 80030be:	4b84      	ldr	r3, [pc, #528]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	e013      	b.n	80030ec <HAL_RCC_OscConfig+0xa74>
 80030c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80030cc:	2202      	movs	r2, #2
 80030ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	fa93 f2a3 	rbit	r2, r3
 80030de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	4b79      	ldr	r3, [pc, #484]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80030f4:	2102      	movs	r1, #2
 80030f6:	6011      	str	r1, [r2, #0]
 80030f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	fa92 f1a2 	rbit	r1, r2
 8003106:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800310a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800310e:	6011      	str	r1, [r2, #0]
  return result;
 8003110:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003114:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	fab2 f282 	clz	r2, r2
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	f002 021f 	and.w	r2, r2, #31
 800312a:	2101      	movs	r1, #1
 800312c:	fa01 f202 	lsl.w	r2, r1, r2
 8003130:	4013      	ands	r3, r2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d084      	beq.n	8003040 <HAL_RCC_OscConfig+0x9c8>
 8003136:	e07f      	b.n	8003238 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003138:	f7fd fd22 	bl	8000b80 <HAL_GetTick>
 800313c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003140:	e00b      	b.n	800315a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fd fd1d 	bl	8000b80 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e2c4      	b.n	80036e4 <HAL_RCC_OscConfig+0x106c>
 800315a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003162:	2202      	movs	r2, #2
 8003164:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	fa93 f2a3 	rbit	r2, r3
 8003174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003178:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003182:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003186:	2202      	movs	r2, #2
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	fa93 f2a3 	rbit	r2, r3
 8003198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80031a0:	601a      	str	r2, [r3, #0]
  return result;
 80031a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80031aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	f043 0302 	orr.w	r3, r3, #2
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d102      	bne.n	80031c6 <HAL_RCC_OscConfig+0xb4e>
 80031c0:	4b43      	ldr	r3, [pc, #268]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	e013      	b.n	80031ee <HAL_RCC_OscConfig+0xb76>
 80031c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80031ce:	2202      	movs	r2, #2
 80031d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	fa93 f2a3 	rbit	r2, r3
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80031f6:	2102      	movs	r1, #2
 80031f8:	6011      	str	r1, [r2, #0]
 80031fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	fa92 f1a2 	rbit	r1, r2
 8003208:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800320c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003210:	6011      	str	r1, [r2, #0]
  return result;
 8003212:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003216:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	fab2 f282 	clz	r2, r2
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	f002 021f 	and.w	r2, r2, #31
 800322c:	2101      	movs	r1, #1
 800322e:	fa01 f202 	lsl.w	r2, r1, r2
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d184      	bne.n	8003142 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003238:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800323c:	2b01      	cmp	r3, #1
 800323e:	d105      	bne.n	800324c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003240:	4b23      	ldr	r3, [pc, #140]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	4a22      	ldr	r2, [pc, #136]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 8003246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003250:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 8242 	beq.w	80036e2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800325e:	4b1c      	ldr	r3, [pc, #112]	; (80032d0 <HAL_RCC_OscConfig+0xc58>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	2b08      	cmp	r3, #8
 8003268:	f000 8213 	beq.w	8003692 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800326c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003270:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	2b02      	cmp	r3, #2
 800327a:	f040 8162 	bne.w	8003542 <HAL_RCC_OscConfig+0xeca>
 800327e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003282:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003286:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800328a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003290:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	fa93 f2a3 	rbit	r2, r3
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80032a2:	601a      	str	r2, [r3, #0]
  return result;
 80032a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80032ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	461a      	mov	r2, r3
 80032c0:	2300      	movs	r3, #0
 80032c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fd fc5c 	bl	8000b80 <HAL_GetTick>
 80032c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032cc:	e00c      	b.n	80032e8 <HAL_RCC_OscConfig+0xc70>
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d4:	f7fd fc54 	bl	8000b80 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e1fd      	b.n	80036e4 <HAL_RCC_OscConfig+0x106c>
 80032e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80032f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	fa93 f2a3 	rbit	r2, r3
 8003304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003308:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800330c:	601a      	str	r2, [r3, #0]
  return result;
 800330e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003312:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003316:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003318:	fab3 f383 	clz	r3, r3
 800331c:	b2db      	uxtb	r3, r3
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	b2db      	uxtb	r3, r3
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b01      	cmp	r3, #1
 800332a:	d102      	bne.n	8003332 <HAL_RCC_OscConfig+0xcba>
 800332c:	4bb0      	ldr	r3, [pc, #704]	; (80035f0 <HAL_RCC_OscConfig+0xf78>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	e027      	b.n	8003382 <HAL_RCC_OscConfig+0xd0a>
 8003332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003336:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800333a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800333e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003344:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	fa93 f2a3 	rbit	r2, r3
 800334e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003352:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003360:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	fa93 f2a3 	rbit	r2, r3
 8003374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003378:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	4b9c      	ldr	r3, [pc, #624]	; (80035f0 <HAL_RCC_OscConfig+0xf78>)
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003386:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800338a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800338e:	6011      	str	r1, [r2, #0]
 8003390:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003394:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	fa92 f1a2 	rbit	r1, r2
 800339e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033a2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80033a6:	6011      	str	r1, [r2, #0]
  return result;
 80033a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033ac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	fab2 f282 	clz	r2, r2
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	f042 0220 	orr.w	r2, r2, #32
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	f002 021f 	and.w	r2, r2, #31
 80033c2:	2101      	movs	r1, #1
 80033c4:	fa01 f202 	lsl.w	r2, r1, r2
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d182      	bne.n	80032d4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ce:	4b88      	ldr	r3, [pc, #544]	; (80035f0 <HAL_RCC_OscConfig+0xf78>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	430b      	orrs	r3, r1
 80033f0:	497f      	ldr	r1, [pc, #508]	; (80035f0 <HAL_RCC_OscConfig+0xf78>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]
 80033f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80033fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003408:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	fa93 f2a3 	rbit	r2, r3
 8003412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003416:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800341a:	601a      	str	r2, [r3, #0]
  return result;
 800341c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003420:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003424:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003430:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	461a      	mov	r2, r3
 8003438:	2301      	movs	r3, #1
 800343a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7fd fba0 	bl	8000b80 <HAL_GetTick>
 8003440:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003444:	e009      	b.n	800345a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003446:	f7fd fb9b 	bl	8000b80 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e144      	b.n	80036e4 <HAL_RCC_OscConfig+0x106c>
 800345a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003462:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	fa93 f2a3 	rbit	r2, r3
 8003476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800347e:	601a      	str	r2, [r3, #0]
  return result;
 8003480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003484:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003488:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d102      	bne.n	80034a4 <HAL_RCC_OscConfig+0xe2c>
 800349e:	4b54      	ldr	r3, [pc, #336]	; (80035f0 <HAL_RCC_OscConfig+0xf78>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	e027      	b.n	80034f4 <HAL_RCC_OscConfig+0xe7c>
 80034a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80034ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	fa93 f2a3 	rbit	r2, r3
 80034c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80034d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034dc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	fa93 f2a3 	rbit	r2, r3
 80034e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	4b3f      	ldr	r3, [pc, #252]	; (80035f0 <HAL_RCC_OscConfig+0xf78>)
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034f8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80034fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003500:	6011      	str	r1, [r2, #0]
 8003502:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003506:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	fa92 f1a2 	rbit	r1, r2
 8003510:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003514:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003518:	6011      	str	r1, [r2, #0]
  return result;
 800351a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800351e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	fab2 f282 	clz	r2, r2
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	f042 0220 	orr.w	r2, r2, #32
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	f002 021f 	and.w	r2, r2, #31
 8003534:	2101      	movs	r1, #1
 8003536:	fa01 f202 	lsl.w	r2, r1, r2
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d082      	beq.n	8003446 <HAL_RCC_OscConfig+0xdce>
 8003540:	e0cf      	b.n	80036e2 <HAL_RCC_OscConfig+0x106a>
 8003542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003546:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800354a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800354e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003554:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	fa93 f2a3 	rbit	r2, r3
 800355e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003562:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003566:	601a      	str	r2, [r3, #0]
  return result;
 8003568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003570:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800357c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	461a      	mov	r2, r3
 8003584:	2300      	movs	r3, #0
 8003586:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fd fafa 	bl	8000b80 <HAL_GetTick>
 800358c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003590:	e009      	b.n	80035a6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003592:	f7fd faf5 	bl	8000b80 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e09e      	b.n	80036e4 <HAL_RCC_OscConfig+0x106c>
 80035a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80035ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	fa93 f2a3 	rbit	r2, r3
 80035c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80035ca:	601a      	str	r2, [r3, #0]
  return result;
 80035cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80035d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d104      	bne.n	80035f4 <HAL_RCC_OscConfig+0xf7c>
 80035ea:	4b01      	ldr	r3, [pc, #4]	; (80035f0 <HAL_RCC_OscConfig+0xf78>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	e029      	b.n	8003644 <HAL_RCC_OscConfig+0xfcc>
 80035f0:	40021000 	.word	0x40021000
 80035f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80035fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003606:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	fa93 f2a3 	rbit	r2, r3
 8003610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003614:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003622:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	fa93 f2a3 	rbit	r2, r3
 8003636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	4b2b      	ldr	r3, [pc, #172]	; (80036f0 <HAL_RCC_OscConfig+0x1078>)
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003648:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800364c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003650:	6011      	str	r1, [r2, #0]
 8003652:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003656:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	fa92 f1a2 	rbit	r1, r2
 8003660:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003664:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003668:	6011      	str	r1, [r2, #0]
  return result;
 800366a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800366e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	fab2 f282 	clz	r2, r2
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	f042 0220 	orr.w	r2, r2, #32
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	f002 021f 	and.w	r2, r2, #31
 8003684:	2101      	movs	r1, #1
 8003686:	fa01 f202 	lsl.w	r2, r1, r2
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d180      	bne.n	8003592 <HAL_RCC_OscConfig+0xf1a>
 8003690:	e027      	b.n	80036e2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003696:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e01e      	b.n	80036e4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <HAL_RCC_OscConfig+0x1078>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036b2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d10b      	bne.n	80036de <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80036c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036da:	429a      	cmp	r2, r3
 80036dc:	d001      	beq.n	80036e2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000

080036f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b09e      	sub	sp, #120	; 0x78
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e162      	b.n	80039d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800370c:	4b90      	ldr	r3, [pc, #576]	; (8003950 <HAL_RCC_ClockConfig+0x25c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d910      	bls.n	800373c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b8d      	ldr	r3, [pc, #564]	; (8003950 <HAL_RCC_ClockConfig+0x25c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 0207 	bic.w	r2, r3, #7
 8003722:	498b      	ldr	r1, [pc, #556]	; (8003950 <HAL_RCC_ClockConfig+0x25c>)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b89      	ldr	r3, [pc, #548]	; (8003950 <HAL_RCC_ClockConfig+0x25c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e14a      	b.n	80039d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003748:	4b82      	ldr	r3, [pc, #520]	; (8003954 <HAL_RCC_ClockConfig+0x260>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	497f      	ldr	r1, [pc, #508]	; (8003954 <HAL_RCC_ClockConfig+0x260>)
 8003756:	4313      	orrs	r3, r2
 8003758:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80dc 	beq.w	8003920 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d13c      	bne.n	80037ea <HAL_RCC_ClockConfig+0xf6>
 8003770:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003774:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800377e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003780:	fab3 f383 	clz	r3, r3
 8003784:	b2db      	uxtb	r3, r3
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	b2db      	uxtb	r3, r3
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d102      	bne.n	800379a <HAL_RCC_ClockConfig+0xa6>
 8003794:	4b6f      	ldr	r3, [pc, #444]	; (8003954 <HAL_RCC_ClockConfig+0x260>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	e00f      	b.n	80037ba <HAL_RCC_ClockConfig+0xc6>
 800379a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800379e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	667b      	str	r3, [r7, #100]	; 0x64
 80037a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ac:	663b      	str	r3, [r7, #96]	; 0x60
 80037ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037b0:	fa93 f3a3 	rbit	r3, r3
 80037b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037b6:	4b67      	ldr	r3, [pc, #412]	; (8003954 <HAL_RCC_ClockConfig+0x260>)
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037be:	65ba      	str	r2, [r7, #88]	; 0x58
 80037c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037c2:	fa92 f2a2 	rbit	r2, r2
 80037c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80037c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037ca:	fab2 f282 	clz	r2, r2
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	f042 0220 	orr.w	r2, r2, #32
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	f002 021f 	and.w	r2, r2, #31
 80037da:	2101      	movs	r1, #1
 80037dc:	fa01 f202 	lsl.w	r2, r1, r2
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d17b      	bne.n	80038de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0f3      	b.n	80039d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d13c      	bne.n	800386c <HAL_RCC_ClockConfig+0x178>
 80037f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037fa:	fa93 f3a3 	rbit	r3, r3
 80037fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d102      	bne.n	800381c <HAL_RCC_ClockConfig+0x128>
 8003816:	4b4f      	ldr	r3, [pc, #316]	; (8003954 <HAL_RCC_ClockConfig+0x260>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	e00f      	b.n	800383c <HAL_RCC_ClockConfig+0x148>
 800381c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003820:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	647b      	str	r3, [r7, #68]	; 0x44
 800382a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800382e:	643b      	str	r3, [r7, #64]	; 0x40
 8003830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003838:	4b46      	ldr	r3, [pc, #280]	; (8003954 <HAL_RCC_ClockConfig+0x260>)
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003840:	63ba      	str	r2, [r7, #56]	; 0x38
 8003842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003844:	fa92 f2a2 	rbit	r2, r2
 8003848:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800384a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800384c:	fab2 f282 	clz	r2, r2
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	f042 0220 	orr.w	r2, r2, #32
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f002 021f 	and.w	r2, r2, #31
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f202 	lsl.w	r2, r1, r2
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d13a      	bne.n	80038de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0b2      	b.n	80039d2 <HAL_RCC_ClockConfig+0x2de>
 800386c:	2302      	movs	r3, #2
 800386e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	fa93 f3a3 	rbit	r3, r3
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b01      	cmp	r3, #1
 800388c:	d102      	bne.n	8003894 <HAL_RCC_ClockConfig+0x1a0>
 800388e:	4b31      	ldr	r3, [pc, #196]	; (8003954 <HAL_RCC_ClockConfig+0x260>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	e00d      	b.n	80038b0 <HAL_RCC_ClockConfig+0x1bc>
 8003894:	2302      	movs	r3, #2
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
 80038a0:	2302      	movs	r3, #2
 80038a2:	623b      	str	r3, [r7, #32]
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	61fb      	str	r3, [r7, #28]
 80038ac:	4b29      	ldr	r3, [pc, #164]	; (8003954 <HAL_RCC_ClockConfig+0x260>)
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	2202      	movs	r2, #2
 80038b2:	61ba      	str	r2, [r7, #24]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	fa92 f2a2 	rbit	r2, r2
 80038ba:	617a      	str	r2, [r7, #20]
  return result;
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	fab2 f282 	clz	r2, r2
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	f042 0220 	orr.w	r2, r2, #32
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	f002 021f 	and.w	r2, r2, #31
 80038ce:	2101      	movs	r1, #1
 80038d0:	fa01 f202 	lsl.w	r2, r1, r2
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e079      	b.n	80039d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038de:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <HAL_RCC_ClockConfig+0x260>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f023 0203 	bic.w	r2, r3, #3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	491a      	ldr	r1, [pc, #104]	; (8003954 <HAL_RCC_ClockConfig+0x260>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f0:	f7fd f946 	bl	8000b80 <HAL_GetTick>
 80038f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	e00a      	b.n	800390e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f8:	f7fd f942 	bl	8000b80 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	; 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e061      	b.n	80039d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	4b11      	ldr	r3, [pc, #68]	; (8003954 <HAL_RCC_ClockConfig+0x260>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f003 020c 	and.w	r2, r3, #12
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	429a      	cmp	r2, r3
 800391e:	d1eb      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_RCC_ClockConfig+0x25c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d214      	bcs.n	8003958 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_RCC_ClockConfig+0x25c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 0207 	bic.w	r2, r3, #7
 8003936:	4906      	ldr	r1, [pc, #24]	; (8003950 <HAL_RCC_ClockConfig+0x25c>)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b04      	ldr	r3, [pc, #16]	; (8003950 <HAL_RCC_ClockConfig+0x25c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d005      	beq.n	8003958 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e040      	b.n	80039d2 <HAL_RCC_ClockConfig+0x2de>
 8003950:	40022000 	.word	0x40022000
 8003954:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003964:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <HAL_RCC_ClockConfig+0x2e8>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	491a      	ldr	r1, [pc, #104]	; (80039dc <HAL_RCC_ClockConfig+0x2e8>)
 8003972:	4313      	orrs	r3, r2
 8003974:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003982:	4b16      	ldr	r3, [pc, #88]	; (80039dc <HAL_RCC_ClockConfig+0x2e8>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4912      	ldr	r1, [pc, #72]	; (80039dc <HAL_RCC_ClockConfig+0x2e8>)
 8003992:	4313      	orrs	r3, r2
 8003994:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003996:	f000 f829 	bl	80039ec <HAL_RCC_GetSysClockFreq>
 800399a:	4601      	mov	r1, r0
 800399c:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <HAL_RCC_ClockConfig+0x2e8>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a4:	22f0      	movs	r2, #240	; 0xf0
 80039a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	fa92 f2a2 	rbit	r2, r2
 80039ae:	60fa      	str	r2, [r7, #12]
  return result;
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	fab2 f282 	clz	r2, r2
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	40d3      	lsrs	r3, r2
 80039ba:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <HAL_RCC_ClockConfig+0x2ec>)
 80039bc:	5cd3      	ldrb	r3, [r2, r3]
 80039be:	fa21 f303 	lsr.w	r3, r1, r3
 80039c2:	4a08      	ldr	r2, [pc, #32]	; (80039e4 <HAL_RCC_ClockConfig+0x2f0>)
 80039c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80039c6:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <HAL_RCC_ClockConfig+0x2f4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fd f894 	bl	8000af8 <HAL_InitTick>
  
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3778      	adds	r7, #120	; 0x78
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	08004c80 	.word	0x08004c80
 80039e4:	20000000 	.word	0x20000000
 80039e8:	20000004 	.word	0x20000004

080039ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b08b      	sub	sp, #44	; 0x2c
 80039f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	2300      	movs	r3, #0
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a06:	4b29      	ldr	r3, [pc, #164]	; (8003aac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d002      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0x30>
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d003      	beq.n	8003a22 <HAL_RCC_GetSysClockFreq+0x36>
 8003a1a:	e03c      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a1c:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a1e:	623b      	str	r3, [r7, #32]
      break;
 8003a20:	e03c      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a28:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a2c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	fa92 f2a2 	rbit	r2, r2
 8003a34:	607a      	str	r2, [r7, #4]
  return result;
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	fab2 f282 	clz	r2, r2
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	40d3      	lsrs	r3, r2
 8003a40:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a42:	5cd3      	ldrb	r3, [r2, r3]
 8003a44:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a46:	4b19      	ldr	r3, [pc, #100]	; (8003aac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	220f      	movs	r2, #15
 8003a50:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	fa92 f2a2 	rbit	r2, r2
 8003a58:	60fa      	str	r2, [r7, #12]
  return result;
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	fab2 f282 	clz	r2, r2
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	40d3      	lsrs	r3, r2
 8003a64:	4a14      	ldr	r2, [pc, #80]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a66:	5cd3      	ldrb	r3, [r2, r3]
 8003a68:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a74:	4a0e      	ldr	r2, [pc, #56]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
 8003a84:	e004      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	4a0c      	ldr	r2, [pc, #48]	; (8003abc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	623b      	str	r3, [r7, #32]
      break;
 8003a94:	e002      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a98:	623b      	str	r3, [r7, #32]
      break;
 8003a9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	372c      	adds	r7, #44	; 0x2c
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	007a1200 	.word	0x007a1200
 8003ab4:	08004c98 	.word	0x08004c98
 8003ab8:	08004ca8 	.word	0x08004ca8
 8003abc:	003d0900 	.word	0x003d0900

08003ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac4:	4b03      	ldr	r3, [pc, #12]	; (8003ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20000000 	.word	0x20000000

08003ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003ade:	f7ff ffef 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003ae2:	4601      	mov	r1, r0
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003aec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003af0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	fa92 f2a2 	rbit	r2, r2
 8003af8:	603a      	str	r2, [r7, #0]
  return result;
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	fab2 f282 	clz	r2, r2
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	40d3      	lsrs	r3, r2
 8003b04:	4a04      	ldr	r2, [pc, #16]	; (8003b18 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b06:	5cd3      	ldrb	r3, [r2, r3]
 8003b08:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000
 8003b18:	08004c90 	.word	0x08004c90

08003b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b22:	f7ff ffcd 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003b26:	4601      	mov	r1, r0
 8003b28:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b30:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	fa92 f2a2 	rbit	r2, r2
 8003b3c:	603a      	str	r2, [r7, #0]
  return result;
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	fab2 f282 	clz	r2, r2
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	40d3      	lsrs	r3, r2
 8003b48:	4a04      	ldr	r2, [pc, #16]	; (8003b5c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b4a:	5cd3      	ldrb	r3, [r2, r3]
 8003b4c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b50:	4618      	mov	r0, r3
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	08004c90 	.word	0x08004c90

08003b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b092      	sub	sp, #72	; 0x48
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b70:	2300      	movs	r3, #0
 8003b72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 80d4 	beq.w	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b84:	4b4e      	ldr	r3, [pc, #312]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10e      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b90:	4b4b      	ldr	r3, [pc, #300]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	4a4a      	ldr	r2, [pc, #296]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	61d3      	str	r3, [r2, #28]
 8003b9c:	4b48      	ldr	r3, [pc, #288]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bae:	4b45      	ldr	r3, [pc, #276]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d118      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bba:	4b42      	ldr	r3, [pc, #264]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a41      	ldr	r2, [pc, #260]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc6:	f7fc ffdb 	bl	8000b80 <HAL_GetTick>
 8003bca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bcc:	e008      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bce:	f7fc ffd7 	bl	8000b80 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b64      	cmp	r3, #100	; 0x64
 8003bda:	d901      	bls.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e14b      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be0:	4b38      	ldr	r3, [pc, #224]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bec:	4b34      	ldr	r3, [pc, #208]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 8084 	beq.w	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d07c      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c0c:	4b2c      	ldr	r3, [pc, #176]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	fa93 f3a3 	rbit	r3, r3
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c26:	fab3 f383 	clz	r3, r3
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	461a      	mov	r2, r3
 8003c36:	2301      	movs	r3, #1
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c42:	fa93 f3a3 	rbit	r3, r3
 8003c46:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c4a:	fab3 f383 	clz	r3, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c5e:	4a18      	ldr	r2, [pc, #96]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c62:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d04b      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6e:	f7fc ff87 	bl	8000b80 <HAL_GetTick>
 8003c72:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c74:	e00a      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c76:	f7fc ff83 	bl	8000b80 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e0f5      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
 8003c98:	2302      	movs	r3, #2
 8003c9a:	623b      	str	r3, [r7, #32]
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	fa93 f3a3 	rbit	r3, r3
 8003ca2:	61fb      	str	r3, [r7, #28]
  return result;
 8003ca4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca6:	fab3 f383 	clz	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f043 0302 	orr.w	r3, r3, #2
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d108      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003cba:	4b01      	ldr	r3, [pc, #4]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	e00d      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40007000 	.word	0x40007000
 8003cc8:	10908100 	.word	0x10908100
 8003ccc:	2302      	movs	r3, #2
 8003cce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	4b69      	ldr	r3, [pc, #420]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	2202      	movs	r2, #2
 8003cde:	613a      	str	r2, [r7, #16]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	fa92 f2a2 	rbit	r2, r2
 8003ce6:	60fa      	str	r2, [r7, #12]
  return result;
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	fab2 f282 	clz	r2, r2
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	f002 021f 	and.w	r2, r2, #31
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0b7      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d06:	4b5e      	ldr	r3, [pc, #376]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	495b      	ldr	r1, [pc, #364]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d105      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d20:	4b57      	ldr	r3, [pc, #348]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	4a56      	ldr	r2, [pc, #344]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d38:	4b51      	ldr	r3, [pc, #324]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	f023 0203 	bic.w	r2, r3, #3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	494e      	ldr	r1, [pc, #312]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d56:	4b4a      	ldr	r3, [pc, #296]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	f023 0210 	bic.w	r2, r3, #16
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	4947      	ldr	r1, [pc, #284]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d74:	4b42      	ldr	r3, [pc, #264]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	493f      	ldr	r1, [pc, #252]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d008      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d92:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f023 0220 	bic.w	r2, r3, #32
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	4938      	ldr	r1, [pc, #224]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003db0:	4b33      	ldr	r3, [pc, #204]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	4930      	ldr	r1, [pc, #192]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dce:	4b2c      	ldr	r3, [pc, #176]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	4929      	ldr	r1, [pc, #164]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003dec:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	4921      	ldr	r1, [pc, #132]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d008      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e0a:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	491a      	ldr	r1, [pc, #104]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003e28:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	4912      	ldr	r1, [pc, #72]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003e46:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	490b      	ldr	r1, [pc, #44]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	4903      	ldr	r1, [pc, #12]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3748      	adds	r7, #72	; 0x48
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000

08003e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e049      	b.n	8003f2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fc fd34 	bl	8000918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f000 f8fe 	bl	80040c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_TIM_ConfigClockSource+0x1c>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e0b6      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x18a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f78:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f8a:	d03e      	beq.n	800400a <HAL_TIM_ConfigClockSource+0xd8>
 8003f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f90:	f200 8087 	bhi.w	80040a2 <HAL_TIM_ConfigClockSource+0x170>
 8003f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f98:	f000 8086 	beq.w	80040a8 <HAL_TIM_ConfigClockSource+0x176>
 8003f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa0:	d87f      	bhi.n	80040a2 <HAL_TIM_ConfigClockSource+0x170>
 8003fa2:	2b70      	cmp	r3, #112	; 0x70
 8003fa4:	d01a      	beq.n	8003fdc <HAL_TIM_ConfigClockSource+0xaa>
 8003fa6:	2b70      	cmp	r3, #112	; 0x70
 8003fa8:	d87b      	bhi.n	80040a2 <HAL_TIM_ConfigClockSource+0x170>
 8003faa:	2b60      	cmp	r3, #96	; 0x60
 8003fac:	d050      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0x11e>
 8003fae:	2b60      	cmp	r3, #96	; 0x60
 8003fb0:	d877      	bhi.n	80040a2 <HAL_TIM_ConfigClockSource+0x170>
 8003fb2:	2b50      	cmp	r3, #80	; 0x50
 8003fb4:	d03c      	beq.n	8004030 <HAL_TIM_ConfigClockSource+0xfe>
 8003fb6:	2b50      	cmp	r3, #80	; 0x50
 8003fb8:	d873      	bhi.n	80040a2 <HAL_TIM_ConfigClockSource+0x170>
 8003fba:	2b40      	cmp	r3, #64	; 0x40
 8003fbc:	d058      	beq.n	8004070 <HAL_TIM_ConfigClockSource+0x13e>
 8003fbe:	2b40      	cmp	r3, #64	; 0x40
 8003fc0:	d86f      	bhi.n	80040a2 <HAL_TIM_ConfigClockSource+0x170>
 8003fc2:	2b30      	cmp	r3, #48	; 0x30
 8003fc4:	d064      	beq.n	8004090 <HAL_TIM_ConfigClockSource+0x15e>
 8003fc6:	2b30      	cmp	r3, #48	; 0x30
 8003fc8:	d86b      	bhi.n	80040a2 <HAL_TIM_ConfigClockSource+0x170>
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d060      	beq.n	8004090 <HAL_TIM_ConfigClockSource+0x15e>
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d867      	bhi.n	80040a2 <HAL_TIM_ConfigClockSource+0x170>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d05c      	beq.n	8004090 <HAL_TIM_ConfigClockSource+0x15e>
 8003fd6:	2b10      	cmp	r3, #16
 8003fd8:	d05a      	beq.n	8004090 <HAL_TIM_ConfigClockSource+0x15e>
 8003fda:	e062      	b.n	80040a2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	6899      	ldr	r1, [r3, #8]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f000 f952 	bl	8004294 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ffe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	609a      	str	r2, [r3, #8]
      break;
 8004008:	e04f      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6899      	ldr	r1, [r3, #8]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f000 f93b 	bl	8004294 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800402c:	609a      	str	r2, [r3, #8]
      break;
 800402e:	e03c      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	461a      	mov	r2, r3
 800403e:	f000 f8af 	bl	80041a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2150      	movs	r1, #80	; 0x50
 8004048:	4618      	mov	r0, r3
 800404a:	f000 f908 	bl	800425e <TIM_ITRx_SetConfig>
      break;
 800404e:	e02c      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	6859      	ldr	r1, [r3, #4]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	461a      	mov	r2, r3
 800405e:	f000 f8ce 	bl	80041fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2160      	movs	r1, #96	; 0x60
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f8f8 	bl	800425e <TIM_ITRx_SetConfig>
      break;
 800406e:	e01c      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	461a      	mov	r2, r3
 800407e:	f000 f88f 	bl	80041a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2140      	movs	r1, #64	; 0x40
 8004088:	4618      	mov	r0, r3
 800408a:	f000 f8e8 	bl	800425e <TIM_ITRx_SetConfig>
      break;
 800408e:	e00c      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f000 f8df 	bl	800425e <TIM_ITRx_SetConfig>
      break;
 80040a0:	e003      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	73fb      	strb	r3, [r7, #15]
      break;
 80040a6:	e000      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x178>
      break;
 80040a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a2e      	ldr	r2, [pc, #184]	; (8004190 <TIM_Base_SetConfig+0xcc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d003      	beq.n	80040e4 <TIM_Base_SetConfig+0x20>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e2:	d108      	bne.n	80040f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a25      	ldr	r2, [pc, #148]	; (8004190 <TIM_Base_SetConfig+0xcc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00f      	beq.n	800411e <TIM_Base_SetConfig+0x5a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004104:	d00b      	beq.n	800411e <TIM_Base_SetConfig+0x5a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a22      	ldr	r2, [pc, #136]	; (8004194 <TIM_Base_SetConfig+0xd0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d007      	beq.n	800411e <TIM_Base_SetConfig+0x5a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a21      	ldr	r2, [pc, #132]	; (8004198 <TIM_Base_SetConfig+0xd4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d003      	beq.n	800411e <TIM_Base_SetConfig+0x5a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a20      	ldr	r2, [pc, #128]	; (800419c <TIM_Base_SetConfig+0xd8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d108      	bne.n	8004130 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a0e      	ldr	r2, [pc, #56]	; (8004190 <TIM_Base_SetConfig+0xcc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00b      	beq.n	8004174 <TIM_Base_SetConfig+0xb0>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a0d      	ldr	r2, [pc, #52]	; (8004194 <TIM_Base_SetConfig+0xd0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d007      	beq.n	8004174 <TIM_Base_SetConfig+0xb0>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a0c      	ldr	r2, [pc, #48]	; (8004198 <TIM_Base_SetConfig+0xd4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d003      	beq.n	8004174 <TIM_Base_SetConfig+0xb0>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a0b      	ldr	r2, [pc, #44]	; (800419c <TIM_Base_SetConfig+0xd8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d103      	bne.n	800417c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	615a      	str	r2, [r3, #20]
}
 8004182:	bf00      	nop
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40012c00 	.word	0x40012c00
 8004194:	40014000 	.word	0x40014000
 8004198:	40014400 	.word	0x40014400
 800419c:	40014800 	.word	0x40014800

080041a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f023 0201 	bic.w	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f023 030a 	bic.w	r3, r3, #10
 80041dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	621a      	str	r2, [r3, #32]
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041fe:	b480      	push	{r7}
 8004200:	b087      	sub	sp, #28
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f023 0210 	bic.w	r2, r3, #16
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004228:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	031b      	lsls	r3, r3, #12
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800423a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	621a      	str	r2, [r3, #32]
}
 8004252:	bf00      	nop
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800425e:	b480      	push	{r7}
 8004260:	b085      	sub	sp, #20
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004274:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	f043 0307 	orr.w	r3, r3, #7
 8004280:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	609a      	str	r2, [r3, #8]
}
 8004288:	bf00      	nop
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	021a      	lsls	r2, r3, #8
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	609a      	str	r2, [r3, #8]
}
 80042c8:	bf00      	nop
 80042ca:	371c      	adds	r7, #28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e04f      	b.n	800438c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a21      	ldr	r2, [pc, #132]	; (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d108      	bne.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800431c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a14      	ldr	r2, [pc, #80]	; (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d009      	beq.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004354:	d004      	beq.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a10      	ldr	r2, [pc, #64]	; (800439c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d10c      	bne.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004366:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	4313      	orrs	r3, r2
 8004370:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40014000 	.word	0x40014000

080043a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e040      	b.n	8004434 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fc fac6 	bl	8000954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2224      	movs	r2, #36	; 0x24
 80043cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0201 	bic.w	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f8b6 	bl	8004550 <UART_SetConfig>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e022      	b.n	8004434 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f9e0 	bl	80047bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800440a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800441a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0201 	orr.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fa67 	bl	8004900 <UART_CheckIdleState>
 8004432:	4603      	mov	r3, r0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08a      	sub	sp, #40	; 0x28
 8004440:	af02      	add	r7, sp, #8
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	4613      	mov	r3, r2
 800444a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004450:	2b20      	cmp	r3, #32
 8004452:	d178      	bne.n	8004546 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <HAL_UART_Transmit+0x24>
 800445a:	88fb      	ldrh	r3, [r7, #6]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e071      	b.n	8004548 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2221      	movs	r2, #33	; 0x21
 8004470:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004472:	f7fc fb85 	bl	8000b80 <HAL_GetTick>
 8004476:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	88fa      	ldrh	r2, [r7, #6]
 800447c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004490:	d108      	bne.n	80044a4 <HAL_UART_Transmit+0x68>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d104      	bne.n	80044a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	e003      	b.n	80044ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044ac:	e030      	b.n	8004510 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2200      	movs	r2, #0
 80044b6:	2180      	movs	r1, #128	; 0x80
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 fac9 	bl	8004a50 <UART_WaitOnFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d004      	beq.n	80044ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e03c      	b.n	8004548 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10b      	bne.n	80044ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	881a      	ldrh	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044e0:	b292      	uxth	r2, r2
 80044e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	3302      	adds	r3, #2
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	e008      	b.n	80044fe <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	781a      	ldrb	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	b292      	uxth	r2, r2
 80044f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	3301      	adds	r3, #1
 80044fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1c8      	bne.n	80044ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2200      	movs	r2, #0
 8004524:	2140      	movs	r1, #64	; 0x40
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fa92 	bl	8004a50 <UART_WaitOnFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d004      	beq.n	800453c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2220      	movs	r2, #32
 8004536:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e005      	b.n	8004548 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	e000      	b.n	8004548 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004546:	2302      	movs	r3, #2
  }
}
 8004548:	4618      	mov	r0, r3
 800454a:	3720      	adds	r7, #32
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4b8a      	ldr	r3, [pc, #552]	; (80047a4 <UART_SetConfig+0x254>)
 800457c:	4013      	ands	r3, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6812      	ldr	r2, [r2, #0]
 8004582:	6979      	ldr	r1, [r7, #20]
 8004584:	430b      	orrs	r3, r1
 8004586:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	430a      	orrs	r2, r1
 80045c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a78      	ldr	r2, [pc, #480]	; (80047a8 <UART_SetConfig+0x258>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d120      	bne.n	800460e <UART_SetConfig+0xbe>
 80045cc:	4b77      	ldr	r3, [pc, #476]	; (80047ac <UART_SetConfig+0x25c>)
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	f003 0303 	and.w	r3, r3, #3
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d817      	bhi.n	8004608 <UART_SetConfig+0xb8>
 80045d8:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <UART_SetConfig+0x90>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	080045f1 	.word	0x080045f1
 80045e4:	080045fd 	.word	0x080045fd
 80045e8:	08004603 	.word	0x08004603
 80045ec:	080045f7 	.word	0x080045f7
 80045f0:	2300      	movs	r3, #0
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e01d      	b.n	8004632 <UART_SetConfig+0xe2>
 80045f6:	2302      	movs	r3, #2
 80045f8:	77fb      	strb	r3, [r7, #31]
 80045fa:	e01a      	b.n	8004632 <UART_SetConfig+0xe2>
 80045fc:	2304      	movs	r3, #4
 80045fe:	77fb      	strb	r3, [r7, #31]
 8004600:	e017      	b.n	8004632 <UART_SetConfig+0xe2>
 8004602:	2308      	movs	r3, #8
 8004604:	77fb      	strb	r3, [r7, #31]
 8004606:	e014      	b.n	8004632 <UART_SetConfig+0xe2>
 8004608:	2310      	movs	r3, #16
 800460a:	77fb      	strb	r3, [r7, #31]
 800460c:	e011      	b.n	8004632 <UART_SetConfig+0xe2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a67      	ldr	r2, [pc, #412]	; (80047b0 <UART_SetConfig+0x260>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d102      	bne.n	800461e <UART_SetConfig+0xce>
 8004618:	2300      	movs	r3, #0
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	e009      	b.n	8004632 <UART_SetConfig+0xe2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a64      	ldr	r2, [pc, #400]	; (80047b4 <UART_SetConfig+0x264>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d102      	bne.n	800462e <UART_SetConfig+0xde>
 8004628:	2300      	movs	r3, #0
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e001      	b.n	8004632 <UART_SetConfig+0xe2>
 800462e:	2310      	movs	r3, #16
 8004630:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800463a:	d15a      	bne.n	80046f2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800463c:	7ffb      	ldrb	r3, [r7, #31]
 800463e:	2b08      	cmp	r3, #8
 8004640:	d827      	bhi.n	8004692 <UART_SetConfig+0x142>
 8004642:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <UART_SetConfig+0xf8>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	0800466d 	.word	0x0800466d
 800464c:	08004675 	.word	0x08004675
 8004650:	0800467d 	.word	0x0800467d
 8004654:	08004693 	.word	0x08004693
 8004658:	08004683 	.word	0x08004683
 800465c:	08004693 	.word	0x08004693
 8004660:	08004693 	.word	0x08004693
 8004664:	08004693 	.word	0x08004693
 8004668:	0800468b 	.word	0x0800468b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800466c:	f7ff fa34 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8004670:	61b8      	str	r0, [r7, #24]
        break;
 8004672:	e013      	b.n	800469c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004674:	f7ff fa52 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 8004678:	61b8      	str	r0, [r7, #24]
        break;
 800467a:	e00f      	b.n	800469c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800467c:	4b4e      	ldr	r3, [pc, #312]	; (80047b8 <UART_SetConfig+0x268>)
 800467e:	61bb      	str	r3, [r7, #24]
        break;
 8004680:	e00c      	b.n	800469c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004682:	f7ff f9b3 	bl	80039ec <HAL_RCC_GetSysClockFreq>
 8004686:	61b8      	str	r0, [r7, #24]
        break;
 8004688:	e008      	b.n	800469c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800468a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800468e:	61bb      	str	r3, [r7, #24]
        break;
 8004690:	e004      	b.n	800469c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	77bb      	strb	r3, [r7, #30]
        break;
 800469a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d074      	beq.n	800478c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	005a      	lsls	r2, r3, #1
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	085b      	lsrs	r3, r3, #1
 80046ac:	441a      	add	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b0f      	cmp	r3, #15
 80046bc:	d916      	bls.n	80046ec <UART_SetConfig+0x19c>
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c4:	d212      	bcs.n	80046ec <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f023 030f 	bic.w	r3, r3, #15
 80046ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	085b      	lsrs	r3, r3, #1
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	b29a      	uxth	r2, r3
 80046dc:	89fb      	ldrh	r3, [r7, #14]
 80046de:	4313      	orrs	r3, r2
 80046e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	89fa      	ldrh	r2, [r7, #14]
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	e04f      	b.n	800478c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	77bb      	strb	r3, [r7, #30]
 80046f0:	e04c      	b.n	800478c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046f2:	7ffb      	ldrb	r3, [r7, #31]
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d828      	bhi.n	800474a <UART_SetConfig+0x1fa>
 80046f8:	a201      	add	r2, pc, #4	; (adr r2, 8004700 <UART_SetConfig+0x1b0>)
 80046fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fe:	bf00      	nop
 8004700:	08004725 	.word	0x08004725
 8004704:	0800472d 	.word	0x0800472d
 8004708:	08004735 	.word	0x08004735
 800470c:	0800474b 	.word	0x0800474b
 8004710:	0800473b 	.word	0x0800473b
 8004714:	0800474b 	.word	0x0800474b
 8004718:	0800474b 	.word	0x0800474b
 800471c:	0800474b 	.word	0x0800474b
 8004720:	08004743 	.word	0x08004743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004724:	f7ff f9d8 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8004728:	61b8      	str	r0, [r7, #24]
        break;
 800472a:	e013      	b.n	8004754 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800472c:	f7ff f9f6 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 8004730:	61b8      	str	r0, [r7, #24]
        break;
 8004732:	e00f      	b.n	8004754 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004734:	4b20      	ldr	r3, [pc, #128]	; (80047b8 <UART_SetConfig+0x268>)
 8004736:	61bb      	str	r3, [r7, #24]
        break;
 8004738:	e00c      	b.n	8004754 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800473a:	f7ff f957 	bl	80039ec <HAL_RCC_GetSysClockFreq>
 800473e:	61b8      	str	r0, [r7, #24]
        break;
 8004740:	e008      	b.n	8004754 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004746:	61bb      	str	r3, [r7, #24]
        break;
 8004748:	e004      	b.n	8004754 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	77bb      	strb	r3, [r7, #30]
        break;
 8004752:	bf00      	nop
    }

    if (pclk != 0U)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d018      	beq.n	800478c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	085a      	lsrs	r2, r3, #1
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	441a      	add	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b0f      	cmp	r3, #15
 8004772:	d909      	bls.n	8004788 <UART_SetConfig+0x238>
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477a:	d205      	bcs.n	8004788 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	b29a      	uxth	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60da      	str	r2, [r3, #12]
 8004786:	e001      	b.n	800478c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004798:	7fbb      	ldrb	r3, [r7, #30]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3720      	adds	r7, #32
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	efff69f3 	.word	0xefff69f3
 80047a8:	40013800 	.word	0x40013800
 80047ac:	40021000 	.word	0x40021000
 80047b0:	40004400 	.word	0x40004400
 80047b4:	40004800 	.word	0x40004800
 80047b8:	007a1200 	.word	0x007a1200

080047bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01a      	beq.n	80048d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ba:	d10a      	bne.n	80048d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	605a      	str	r2, [r3, #4]
  }
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b098      	sub	sp, #96	; 0x60
 8004904:	af02      	add	r7, sp, #8
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004910:	f7fc f936 	bl	8000b80 <HAL_GetTick>
 8004914:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b08      	cmp	r3, #8
 8004922:	d12e      	bne.n	8004982 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004924:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800492c:	2200      	movs	r2, #0
 800492e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f88c 	bl	8004a50 <UART_WaitOnFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d021      	beq.n	8004982 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800494c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004952:	653b      	str	r3, [r7, #80]	; 0x50
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800495c:	647b      	str	r3, [r7, #68]	; 0x44
 800495e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004962:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800496a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e6      	bne.n	800493e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e062      	b.n	8004a48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b04      	cmp	r3, #4
 800498e:	d149      	bne.n	8004a24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004998:	2200      	movs	r2, #0
 800499a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f856 	bl	8004a50 <UART_WaitOnFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d03c      	beq.n	8004a24 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	623b      	str	r3, [r7, #32]
   return(result);
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c8:	633b      	str	r3, [r7, #48]	; 0x30
 80049ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e6      	bne.n	80049aa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3308      	adds	r3, #8
 80049e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3308      	adds	r3, #8
 80049fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049fc:	61fa      	str	r2, [r7, #28]
 80049fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	69b9      	ldr	r1, [r7, #24]
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	617b      	str	r3, [r7, #20]
   return(result);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e5      	bne.n	80049dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e011      	b.n	8004a48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3758      	adds	r7, #88	; 0x58
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a60:	e049      	b.n	8004af6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a68:	d045      	beq.n	8004af6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6a:	f7fc f889 	bl	8000b80 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d302      	bcc.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e048      	b.n	8004b16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d031      	beq.n	8004af6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d110      	bne.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2208      	movs	r2, #8
 8004aa6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 f838 	bl	8004b1e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e029      	b.n	8004b16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad0:	d111      	bne.n	8004af6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f81e 	bl	8004b1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e00f      	b.n	8004b16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4013      	ands	r3, r2
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	bf0c      	ite	eq
 8004b06:	2301      	moveq	r3, #1
 8004b08:	2300      	movne	r3, #0
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d0a6      	beq.n	8004a62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b095      	sub	sp, #84	; 0x54
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	461a      	mov	r2, r3
 8004b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b44:	643b      	str	r3, [r7, #64]	; 0x40
 8004b46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b4c:	e841 2300 	strex	r3, r2, [r1]
 8004b50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e6      	bne.n	8004b26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	e853 3f00 	ldrex	r3, [r3]
 8004b66:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3308      	adds	r3, #8
 8004b76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b80:	e841 2300 	strex	r3, r2, [r1]
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e5      	bne.n	8004b58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d118      	bne.n	8004bc6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f023 0310 	bic.w	r3, r3, #16
 8004ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb2:	61bb      	str	r3, [r7, #24]
 8004bb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	6979      	ldr	r1, [r7, #20]
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e6      	bne.n	8004b94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004bda:	bf00      	nop
 8004bdc:	3754      	adds	r7, #84	; 0x54
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <__libc_init_array>:
 8004be8:	b570      	push	{r4, r5, r6, lr}
 8004bea:	4d0d      	ldr	r5, [pc, #52]	; (8004c20 <__libc_init_array+0x38>)
 8004bec:	4c0d      	ldr	r4, [pc, #52]	; (8004c24 <__libc_init_array+0x3c>)
 8004bee:	1b64      	subs	r4, r4, r5
 8004bf0:	10a4      	asrs	r4, r4, #2
 8004bf2:	2600      	movs	r6, #0
 8004bf4:	42a6      	cmp	r6, r4
 8004bf6:	d109      	bne.n	8004c0c <__libc_init_array+0x24>
 8004bf8:	4d0b      	ldr	r5, [pc, #44]	; (8004c28 <__libc_init_array+0x40>)
 8004bfa:	4c0c      	ldr	r4, [pc, #48]	; (8004c2c <__libc_init_array+0x44>)
 8004bfc:	f000 f820 	bl	8004c40 <_init>
 8004c00:	1b64      	subs	r4, r4, r5
 8004c02:	10a4      	asrs	r4, r4, #2
 8004c04:	2600      	movs	r6, #0
 8004c06:	42a6      	cmp	r6, r4
 8004c08:	d105      	bne.n	8004c16 <__libc_init_array+0x2e>
 8004c0a:	bd70      	pop	{r4, r5, r6, pc}
 8004c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c10:	4798      	blx	r3
 8004c12:	3601      	adds	r6, #1
 8004c14:	e7ee      	b.n	8004bf4 <__libc_init_array+0xc>
 8004c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c1a:	4798      	blx	r3
 8004c1c:	3601      	adds	r6, #1
 8004c1e:	e7f2      	b.n	8004c06 <__libc_init_array+0x1e>
 8004c20:	08004cb8 	.word	0x08004cb8
 8004c24:	08004cb8 	.word	0x08004cb8
 8004c28:	08004cb8 	.word	0x08004cb8
 8004c2c:	08004cbc 	.word	0x08004cbc

08004c30 <memset>:
 8004c30:	4402      	add	r2, r0
 8004c32:	4603      	mov	r3, r0
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d100      	bne.n	8004c3a <memset+0xa>
 8004c38:	4770      	bx	lr
 8004c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c3e:	e7f9      	b.n	8004c34 <memset+0x4>

08004c40 <_init>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	bf00      	nop
 8004c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c46:	bc08      	pop	{r3}
 8004c48:	469e      	mov	lr, r3
 8004c4a:	4770      	bx	lr

08004c4c <_fini>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	bf00      	nop
 8004c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c52:	bc08      	pop	{r3}
 8004c54:	469e      	mov	lr, r3
 8004c56:	4770      	bx	lr
