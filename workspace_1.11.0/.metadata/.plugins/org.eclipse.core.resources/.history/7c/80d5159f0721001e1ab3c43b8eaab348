/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac_ch1;

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */



/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_DAC_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


uint32_t audiosignal2;
int count;
uint32_t audiostack[]={126,125,125,123,121,119,117,116,115,114,114,113,114,114,115,116,116,116,116,116,
		114,114,113,113,114,115,118,122,125,129,134,138,142,143,144,144,143,140,136,132,
		128,127,128,128,130,134,139,145,150,154,158,162,166,169,169,167,165,160,155,149,
		145,143,142,144,146,148,148,148,146,142,139,133,131,128,128,128,128,128,129,131,
		133,138,142,146,149,151,152,153,152,151,152,151,151,148,148,146,146,148,148,149,
		148,148,147,146,144,140,135,131,129,126,122,118,115,114,115,117,116,116,116,116,
		114,112,109,106,104,102,101,102,104,108,111,114,117,121,124,124,126,125,124,123,
		123,122,124,126,128,129,130,132,132,135,136,139,141,143,145,143,141,138,135,133,
		130,129,128,129,130,131,133,134,136,136,135,133,129,124,120,116,113,110,107,107,
		108,111,113,115,118,122,126,130,133,134,136,137,138,139,140,140,142,144,145,146,
		147,147,145,145,142,139,137,132,130,129,131,134,138,142,147,151,152,153,151,150,
		147,144,140,135,130,125,121,118,115,113,110,109,107,105,103,101,101,101,103,104,
		106,108,112,115,118,121,125,129,132,136,136,136,135,132,130,125,121,117,114,113,
		112,112,112,113,114,115,117,116,116,115,111,108,103,100,95,92,90,88,87,88,
		90,92,94,96,96,95,95,95,95,97,99,103,107,111,115,120,123,126,128,129,
		130,129,127,125,123,120,116,112,106,104,105,106,110,114,120,124,128,130,130,128,
		125,122,119,116,114,114,114,115,117,119,122,125,128,129,129,127,122,115,110,104,
		100,96,95,99,103,110,118,126,135,143,150,153,155,155,152,151,150,146,144,143,
		142,144,146,151,156,160,163,164,163,160,157,154,153,151,148,147,147,148,150,153,
		157,160,163,162,160,156,150,144,139,135,132,130,130,132,136,141,146,150,154,157,
		159,158,155,151,146,141,137,135,134,134,136,139,142,148,153,159,163,163,162,159,
		155,150,145,140,134,131,129,128,129,130,131,130,129,129,126,124,120,117,114,111,
		107,105,104,105,106,107,108,111,115,119,124,127,129,130,129,128,127,127,126,128,
		130,135,142,147,151,156,157,159,159,155,152,146,143,138,137,135,134,134,134,137,
		137,138,136,134,131,128,125,124,121,119,119,120,122,124,128,131,134,137,138,137,
		137,135,132,128,124,123,122,123,125,129,133,136,139,140,141,139,136,132,127,122,
		119,116,114,116,118,122,128,135,144,151,158,162,164,164,161,157,147,138,128,121,
		116,112,110,109,110,113,116,120,122,122,121,116,111,105,100,96,94,93,93,97,
		102,110,117,123,128,131,131,131,127,123,118,113,109,105,102,100,101,103,103,103,
		103,103,101,99,97,93,90,87,84,83,84,85,90,94,99,104,108,112,114,115,
		116,116,114,109,104,101,96,94,92,92,93,97,104,110,118,122,125,126,126,125,
		122,119,116,114,113,113,115,118,121,124,128,129,131,132,131,129,127,125,121,118,
		114,113,112,114,117,120,124,126,127,128,126,123,120,118,115,113,110,109,109,112,
		116,120,127,134,140,145,149,151,152,149,146,139,135,130,127,128,127,129,133,139,
		146,151,156,160,163,166,164,162,162,162,163,163,162,163,163,166,169,170,171,169,
		166,161,156,152,149,146,145,144,142,142,142,144,144,144,144,144,143,142,141,139,
		137,136,134,132,131,132,133,136,138,139,141,142,143,143,142,141,141,141,139,139,
		139,138,137,135,135,135,135,134,135,134,133,132,129,125,119,115,111,109,106,106,
		104,103,104,103,102,101,100,100,101,104,106,110,114,117,119,123,128,133,138,142,
		145,148,149,150,150,147,143,138,133,130,125,122,119,117,117,116,119,122,126,130,
		134,137,139,142,145,147,147,148,146,145,142,140,137,137,136,135,134,133,133,132,
		131,129,129,129,128,127,126,126,127,129,130,130,130,129,129,128,127,127,126,130,
		133,137,142,147,152,157,161,164,166,165,164,159,150,141,131,123,117,112,108,107,
		106,106,108,110,113,115,116,116,116,116,115,114,113,115,117,119,121,121,123,124,
		124,124,123,123,122,120,118,115,111,109,107,105,102,99,98,97,100,101,104,105,
		108,112,115,117,117,118,118,117,116,116,115,115,112,110,107,105,105,104,104,103,
		102,100,99,97,97,98,98,100,101,101,102,104,106,107,109,111,114,116,118,121,
		124,127,129,130,132,131,132,132,133,133,131,131,129,127,125,121,119,118,116,115,
		115,114,114,115,116,116,116,114,114,112,111,112,112,113,115,116,117,118,120,121,
		123,121,121,120,119,121,121,124,127,130,132,133,133,131,131,131,130,130,132,132,
		134,136,137,140,142,145,148,153,156,159,162,164,167,165,162,158,154,150,147,143,
		139,136,134,134,132,132,130,128,126,126,124,123,124,125,127,128,130,133,135,139,
		142,143,145,146,147,148,150,152,153,155,156,155,153,148,142,136,130,124,120,117,
		118,119,120,122,125,125,128,128,128,127,126,127,126,128,126,127,126,124,124,122,
		124,123,123,123,122,123,123,123,122,122,121,120,119,119,119,120,120,122,125,128,
		132,136,139,143,146,150,152,157,159,160,160,159,161,159,158,156,156,153,151,151,
		146,144,141,137,136,134,134,132,131,129,129,129,129,131,133,134,136,137,138,140,
		142,146,148,150,152,155,157,160,162,159,158,153,151,147,143,141,137,134,130,126,
		123,121,122,124,126,130,131,135,139,141,145,148,150,152,151,149,145,140,134,129,
		122,117,114,111,110,109,108,106,105,105,104,103,101,99,97,94,91,90,91,92,
		96,99,104,110,115,121,126,131,135,138,139,138,136,133,131,126,122,117,112,106,
		102,98,95,91,90,89,89,90,88,89,90,92,95,97,101,103,106,107,107,111,
		114,116,118,118,119,119,118,116,111,107,102,100,99,100,101,102,104,107,110,111,
		114,114,116,117,116,117,118,121,125,128,129,129,129,128,127,127,125,126,127,129,
		131,133,135,136,137,136,134,129,125,121,116,110,105,100,94,91,88,88,88,90,
		94,100,106,113,122,130,140,148,156,159,161,162,162,161,160,161,160,162,161,159,
		157,155,152,148,143,137,132,128,127,128,129,133,138,143,149,156,161,166,173,175,
		177,176,171,167,161,155,151,148,145,145,146,148,151,152,152,150,148,145,143,139,
		136,133,131,128,126,127,127,130,135,138,140,143,145,147,149,149,149,148,148,147,
		146,143,140,138,136,134,131,127,122,118,112,107,102,98,96,95,95,96,100,103,
		107,112,115,117,119,120,121,120,120,119,121,123,125,128,131,135,140,145,150,152,
		156,157,156,154,150,144,135,127,121,117,113,110,111,112,115,120,124,129,135,143,
		149,154,157,157,157,156,152,147,141,134,130,126,123,121,120,122,121,122,120,117,
		116,114,114,115,116,118,121,124,128,131,133,137,138,142,144,148,149,149,151,150,
		150,150,149,148,148,147,146,147,145,145,144,142,138,133,125,118,113,106,102,97,
		94,94,94,97,100,103,108,114,119,119,120,121,125,127,128,128,128,127,125,122,
		118,113,109,107,105,102,101,101,101,103,104,105,107,108,108,108,109,110,110,111,
		111,112,114,114,119,123,127,128,129,129,127,128,126,126,123,118,113,108,104,99,
		94,91,93,93,93,93,94,95,98,102,106,109,112,116,120,121,120,120,120,121,
		121,120,119,118,118,118,117,117,118,121,123,124,125,125,123,122,121,119,117,115,
		113,112,110,108,107,106,106,106,106,108,111,113,117,120,123,125,127,128,130,130,
		129,128,125,125,123,121,120,120,123,127,130,131,134,137,141,144,146,148,148,148,
		148,148,146,143,140,137,137,136,137,138,142,146,147,150,150,150,150,150,151,152,
		151,149,148,146,143,143,144,145,147,148,147,143,138,134,129,128,127,127,129,133,
		141,146,152,158,162,165,167,165,162,158,151,146,141,134,130,125,123,123,123,123,
		124,126,128,130,129,127,126,126,124,120,117,114,113,112,112,112,112,112,114,115,
		115,116,116,116,117,116,115,116,117,120,122,125,128,130,134,137,140,143,143,145,
		145,143,143,142,142,142,145,146,144,144,144,146,150,151,152,152,152,152,150,147,
		143,142,139,139,139,139,139,141,144,146,146,143,142,139,140,139,141,143,144,145,
		144,145,143,141,141,139,137,134,132,132,133,134,135,136,137,137,136,136,136,137,
		138,141,143,149,149,149,149,148,145,140,135,129,126,123,121,118,116,116,117,119,
		120,119,118,118,120,119,117,116,114,115,121,113,103,104,106,105,102,103,103,106,
		109,108,108,108,107,107,106,106,106,104,101,98,95,91,86,83,82,82,84,84,
		86,87,92,96,101,104,106,108,109,110,111,114,114,115,114,113,112,110,108,107,
		108,110,111,114,119,124,129,134,136,138,135,132,126,119,113,107,105,101,97,96,
		95,99,102,106,110,114,117,120,122,124,127,127,128,126,123,120,116,111,107,101,
		95,89,84,80,78,76,75,75,77,80,83,87,92,96,101,107,112,116,118,120,
		120,120,121,120,122,123,126,131,134,137,140,145,148,153,154,157,159,161,162,161,
		162,161,159,159,157,158,158,159,163,165,168,169,170,171,171,171,171,174,176,176,
		176,174,174,174,173,172,169,167,166,166,166,167,168,169,171,171,170,170,169,166,
		164,161,160,158,157,154,152,151,152,151,147,144,141,139,138,137,133,132,132,133,
		132,129,127,123,120,118,114,109,106,105,102,101,96,92,90,90,91,92,94,97,
		101,104,106,108,110,112,113,115,116,117,119,119,119,118,118,117,117,118,119,120,
		121,123,125,126,128,133,137,141,144,147,150,153,156,157,158,158,157,156,155,156,
		158,161,163,163,165,165,164,162,157,155,152,150,147,144,144,144,144,142,143,144,
		145,148,149,151,153,154,157,158,159,159,157,155,150,144,138,133,128,122,119,114,
		111,109,106,103,99,96,93,90,90,89,90,92,92,93,94,96,98,99,99,100,
		99,99,98,97,95,94,91,89,90,88,89,90,93,96,99,101,101,103,103,105,
		};




/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_ADC1_Init();
  MX_DAC_Init();
  MX_TIM2_Init();
  MX_TIM6_Init();
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start(&htim2);




  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */






		  for(int i=0;i<3000;i++){
			  audiosignal2=audiostack[i]*1.5;
			  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, &audiosignal2, 1, DAC_ALIGN_12B_R);

		  }
		  HAL_Delay(100);
	  	  }
  }
  /* USER CODE END 3 */


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
  if (HAL_DAC_Init(&hdac) != HAL_OK)
  {
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 72-1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 20-1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 720-1;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 200-1;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 38400;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
