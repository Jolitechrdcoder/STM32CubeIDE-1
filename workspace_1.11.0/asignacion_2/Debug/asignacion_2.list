
asignacion_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006234  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080063bc  080063bc  000163bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d0  080064d0  00020408  2**0
                  CONTENTS
  4 .ARM          00000000  080064d0  080064d0  00020408  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064d0  080064d0  00020408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064d0  080064d0  000164d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064d4  080064d4  000164d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000408  20000000  080064d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000408  080068e0  00020408  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  080068e0  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020408  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013386  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002717  00000000  00000000  000337be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00035ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00036f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc5d  00000000  00000000  00037e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001546d  00000000  00000000  00053a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3832  00000000  00000000  00068efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c72c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004510  00000000  00000000  0010c77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000408 	.word	0x20000408
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080063a4 	.word	0x080063a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000040c 	.word	0x2000040c
 80001c4:	080063a4 	.word	0x080063a4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <Servo_GetCurrentAngle>:
#include "Servo.h"
#define SERVO_ANGLE_MIN 0
#define SERVO_ANGLE_MAX 180


static uint16_t Servo_GetCurrentAngle(Servo *servo) {
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
    uint32_t pulseWidth = __HAL_TIM_GET_COMPARE(servo->htim, servo->channel);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d104      	bne.n	80009be <Servo_GetCurrentAngle+0x1a>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009bc:	e027      	b.n	8000a0e <Servo_GetCurrentAngle+0x6a>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	d104      	bne.n	80009d0 <Servo_GetCurrentAngle+0x2c>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009ce:	e01e      	b.n	8000a0e <Servo_GetCurrentAngle+0x6a>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	2b08      	cmp	r3, #8
 80009d6:	d104      	bne.n	80009e2 <Servo_GetCurrentAngle+0x3e>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009e0:	e015      	b.n	8000a0e <Servo_GetCurrentAngle+0x6a>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2b0c      	cmp	r3, #12
 80009e8:	d104      	bne.n	80009f4 <Servo_GetCurrentAngle+0x50>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	e00c      	b.n	8000a0e <Servo_GetCurrentAngle+0x6a>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	2b10      	cmp	r3, #16
 80009fa:	d104      	bne.n	8000a06 <Servo_GetCurrentAngle+0x62>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a04:	e003      	b.n	8000a0e <Servo_GetCurrentAngle+0x6a>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a0e:	60fb      	str	r3, [r7, #12]
    uint16_t angle = (pulseWidth - 500) / 10;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000a16:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <Servo_GetCurrentAngle+0x8c>)
 8000a18:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	817b      	strh	r3, [r7, #10]
    return angle;
 8000a20:	897b      	ldrh	r3, [r7, #10]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	cccccccd 	.word	0xcccccccd

08000a34 <Servo_Init>:

void Servo_Init(Servo *servo, TIM_HandleTypeDef *htim, uint32_t channel) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
    servo->htim = htim;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	601a      	str	r2, [r3, #0]
    servo->channel = channel;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	605a      	str	r2, [r3, #4]
    HAL_TIM_PWM_Start(servo->htim, servo->channel);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	4619      	mov	r1, r3
 8000a56:	4610      	mov	r0, r2
 8000a58:	f004 f95a 	bl	8004d10 <HAL_TIM_PWM_Start>
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <Servo_SetAngle>:

void Servo_SetAngle(Servo *servo, uint16_t angle) {
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	807b      	strh	r3, [r7, #2]
    if (angle < SERVO_ANGLE_MIN) {
        angle = SERVO_ANGLE_MIN;
    } else if (angle > SERVO_ANGLE_MAX) {
 8000a70:	887b      	ldrh	r3, [r7, #2]
 8000a72:	2bb4      	cmp	r3, #180	; 0xb4
 8000a74:	d901      	bls.n	8000a7a <Servo_SetAngle+0x16>
        angle = SERVO_ANGLE_MAX;
 8000a76:	23b4      	movs	r3, #180	; 0xb4
 8000a78:	807b      	strh	r3, [r7, #2]
    }

    uint32_t pulseWidth = (uint32_t)(500 + angle * 10);
 8000a7a:	887a      	ldrh	r2, [r7, #2]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000a88:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulseWidth);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d105      	bne.n	8000a9e <Servo_SetAngle+0x3a>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a9c:	e02c      	b.n	8000af8 <Servo_SetAngle+0x94>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulseWidth);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d105      	bne.n	8000ab2 <Servo_SetAngle+0x4e>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000ab0:	e022      	b.n	8000af8 <Servo_SetAngle+0x94>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulseWidth);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2b08      	cmp	r3, #8
 8000ab8:	d105      	bne.n	8000ac6 <Servo_SetAngle+0x62>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000ac4:	e018      	b.n	8000af8 <Servo_SetAngle+0x94>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulseWidth);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	2b0c      	cmp	r3, #12
 8000acc:	d105      	bne.n	8000ada <Servo_SetAngle+0x76>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ad8:	e00e      	b.n	8000af8 <Servo_SetAngle+0x94>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulseWidth);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2b10      	cmp	r3, #16
 8000ae0:	d105      	bne.n	8000aee <Servo_SetAngle+0x8a>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000aec:	e004      	b.n	8000af8 <Servo_SetAngle+0x94>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulseWidth);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <Servo_MoveToAngle>:

void Servo_MoveToAngle(Servo *servo, uint16_t targetAngle, uint16_t timeMs) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]
 8000b10:	4613      	mov	r3, r2
 8000b12:	803b      	strh	r3, [r7, #0]
    uint16_t currentAngle = Servo_GetCurrentAngle(servo);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff45 	bl	80009a4 <Servo_GetCurrentAngle>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	82bb      	strh	r3, [r7, #20]
    int16_t angleDiff = targetAngle - currentAngle;
 8000b1e:	887a      	ldrh	r2, [r7, #2]
 8000b20:	8abb      	ldrh	r3, [r7, #20]
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	827b      	strh	r3, [r7, #18]
    uint16_t step = angleDiff > 0 ? 1 : -1;
 8000b28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	dd01      	ble.n	8000b34 <Servo_MoveToAngle+0x30>
 8000b30:	2301      	movs	r3, #1
 8000b32:	e001      	b.n	8000b38 <Servo_MoveToAngle+0x34>
 8000b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b38:	823b      	strh	r3, [r7, #16]
    uint16_t delay = timeMs / abs(angleDiff);
 8000b3a:	883b      	ldrh	r3, [r7, #0]
 8000b3c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000b40:	2a00      	cmp	r2, #0
 8000b42:	bfb8      	it	lt
 8000b44:	4252      	neglt	r2, r2
 8000b46:	b292      	uxth	r2, r2
 8000b48:	fb93 f3f2 	sdiv	r3, r3, r2
 8000b4c:	81fb      	strh	r3, [r7, #14]

    for (uint16_t angle = currentAngle; angle != targetAngle; angle += step) {
 8000b4e:	8abb      	ldrh	r3, [r7, #20]
 8000b50:	82fb      	strh	r3, [r7, #22]
 8000b52:	e00c      	b.n	8000b6e <Servo_MoveToAngle+0x6a>
        Servo_SetAngle(servo, angle);
 8000b54:	8afb      	ldrh	r3, [r7, #22]
 8000b56:	4619      	mov	r1, r3
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff83 	bl	8000a64 <Servo_SetAngle>
        HAL_Delay(delay);
 8000b5e:	89fb      	ldrh	r3, [r7, #14]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f001 fcf1 	bl	8002548 <HAL_Delay>
    for (uint16_t angle = currentAngle; angle != targetAngle; angle += step) {
 8000b66:	8afa      	ldrh	r2, [r7, #22]
 8000b68:	8a3b      	ldrh	r3, [r7, #16]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	82fb      	strh	r3, [r7, #22]
 8000b6e:	8afa      	ldrh	r2, [r7, #22]
 8000b70:	887b      	ldrh	r3, [r7, #2]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d1ee      	bne.n	8000b54 <Servo_MoveToAngle+0x50>
    }

    Servo_SetAngle(servo, targetAngle);
 8000b76:	887b      	ldrh	r3, [r7, #2]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff ff72 	bl	8000a64 <Servo_SetAngle>
}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <stepper_half_drive>:
#include "stm32f3xx_hal.h"
#include "StepMotor.h"

float anglePerSequence = 0.703125;
//funcion activacion de las bobinas stepper
void stepper_half_drive(int Paso) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b0a2      	sub	sp, #136	; 0x88
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
    const int pinValues[][4] = {
 8000b90:	4a22      	ldr	r2, [pc, #136]	; (8000c1c <stepper_half_drive+0x94>)
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	4611      	mov	r1, r2
 8000b98:	2280      	movs	r2, #128	; 0x80
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f005 fbec 	bl	8006378 <memcpy>
        {0, 0, 1, 1}, // Paso 5
        {0, 0, 0, 1}, // Paso 6
        {1, 0, 0, 1}  // Paso 7
    };

    if (Paso >= 0 && Paso < 8) {
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db35      	blt.n	8000c12 <stepper_half_drive+0x8a>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b07      	cmp	r3, #7
 8000baa:	dc32      	bgt.n	8000c12 <stepper_half_drive+0x8a>
        HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, pinValues[Paso][0]);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	011b      	lsls	r3, r3, #4
 8000bb0:	3388      	adds	r3, #136	; 0x88
 8000bb2:	443b      	add	r3, r7
 8000bb4:	3b80      	subs	r3, #128	; 0x80
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc4:	f001 ff54 	bl	8002a70 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, pinValues[Paso][1]);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	3388      	adds	r3, #136	; 0x88
 8000bce:	443b      	add	r3, r7
 8000bd0:	3b7c      	subs	r3, #124	; 0x7c
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	4811      	ldr	r0, [pc, #68]	; (8000c20 <stepper_half_drive+0x98>)
 8000bdc:	f001 ff48 	bl	8002a70 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, pinValues[Paso][2]);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	011b      	lsls	r3, r3, #4
 8000be4:	3388      	adds	r3, #136	; 0x88
 8000be6:	443b      	add	r3, r7
 8000be8:	3b78      	subs	r3, #120	; 0x78
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	461a      	mov	r2, r3
 8000bf0:	2140      	movs	r1, #64	; 0x40
 8000bf2:	480c      	ldr	r0, [pc, #48]	; (8000c24 <stepper_half_drive+0x9c>)
 8000bf4:	f001 ff3c 	bl	8002a70 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, pinValues[Paso][3]);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	3388      	adds	r3, #136	; 0x88
 8000bfe:	443b      	add	r3, r7
 8000c00:	3b74      	subs	r3, #116	; 0x74
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	461a      	mov	r2, r3
 8000c08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <stepper_half_drive+0x9c>)
 8000c0e:	f001 ff2f 	bl	8002a70 <HAL_GPIO_WritePin>
    }
}
 8000c12:	bf00      	nop
 8000c14:	3788      	adds	r7, #136	; 0x88
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	080063bc 	.word	0x080063bc
 8000c20:	48000800 	.word	0x48000800
 8000c24:	48000400 	.word	0x48000400

08000c28 <stepper_set_rpm>:

//funcion velocidad
void stepper_set_rpm (int rpm)  //rpm maximo 13 y minimo 5
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	delay(60000000/stepsperrev/rpm);
 8000c30:	f643 1238 	movw	r2, #14648	; 0x3938
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f938 	bl	8000eb0 <delay>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <stepper_step_angle>:



// funcion cambio de direccion
void stepper_step_angle(float angle, int direction, int rpm) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000c52:	60b8      	str	r0, [r7, #8]
 8000c54:	6079      	str	r1, [r7, #4]
    int numberOfSequences = (int)(angle / anglePerSequence);
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <stepper_step_angle+0x94>)
 8000c58:	ed93 7a00 	vldr	s14, [r3]
 8000c5c:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c68:	ee17 3a90 	vmov	r3, s15
 8000c6c:	61fb      	str	r3, [r7, #28]

    for (int seq = 0; seq < numberOfSequences; seq++) {
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
 8000c72:	e02a      	b.n	8000cca <stepper_step_angle+0x82>
        int startStep = (direction == 0) ? 7 : 0;
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <stepper_step_angle+0x36>
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	e000      	b.n	8000c80 <stepper_step_angle+0x38>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
        int endStep = (direction == 0) ? -1 : 8;
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <stepper_step_angle+0x46>
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	e000      	b.n	8000c90 <stepper_step_angle+0x48>
 8000c8e:	2308      	movs	r3, #8
 8000c90:	617b      	str	r3, [r7, #20]
        int stepIncrement = (direction == 0) ? -1 : 1;
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <stepper_step_angle+0x56>
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9c:	e000      	b.n	8000ca0 <stepper_step_angle+0x58>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	613b      	str	r3, [r7, #16]

        for (int step = startStep; step != endStep; step += stepIncrement) {
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	623b      	str	r3, [r7, #32]
 8000ca6:	e009      	b.n	8000cbc <stepper_step_angle+0x74>
            stepper_half_drive(step);
 8000ca8:	6a38      	ldr	r0, [r7, #32]
 8000caa:	f7ff ff6d 	bl	8000b88 <stepper_half_drive>
            stepper_set_rpm(rpm);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffba 	bl	8000c28 <stepper_set_rpm>
        for (int step = startStep; step != endStep; step += stepIncrement) {
 8000cb4:	6a3a      	ldr	r2, [r7, #32]
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	4413      	add	r3, r2
 8000cba:	623b      	str	r3, [r7, #32]
 8000cbc:	6a3a      	ldr	r2, [r7, #32]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d1f1      	bne.n	8000ca8 <stepper_step_angle+0x60>
    for (int seq = 0; seq < numberOfSequences; seq++) {
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	dbd0      	blt.n	8000c74 <stepper_step_angle+0x2c>
        }
    }
}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	3728      	adds	r7, #40	; 0x28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000000 	.word	0x20000000

08000ce0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af02      	add	r7, sp, #8
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f023 030f 	bic.w	r3, r3, #15
 8000cf0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	f043 030c 	orr.w	r3, r3, #12
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	f043 0308 	orr.w	r3, r3, #8
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000d0c:	7bbb      	ldrb	r3, [r7, #14]
 8000d0e:	f043 030c 	orr.w	r3, r3, #12
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000d16:	7bbb      	ldrb	r3, [r7, #14]
 8000d18:	f043 0308 	orr.w	r3, r3, #8
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d20:	f107 0208 	add.w	r2, r7, #8
 8000d24:	2364      	movs	r3, #100	; 0x64
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	2304      	movs	r3, #4
 8000d2a:	214e      	movs	r1, #78	; 0x4e
 8000d2c:	4803      	ldr	r0, [pc, #12]	; (8000d3c <lcd_send_cmd+0x5c>)
 8000d2e:	f001 ff47 	bl	8002bc0 <HAL_I2C_Master_Transmit>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000424 	.word	0x20000424

08000d40 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f023 030f 	bic.w	r3, r3, #15
 8000d50:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	011b      	lsls	r3, r3, #4
 8000d56:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	f043 030d 	orr.w	r3, r3, #13
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	f043 0309 	orr.w	r3, r3, #9
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000d6c:	7bbb      	ldrb	r3, [r7, #14]
 8000d6e:	f043 030d 	orr.w	r3, r3, #13
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000d76:	7bbb      	ldrb	r3, [r7, #14]
 8000d78:	f043 0309 	orr.w	r3, r3, #9
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d80:	f107 0208 	add.w	r2, r7, #8
 8000d84:	2364      	movs	r3, #100	; 0x64
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2304      	movs	r3, #4
 8000d8a:	214e      	movs	r1, #78	; 0x4e
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <lcd_send_data+0x5c>)
 8000d8e:	f001 ff17 	bl	8002bc0 <HAL_I2C_Master_Transmit>
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000424 	.word	0x20000424

08000da0 <lcd_clear>:
	lcd_put_cur(row,col);
	lcd_send_string(string);
}

void lcd_clear (void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000da6:	2080      	movs	r0, #128	; 0x80
 8000da8:	f7ff ff9a 	bl	8000ce0 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	e005      	b.n	8000dbe <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000db2:	2020      	movs	r0, #32
 8000db4:	f7ff ffc4 	bl	8000d40 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b45      	cmp	r3, #69	; 0x45
 8000dc2:	ddf6      	ble.n	8000db2 <lcd_clear+0x12>
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
    switch (row)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <lcd_put_cur+0x18>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d005      	beq.n	8000df0 <lcd_put_cur+0x22>
 8000de4:	e009      	b.n	8000dfa <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dec:	603b      	str	r3, [r7, #0]
            break;
 8000dee:	e004      	b.n	8000dfa <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000df6:	603b      	str	r3, [r7, #0]
            break;
 8000df8:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff6e 	bl	8000ce0 <lcd_send_cmd>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <lcd_init>:


void lcd_init (void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000e10:	2032      	movs	r0, #50	; 0x32
 8000e12:	f001 fb99 	bl	8002548 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e16:	2030      	movs	r0, #48	; 0x30
 8000e18:	f7ff ff62 	bl	8000ce0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000e1c:	2005      	movs	r0, #5
 8000e1e:	f001 fb93 	bl	8002548 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e22:	2030      	movs	r0, #48	; 0x30
 8000e24:	f7ff ff5c 	bl	8000ce0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f001 fb8d 	bl	8002548 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e2e:	2030      	movs	r0, #48	; 0x30
 8000e30:	f7ff ff56 	bl	8000ce0 <lcd_send_cmd>
	HAL_Delay(10);
 8000e34:	200a      	movs	r0, #10
 8000e36:	f001 fb87 	bl	8002548 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000e3a:	2020      	movs	r0, #32
 8000e3c:	f7ff ff50 	bl	8000ce0 <lcd_send_cmd>
	HAL_Delay(10);
 8000e40:	200a      	movs	r0, #10
 8000e42:	f001 fb81 	bl	8002548 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000e46:	2028      	movs	r0, #40	; 0x28
 8000e48:	f7ff ff4a 	bl	8000ce0 <lcd_send_cmd>
	HAL_Delay(1);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f001 fb7b 	bl	8002548 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000e52:	2008      	movs	r0, #8
 8000e54:	f7ff ff44 	bl	8000ce0 <lcd_send_cmd>
	HAL_Delay(1);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f001 fb75 	bl	8002548 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f7ff ff3e 	bl	8000ce0 <lcd_send_cmd>
	HAL_Delay(1);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f001 fb6f 	bl	8002548 <HAL_Delay>
	HAL_Delay(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f001 fb6c 	bl	8002548 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000e70:	2006      	movs	r0, #6
 8000e72:	f7ff ff35 	bl	8000ce0 <lcd_send_cmd>
	HAL_Delay(1);
 8000e76:	2001      	movs	r0, #1
 8000e78:	f001 fb66 	bl	8002548 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000e7c:	200c      	movs	r0, #12
 8000e7e:	f7ff ff2f 	bl	8000ce0 <lcd_send_cmd>
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000e8e:	e006      	b.n	8000e9e <lcd_send_string+0x18>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff51 	bl	8000d40 <lcd_send_data>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f4      	bne.n	8000e90 <lcd_send_string+0xa>
}
 8000ea6:	bf00      	nop
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <delay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint16_t us){
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim2,0);
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <delay+0x30>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24

	while(__HAL_TIM_GET_COUNTER(&htim2)<us);
 8000ec2:	bf00      	nop
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <delay+0x30>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d3f9      	bcc.n	8000ec4 <delay+0x14>

}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	200004c4 	.word	0x200004c4

08000ee4 <read_keypad>:
#define stepsperrev 4096

uint8_t key;

char read_keypad (void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);  //Pull the R1 low
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2110      	movs	r1, #16
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f001 fdbe 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2120      	movs	r1, #32
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efc:	f001 fdb8 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 8000f00:	2201      	movs	r2, #1
 8000f02:	2140      	movs	r1, #64	; 0x40
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f08:	f001 fdb2 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f001 fdac 	bl	8002a70 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 8000f18:	2101      	movs	r1, #1
 8000f1a:	48b1      	ldr	r0, [pc, #708]	; (80011e0 <read_keypad+0x2fc>)
 8000f1c:	f001 fd90 	bl	8002a40 <HAL_GPIO_ReadPin>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d109      	bne.n	8000f3a <read_keypad+0x56>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 8000f26:	bf00      	nop
 8000f28:	2101      	movs	r1, #1
 8000f2a:	48ad      	ldr	r0, [pc, #692]	; (80011e0 <read_keypad+0x2fc>)
 8000f2c:	f001 fd88 	bl	8002a40 <HAL_GPIO_ReadPin>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f8      	beq.n	8000f28 <read_keypad+0x44>
		return '1';
 8000f36:	2331      	movs	r3, #49	; 0x31
 8000f38:	e14f      	b.n	80011da <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	48a8      	ldr	r0, [pc, #672]	; (80011e0 <read_keypad+0x2fc>)
 8000f3e:	f001 fd7f 	bl	8002a40 <HAL_GPIO_ReadPin>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d109      	bne.n	8000f5c <read_keypad+0x78>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 8000f48:	bf00      	nop
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	48a4      	ldr	r0, [pc, #656]	; (80011e0 <read_keypad+0x2fc>)
 8000f4e:	f001 fd77 	bl	8002a40 <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0f8      	beq.n	8000f4a <read_keypad+0x66>
		return '2';
 8000f58:	2332      	movs	r3, #50	; 0x32
 8000f5a:	e13e      	b.n	80011da <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	48a0      	ldr	r0, [pc, #640]	; (80011e0 <read_keypad+0x2fc>)
 8000f60:	f001 fd6e 	bl	8002a40 <HAL_GPIO_ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d109      	bne.n	8000f7e <read_keypad+0x9a>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 8000f6a:	bf00      	nop
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	489c      	ldr	r0, [pc, #624]	; (80011e0 <read_keypad+0x2fc>)
 8000f70:	f001 fd66 	bl	8002a40 <HAL_GPIO_ReadPin>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f8      	beq.n	8000f6c <read_keypad+0x88>
		return '3';
 8000f7a:	2333      	movs	r3, #51	; 0x33
 8000f7c:	e12d      	b.n	80011da <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 8000f7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f82:	4897      	ldr	r0, [pc, #604]	; (80011e0 <read_keypad+0x2fc>)
 8000f84:	f001 fd5c 	bl	8002a40 <HAL_GPIO_ReadPin>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10a      	bne.n	8000fa4 <read_keypad+0xc0>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 8000f8e:	bf00      	nop
 8000f90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f94:	4892      	ldr	r0, [pc, #584]	; (80011e0 <read_keypad+0x2fc>)
 8000f96:	f001 fd53 	bl	8002a40 <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d0f7      	beq.n	8000f90 <read_keypad+0xac>
		return 'A';
 8000fa0:	2341      	movs	r3, #65	; 0x41
 8000fa2:	e11a      	b.n	80011da <read_keypad+0x2f6>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2110      	movs	r1, #16
 8000fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fac:	f001 fd60 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);  // Pull the R2 High
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f001 fd5a 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2140      	movs	r1, #64	; 0x40
 8000fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc4:	f001 fd54 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd0:	f001 fd4e 	bl	8002a70 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4882      	ldr	r0, [pc, #520]	; (80011e0 <read_keypad+0x2fc>)
 8000fd8:	f001 fd32 	bl	8002a40 <HAL_GPIO_ReadPin>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d109      	bne.n	8000ff6 <read_keypad+0x112>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 8000fe2:	bf00      	nop
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	487e      	ldr	r0, [pc, #504]	; (80011e0 <read_keypad+0x2fc>)
 8000fe8:	f001 fd2a 	bl	8002a40 <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d0f8      	beq.n	8000fe4 <read_keypad+0x100>
		return '4';
 8000ff2:	2334      	movs	r3, #52	; 0x34
 8000ff4:	e0f1      	b.n	80011da <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	4879      	ldr	r0, [pc, #484]	; (80011e0 <read_keypad+0x2fc>)
 8000ffa:	f001 fd21 	bl	8002a40 <HAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d109      	bne.n	8001018 <read_keypad+0x134>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 8001004:	bf00      	nop
 8001006:	2102      	movs	r1, #2
 8001008:	4875      	ldr	r0, [pc, #468]	; (80011e0 <read_keypad+0x2fc>)
 800100a:	f001 fd19 	bl	8002a40 <HAL_GPIO_ReadPin>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0f8      	beq.n	8001006 <read_keypad+0x122>
		return '5';
 8001014:	2335      	movs	r3, #53	; 0x35
 8001016:	e0e0      	b.n	80011da <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 8001018:	2104      	movs	r1, #4
 800101a:	4871      	ldr	r0, [pc, #452]	; (80011e0 <read_keypad+0x2fc>)
 800101c:	f001 fd10 	bl	8002a40 <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d109      	bne.n	800103a <read_keypad+0x156>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 8001026:	bf00      	nop
 8001028:	2104      	movs	r1, #4
 800102a:	486d      	ldr	r0, [pc, #436]	; (80011e0 <read_keypad+0x2fc>)
 800102c:	f001 fd08 	bl	8002a40 <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0f8      	beq.n	8001028 <read_keypad+0x144>
		return '6';
 8001036:	2336      	movs	r3, #54	; 0x36
 8001038:	e0cf      	b.n	80011da <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 800103a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103e:	4868      	ldr	r0, [pc, #416]	; (80011e0 <read_keypad+0x2fc>)
 8001040:	f001 fcfe 	bl	8002a40 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10a      	bne.n	8001060 <read_keypad+0x17c>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 800104a:	bf00      	nop
 800104c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001050:	4863      	ldr	r0, [pc, #396]	; (80011e0 <read_keypad+0x2fc>)
 8001052:	f001 fcf5 	bl	8002a40 <HAL_GPIO_ReadPin>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f7      	beq.n	800104c <read_keypad+0x168>
		return 'B';
 800105c:	2342      	movs	r3, #66	; 0x42
 800105e:	e0bc      	b.n	80011da <read_keypad+0x2f6>
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2110      	movs	r1, #16
 8001064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001068:	f001 fd02 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2120      	movs	r1, #32
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f001 fcfc 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2140      	movs	r1, #64	; 0x40
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001080:	f001 fcf6 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f001 fcf0 	bl	8002a70 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))
 8001090:	2101      	movs	r1, #1
 8001092:	4853      	ldr	r0, [pc, #332]	; (80011e0 <read_keypad+0x2fc>)
 8001094:	f001 fcd4 	bl	8002a40 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d109      	bne.n	80010b2 <read_keypad+0x1ce>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));
 800109e:	bf00      	nop
 80010a0:	2101      	movs	r1, #1
 80010a2:	484f      	ldr	r0, [pc, #316]	; (80011e0 <read_keypad+0x2fc>)
 80010a4:	f001 fccc 	bl	8002a40 <HAL_GPIO_ReadPin>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f8      	beq.n	80010a0 <read_keypad+0x1bc>
		return '7';
 80010ae:	2337      	movs	r3, #55	; 0x37
 80010b0:	e093      	b.n	80011da <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))
 80010b2:	2102      	movs	r1, #2
 80010b4:	484a      	ldr	r0, [pc, #296]	; (80011e0 <read_keypad+0x2fc>)
 80010b6:	f001 fcc3 	bl	8002a40 <HAL_GPIO_ReadPin>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d109      	bne.n	80010d4 <read_keypad+0x1f0>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));
 80010c0:	bf00      	nop
 80010c2:	2102      	movs	r1, #2
 80010c4:	4846      	ldr	r0, [pc, #280]	; (80011e0 <read_keypad+0x2fc>)
 80010c6:	f001 fcbb 	bl	8002a40 <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f8      	beq.n	80010c2 <read_keypad+0x1de>
		return '8';
 80010d0:	2338      	movs	r3, #56	; 0x38
 80010d2:	e082      	b.n	80011da <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))
 80010d4:	2104      	movs	r1, #4
 80010d6:	4842      	ldr	r0, [pc, #264]	; (80011e0 <read_keypad+0x2fc>)
 80010d8:	f001 fcb2 	bl	8002a40 <HAL_GPIO_ReadPin>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d109      	bne.n	80010f6 <read_keypad+0x212>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));
 80010e2:	bf00      	nop
 80010e4:	2104      	movs	r1, #4
 80010e6:	483e      	ldr	r0, [pc, #248]	; (80011e0 <read_keypad+0x2fc>)
 80010e8:	f001 fcaa 	bl	8002a40 <HAL_GPIO_ReadPin>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f8      	beq.n	80010e4 <read_keypad+0x200>
		return '9';
 80010f2:	2339      	movs	r3, #57	; 0x39
 80010f4:	e071      	b.n	80011da <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))
 80010f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010fa:	4839      	ldr	r0, [pc, #228]	; (80011e0 <read_keypad+0x2fc>)
 80010fc:	f001 fca0 	bl	8002a40 <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10a      	bne.n	800111c <read_keypad+0x238>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));
 8001106:	bf00      	nop
 8001108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800110c:	4834      	ldr	r0, [pc, #208]	; (80011e0 <read_keypad+0x2fc>)
 800110e:	f001 fc97 	bl	8002a40 <HAL_GPIO_ReadPin>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f7      	beq.n	8001108 <read_keypad+0x224>
		return 'C';
 8001118:	2343      	movs	r3, #67	; 0x43
 800111a:	e05e      	b.n	80011da <read_keypad+0x2f6>
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2110      	movs	r1, #16
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f001 fca4 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	2120      	movs	r1, #32
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001130:	f001 fc9e 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113c:	f001 fc98 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001148:	f001 fc92 	bl	8002a70 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))
 800114c:	2101      	movs	r1, #1
 800114e:	4824      	ldr	r0, [pc, #144]	; (80011e0 <read_keypad+0x2fc>)
 8001150:	f001 fc76 	bl	8002a40 <HAL_GPIO_ReadPin>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d109      	bne.n	800116e <read_keypad+0x28a>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));
 800115a:	bf00      	nop
 800115c:	2101      	movs	r1, #1
 800115e:	4820      	ldr	r0, [pc, #128]	; (80011e0 <read_keypad+0x2fc>)
 8001160:	f001 fc6e 	bl	8002a40 <HAL_GPIO_ReadPin>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f8      	beq.n	800115c <read_keypad+0x278>
		return '*';
 800116a:	232a      	movs	r3, #42	; 0x2a
 800116c:	e035      	b.n	80011da <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))
 800116e:	2102      	movs	r1, #2
 8001170:	481b      	ldr	r0, [pc, #108]	; (80011e0 <read_keypad+0x2fc>)
 8001172:	f001 fc65 	bl	8002a40 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d109      	bne.n	8001190 <read_keypad+0x2ac>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));
 800117c:	bf00      	nop
 800117e:	2102      	movs	r1, #2
 8001180:	4817      	ldr	r0, [pc, #92]	; (80011e0 <read_keypad+0x2fc>)
 8001182:	f001 fc5d 	bl	8002a40 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f8      	beq.n	800117e <read_keypad+0x29a>
		return '0';
 800118c:	2330      	movs	r3, #48	; 0x30
 800118e:	e024      	b.n	80011da <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))
 8001190:	2104      	movs	r1, #4
 8001192:	4813      	ldr	r0, [pc, #76]	; (80011e0 <read_keypad+0x2fc>)
 8001194:	f001 fc54 	bl	8002a40 <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d109      	bne.n	80011b2 <read_keypad+0x2ce>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));
 800119e:	bf00      	nop
 80011a0:	2104      	movs	r1, #4
 80011a2:	480f      	ldr	r0, [pc, #60]	; (80011e0 <read_keypad+0x2fc>)
 80011a4:	f001 fc4c 	bl	8002a40 <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f8      	beq.n	80011a0 <read_keypad+0x2bc>
		return '#';
 80011ae:	2323      	movs	r3, #35	; 0x23
 80011b0:	e013      	b.n	80011da <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))
 80011b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b6:	480a      	ldr	r0, [pc, #40]	; (80011e0 <read_keypad+0x2fc>)
 80011b8:	f001 fc42 	bl	8002a40 <HAL_GPIO_ReadPin>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10a      	bne.n	80011d8 <read_keypad+0x2f4>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));
 80011c2:	bf00      	nop
 80011c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <read_keypad+0x2fc>)
 80011ca:	f001 fc39 	bl	8002a40 <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f7      	beq.n	80011c4 <read_keypad+0x2e0>
		return 'D';
 80011d4:	2344      	movs	r3, #68	; 0x44
 80011d6:	e000      	b.n	80011da <read_keypad+0x2f6>
	}
	return '\0';//PROBAR NUEVA IMPLEMENTACION
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	48000400 	.word	0x48000400

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ea:	f001 f947 	bl	800247c <HAL_Init>
  Servo servo;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ee:	f000 f9d3 	bl	8001598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f2:	f000 fbf1 	bl	80019d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011f6:	f000 fbbf 	bl	8001978 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011fa:	f000 fa2f 	bl	800165c <MX_I2C1_Init>
  MX_TIM1_Init();
 80011fe:	f000 fa6d 	bl	80016dc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001202:	f000 fb19 	bl	8001838 <MX_TIM2_Init>
  MX_TIM15_Init();
 8001206:	f000 fb65 	bl	80018d4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
lcd_init();
 800120a:	f7ff fdff 	bl	8000e0c <lcd_init>
ultrasonic_init();
 800120e:	f001 f87d 	bl	800230c <ultrasonic_init>
lcd_send_cmd(0x01);
 8001212:	2001      	movs	r0, #1
 8001214:	f7ff fd64 	bl	8000ce0 <lcd_send_cmd>
lcd_send_cmd(0x80);
 8001218:	2080      	movs	r0, #128	; 0x80
 800121a:	f7ff fd61 	bl	8000ce0 <lcd_send_cmd>
lcd_send_string("  A)ULTRASONICO");
 800121e:	48bd      	ldr	r0, [pc, #756]	; (8001514 <main+0x330>)
 8001220:	f7ff fe31 	bl	8000e86 <lcd_send_string>
lcd_send_cmd(0xC0);
 8001224:	20c0      	movs	r0, #192	; 0xc0
 8001226:	f7ff fd5b 	bl	8000ce0 <lcd_send_cmd>
lcd_send_string("B)TECLADO");
 800122a:	48bb      	ldr	r0, [pc, #748]	; (8001518 <main+0x334>)
 800122c:	f7ff fe2b 	bl	8000e86 <lcd_send_string>
max_init(0x03);
 8001230:	2003      	movs	r0, #3
 8001232:	f000 fee7 	bl	8002004 <max_init>
Servo_Init(&servo, &htim1, TIM_CHANNEL_1);
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	49b8      	ldr	r1, [pc, #736]	; (800151c <main+0x338>)
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fbf9 	bl	8000a34 <Servo_Init>
Servo_MoveToAngle(&servo, 0, 500);//temporal
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fc5a 	bl	8000b04 <Servo_MoveToAngle>
HAL_TIM_Base_Start(&htim2);
 8001250:	48b3      	ldr	r0, [pc, #716]	; (8001520 <main+0x33c>)
 8001252:	f003 fcaf 	bl	8004bb4 <HAL_TIM_Base_Start>
/* Infinite loop */
/* USER CODE BEGIN WHILE */
while (1)
{
  /* USER CODE END WHILE */
	      char operation = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	75fb      	strb	r3, [r7, #23]
	      int num1 = 0, digit1 = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
	      uint16_t Distancia = ultrasonic_measure_distance();
 8001262:	f001 f865 	bl	8002330 <ultrasonic_measure_distance>
 8001266:	4603      	mov	r3, r0
 8001268:	82bb      	strh	r3, [r7, #20]
	      key = read_keypad();
 800126a:	f7ff fe3b 	bl	8000ee4 <read_keypad>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	4bac      	ldr	r3, [pc, #688]	; (8001524 <main+0x340>)
 8001274:	701a      	strb	r2, [r3, #0]
	      operation = key;
 8001276:	4bab      	ldr	r3, [pc, #684]	; (8001524 <main+0x340>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	75fb      	strb	r3, [r7, #23]

	      switch (operation) {
 800127c:	7dfb      	ldrb	r3, [r7, #23]
 800127e:	2b43      	cmp	r3, #67	; 0x43
 8001280:	f000 8166 	beq.w	8001550 <main+0x36c>
 8001284:	2b43      	cmp	r3, #67	; 0x43
 8001286:	dce6      	bgt.n	8001256 <main+0x72>
 8001288:	2b41      	cmp	r3, #65	; 0x41
 800128a:	d003      	beq.n	8001294 <main+0xb0>
 800128c:	2b42      	cmp	r3, #66	; 0x42
 800128e:	f000 80b3 	beq.w	80013f8 <main+0x214>
 8001292:	e17b      	b.n	800158c <main+0x3a8>
	          case 'A':
	              lcd_clear();
 8001294:	f7ff fd84 	bl	8000da0 <lcd_clear>
	              while (1) {
	                  uint16_t Distancia = ultrasonic_measure_distance();
 8001298:	f001 f84a 	bl	8002330 <ultrasonic_measure_distance>
 800129c:	4603      	mov	r3, r0
 800129e:	81fb      	strh	r3, [r7, #14]

	                  HAL_Delay(10);
 80012a0:	200a      	movs	r0, #10
 80012a2:	f001 f951 	bl	8002548 <HAL_Delay>
	                  lcd_send_cmd(0x80);
 80012a6:	2080      	movs	r0, #128	; 0x80
 80012a8:	f7ff fd1a 	bl	8000ce0 <lcd_send_cmd>
	                  lcd_send_string("Distancia");
 80012ac:	489e      	ldr	r0, [pc, #632]	; (8001528 <main+0x344>)
 80012ae:	f7ff fdea 	bl	8000e86 <lcd_send_string>
	                  lcd_put_cur(0, 10);
 80012b2:	210a      	movs	r1, #10
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff fd8a 	bl	8000dce <lcd_put_cur>
	                  lcd_send_data((Distancia / 100) + 48);
 80012ba:	89fb      	ldrh	r3, [r7, #14]
 80012bc:	4a9b      	ldr	r2, [pc, #620]	; (800152c <main+0x348>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	095b      	lsrs	r3, r3, #5
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	3330      	adds	r3, #48	; 0x30
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fd37 	bl	8000d40 <lcd_send_data>
	                  lcd_send_data(((Distancia / 10) % 10) + 48);
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	4a96      	ldr	r2, [pc, #600]	; (8001530 <main+0x34c>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	b29a      	uxth	r2, r3
 80012de:	4b94      	ldr	r3, [pc, #592]	; (8001530 <main+0x34c>)
 80012e0:	fba3 1302 	umull	r1, r3, r3, r2
 80012e4:	08d9      	lsrs	r1, r3, #3
 80012e6:	460b      	mov	r3, r1
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	3330      	adds	r3, #48	; 0x30
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fd21 	bl	8000d40 <lcd_send_data>
	                  lcd_send_data((Distancia % 10) + 48);
 80012fe:	89fa      	ldrh	r2, [r7, #14]
 8001300:	4b8b      	ldr	r3, [pc, #556]	; (8001530 <main+0x34c>)
 8001302:	fba3 1302 	umull	r1, r3, r3, r2
 8001306:	08d9      	lsrs	r1, r3, #3
 8001308:	460b      	mov	r3, r1
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	440b      	add	r3, r1
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	b29b      	uxth	r3, r3
 8001314:	b2db      	uxtb	r3, r3
 8001316:	3330      	adds	r3, #48	; 0x30
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fd10 	bl	8000d40 <lcd_send_data>
	                  lcd_send_string(" cm");
 8001320:	4884      	ldr	r0, [pc, #528]	; (8001534 <main+0x350>)
 8001322:	f7ff fdb0 	bl	8000e86 <lcd_send_string>
	                  lcd_send_cmd(0xC0);
 8001326:	20c0      	movs	r0, #192	; 0xc0
 8001328:	f7ff fcda 	bl	8000ce0 <lcd_send_cmd>
	                  lcd_send_string("Ultrasonico");
 800132c:	4882      	ldr	r0, [pc, #520]	; (8001538 <main+0x354>)
 800132e:	f7ff fdaa 	bl	8000e86 <lcd_send_string>
	                  HAL_Delay(50);
 8001332:	2032      	movs	r0, #50	; 0x32
 8001334:	f001 f908 	bl	8002548 <HAL_Delay>
	                  if (Distancia <= 15){
 8001338:	89fb      	ldrh	r3, [r7, #14]
 800133a:	2b0f      	cmp	r3, #15
 800133c:	d816      	bhi.n	800136c <main+0x188>
	                	  write_char(17, 1);
 800133e:	2101      	movs	r1, #1
 8001340:	2011      	movs	r0, #17
 8001342:	f000 fd1b 	bl	8001d7c <write_char>
	                      Servo_MoveToAngle(&servo,Distancia, 1000);
 8001346:	89f9      	ldrh	r1, [r7, #14]
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fbd8 	bl	8000b04 <Servo_MoveToAngle>
		                  	stepper_step_angle(Distancia, 0, 13);
 8001354:	89fb      	ldrh	r3, [r7, #14]
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800135e:	210d      	movs	r1, #13
 8001360:	2000      	movs	r0, #0
 8001362:	eeb0 0a67 	vmov.f32	s0, s15
 8001366:	f7ff fc6f 	bl	8000c48 <stepper_step_angle>
 800136a:	e018      	b.n	800139e <main+0x1ba>
	                  }
	                  else if (Distancia > 15){
 800136c:	89fb      	ldrh	r3, [r7, #14]
 800136e:	2b0f      	cmp	r3, #15
 8001370:	d915      	bls.n	800139e <main+0x1ba>
	                	  write_char(16, 1);
 8001372:	2101      	movs	r1, #1
 8001374:	2010      	movs	r0, #16
 8001376:	f000 fd01 	bl	8001d7c <write_char>
	                      Servo_MoveToAngle(&servo, Distancia, 1000);
 800137a:	89f9      	ldrh	r1, [r7, #14]
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fbbe 	bl	8000b04 <Servo_MoveToAngle>
		                  	stepper_step_angle(Distancia, 1, 13);
 8001388:	89fb      	ldrh	r3, [r7, #14]
 800138a:	ee07 3a90 	vmov	s15, r3
 800138e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001392:	210d      	movs	r1, #13
 8001394:	2001      	movs	r0, #1
 8001396:	eeb0 0a67 	vmov.f32	s0, s15
 800139a:	f7ff fc55 	bl	8000c48 <stepper_step_angle>
	                  }
	                  key = read_keypad();
 800139e:	f7ff fda1 	bl	8000ee4 <read_keypad>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b5f      	ldr	r3, [pc, #380]	; (8001524 <main+0x340>)
 80013a8:	701a      	strb	r2, [r3, #0]
	                  if (key == 'C') {
 80013aa:	4b5e      	ldr	r3, [pc, #376]	; (8001524 <main+0x340>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b43      	cmp	r3, #67	; 0x43
 80013b0:	f47f af72 	bne.w	8001298 <main+0xb4>
	                	lcd_clear();
 80013b4:	f7ff fcf4 	bl	8000da0 <lcd_clear>
	                  	lcd_put_cur(1, 0);
 80013b8:	2100      	movs	r1, #0
 80013ba:	2001      	movs	r0, #1
 80013bc:	f7ff fd07 	bl	8000dce <lcd_put_cur>
	                  	stepper_step_angle(0, 0, 1);
 80013c0:	2101      	movs	r1, #1
 80013c2:	2000      	movs	r0, #0
 80013c4:	ed9f 0a61 	vldr	s0, [pc, #388]	; 800154c <main+0x368>
 80013c8:	f7ff fc3e 	bl	8000c48 <stepper_step_angle>
	                  	Servo_SetAngle(&servo,0);
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fb47 	bl	8000a64 <Servo_SetAngle>
	                  	lcd_send_string("Presione  C!");
 80013d6:	4859      	ldr	r0, [pc, #356]	; (800153c <main+0x358>)
 80013d8:	f7ff fd55 	bl	8000e86 <lcd_send_string>
	                  	scroll_string("x2",150, left);
 80013dc:	224c      	movs	r2, #76	; 0x4c
 80013de:	2196      	movs	r1, #150	; 0x96
 80013e0:	4857      	ldr	r0, [pc, #348]	; (8001540 <main+0x35c>)
 80013e2:	f000 fd57 	bl	8001e94 <scroll_string>
	                  	max_clear();
 80013e6:	f000 fd71 	bl	8001ecc <max_clear>
	                      break;  // Volver al menú principal si se presiona 'C'
 80013ea:	bf00      	nop
	                  }
	              }
	          	while(read_keypad()== 'C'){}
 80013ec:	f7ff fd7a 	bl	8000ee4 <read_keypad>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b43      	cmp	r3, #67	; 0x43
 80013f4:	d0fa      	beq.n	80013ec <main+0x208>
	              break;
 80013f6:	e0c9      	b.n	800158c <main+0x3a8>

	          case 'B':
	              lcd_clear();
 80013f8:	f7ff fcd2 	bl	8000da0 <lcd_clear>
	              lcd_send_cmd(0x80);
 80013fc:	2080      	movs	r0, #128	; 0x80
 80013fe:	f7ff fc6f 	bl	8000ce0 <lcd_send_cmd>
	              lcd_send_string("Entre digitos:");
 8001402:	4850      	ldr	r0, [pc, #320]	; (8001544 <main+0x360>)
 8001404:	f7ff fd3f 	bl	8000e86 <lcd_send_string>
	              lcd_send_cmd(0xC0);
 8001408:	20c0      	movs	r0, #192	; 0xc0
 800140a:	f7ff fc69 	bl	8000ce0 <lcd_send_cmd>

	              while (1) {
	                  key = read_keypad();
 800140e:	f7ff fd69 	bl	8000ee4 <read_keypad>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	4b43      	ldr	r3, [pc, #268]	; (8001524 <main+0x340>)
 8001418:	701a      	strb	r2, [r3, #0]

	                  if (key != 0x01) {
 800141a:	4b42      	ldr	r3, [pc, #264]	; (8001524 <main+0x340>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d0f5      	beq.n	800140e <main+0x22a>
	                      if (key >= '0' && key <= '9' && digit1 < 3) {
 8001422:	4b40      	ldr	r3, [pc, #256]	; (8001524 <main+0x340>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b2f      	cmp	r3, #47	; 0x2f
 8001428:	d91c      	bls.n	8001464 <main+0x280>
 800142a:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <main+0x340>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b39      	cmp	r3, #57	; 0x39
 8001430:	d818      	bhi.n	8001464 <main+0x280>
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b02      	cmp	r3, #2
 8001436:	dc15      	bgt.n	8001464 <main+0x280>
	                          int movei = key - '0';
 8001438:	4b3a      	ldr	r3, [pc, #232]	; (8001524 <main+0x340>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	3b30      	subs	r3, #48	; 0x30
 800143e:	613b      	str	r3, [r7, #16]
	                          num1 = (num1 * 10) + movei;
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	461a      	mov	r2, r3
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4413      	add	r3, r2
 8001450:	61fb      	str	r3, [r7, #28]
	                          lcd_send_data(key);
 8001452:	4b34      	ldr	r3, [pc, #208]	; (8001524 <main+0x340>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fc72 	bl	8000d40 <lcd_send_data>
	                          digit1++;
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	3301      	adds	r3, #1
 8001460:	61bb      	str	r3, [r7, #24]
	                      if (key >= '0' && key <= '9' && digit1 < 3) {
 8001462:	e01e      	b.n	80014a2 <main+0x2be>
	                      } else if (key == '#') {
 8001464:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <main+0x340>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b23      	cmp	r3, #35	; 0x23
 800146a:	d01b      	beq.n	80014a4 <main+0x2c0>
	                          // Salir del bucle cuando se ingresa el símbolo '#'
	                          break;
	                      } else if (key == 'D') {
 800146c:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <main+0x340>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b44      	cmp	r3, #68	; 0x44
 8001472:	d1cc      	bne.n	800140e <main+0x22a>
	                          // Borrar el último dígito ingresado si se presiona 'D'
	                          if (digit1 > 0) {
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2b00      	cmp	r3, #0
 8001478:	ddc9      	ble.n	800140e <main+0x22a>
	                              num1 = num1 / 10;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	4a32      	ldr	r2, [pc, #200]	; (8001548 <main+0x364>)
 800147e:	fb82 1203 	smull	r1, r2, r2, r3
 8001482:	1092      	asrs	r2, r2, #2
 8001484:	17db      	asrs	r3, r3, #31
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	61fb      	str	r3, [r7, #28]
	                              digit1--;
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	3b01      	subs	r3, #1
 800148e:	61bb      	str	r3, [r7, #24]
	                              lcd_send_cmd(0x10); // Mover el cursor hacia atrás
 8001490:	2010      	movs	r0, #16
 8001492:	f7ff fc25 	bl	8000ce0 <lcd_send_cmd>
	                              lcd_send_data(' '); // Borrar el último dígito mostrado
 8001496:	2020      	movs	r0, #32
 8001498:	f7ff fc52 	bl	8000d40 <lcd_send_data>
	                              lcd_send_cmd(0x10); // Mover el cursor hacia atrás nuevamente
 800149c:	2010      	movs	r0, #16
 800149e:	f7ff fc1f 	bl	8000ce0 <lcd_send_cmd>
	                  key = read_keypad();
 80014a2:	e7b4      	b.n	800140e <main+0x22a>
	                          break;
 80014a4:	bf00      	nop
	                          }
	                      }
	                  }
	              }
	              if (num1 >= 90){
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	2b59      	cmp	r3, #89	; 0x59
 80014aa:	dd17      	ble.n	80014dc <main+0x2f8>
	              write_char(17, 1);
 80014ac:	2101      	movs	r1, #1
 80014ae:	2011      	movs	r0, #17
 80014b0:	f000 fc64 	bl	8001d7c <write_char>
	              Servo_MoveToAngle(&servo, num1, 1000);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	b299      	uxth	r1, r3
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fb20 	bl	8000b04 <Servo_MoveToAngle>
	              stepper_step_angle(num1, 0, 13);}
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ce:	210d      	movs	r1, #13
 80014d0:	2000      	movs	r0, #0
 80014d2:	eeb0 0a67 	vmov.f32	s0, s15
 80014d6:	f7ff fbb7 	bl	8000c48 <stepper_step_angle>
	              else if (num1 < 90 ){
                write_char(16, 1);
	              Servo_MoveToAngle(&servo, num1, 1000);
	              stepper_step_angle(num1, 1, 13);}

	              break;
 80014da:	e056      	b.n	800158a <main+0x3a6>
	              else if (num1 < 90 ){
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	2b59      	cmp	r3, #89	; 0x59
 80014e0:	dc53      	bgt.n	800158a <main+0x3a6>
                write_char(16, 1);
 80014e2:	2101      	movs	r1, #1
 80014e4:	2010      	movs	r0, #16
 80014e6:	f000 fc49 	bl	8001d7c <write_char>
	              Servo_MoveToAngle(&servo, num1, 1000);
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	b299      	uxth	r1, r3
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fb05 	bl	8000b04 <Servo_MoveToAngle>
	              stepper_step_angle(num1, 1, 13);}
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001504:	210d      	movs	r1, #13
 8001506:	2001      	movs	r0, #1
 8001508:	eeb0 0a67 	vmov.f32	s0, s15
 800150c:	f7ff fb9c 	bl	8000c48 <stepper_step_angle>
	              break;
 8001510:	e03b      	b.n	800158a <main+0x3a6>
 8001512:	bf00      	nop
 8001514:	0800643c 	.word	0x0800643c
 8001518:	0800644c 	.word	0x0800644c
 800151c:	20000478 	.word	0x20000478
 8001520:	200004c4 	.word	0x200004c4
 8001524:	200005e4 	.word	0x200005e4
 8001528:	08006458 	.word	0x08006458
 800152c:	51eb851f 	.word	0x51eb851f
 8001530:	cccccccd 	.word	0xcccccccd
 8001534:	08006464 	.word	0x08006464
 8001538:	08006468 	.word	0x08006468
 800153c:	08006474 	.word	0x08006474
 8001540:	08006484 	.word	0x08006484
 8001544:	08006488 	.word	0x08006488
 8001548:	66666667 	.word	0x66666667
 800154c:	00000000 	.word	0x00000000

	          case 'C':
	        	  max_clear();
 8001550:	f000 fcbc 	bl	8001ecc <max_clear>
                  stepper_step_angle(0, 0, 1);
 8001554:	2101      	movs	r1, #1
 8001556:	2000      	movs	r0, #0
 8001558:	ed1f 0a04 	vldr	s0, [pc, #-16]	; 800154c <main+0x368>
 800155c:	f7ff fb74 	bl	8000c48 <stepper_step_angle>
                  Servo_SetAngle(&servo,0);
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fa7d 	bl	8000a64 <Servo_SetAngle>
	              lcd_send_cmd(0x01);
 800156a:	2001      	movs	r0, #1
 800156c:	f7ff fbb8 	bl	8000ce0 <lcd_send_cmd>
	              lcd_send_cmd(0x80);
 8001570:	2080      	movs	r0, #128	; 0x80
 8001572:	f7ff fbb5 	bl	8000ce0 <lcd_send_cmd>
	              lcd_send_string("  A)ULTRASONICO");
 8001576:	4806      	ldr	r0, [pc, #24]	; (8001590 <main+0x3ac>)
 8001578:	f7ff fc85 	bl	8000e86 <lcd_send_string>
	              lcd_send_cmd(0xC0);
 800157c:	20c0      	movs	r0, #192	; 0xc0
 800157e:	f7ff fbaf 	bl	8000ce0 <lcd_send_cmd>
	              lcd_send_string("B)TECLADO");
 8001582:	4804      	ldr	r0, [pc, #16]	; (8001594 <main+0x3b0>)
 8001584:	f7ff fc7f 	bl	8000e86 <lcd_send_string>

	              break;
 8001588:	e000      	b.n	800158c <main+0x3a8>
	              break;
 800158a:	bf00      	nop
{
 800158c:	e663      	b.n	8001256 <main+0x72>
 800158e:	bf00      	nop
 8001590:	0800643c 	.word	0x0800643c
 8001594:	0800644c 	.word	0x0800644c

08001598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b09c      	sub	sp, #112	; 0x70
 800159c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015a2:	2228      	movs	r2, #40	; 0x28
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f004 fef4 	bl	8006394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015bc:	463b      	mov	r3, r7
 80015be:	2234      	movs	r2, #52	; 0x34
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f004 fee6 	bl	8006394 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80015c8:	2303      	movs	r3, #3
 80015ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d6:	2301      	movs	r3, #1
 80015d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015da:	2310      	movs	r3, #16
 80015dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015de:	2302      	movs	r3, #2
 80015e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 fe80 	bl	80032f8 <HAL_RCC_OscConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80015fe:	f000 fa99 	bl	8001b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001602:	230f      	movs	r3, #15
 8001604:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001606:	2302      	movs	r3, #2
 8001608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800160e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001618:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800161c:	2102      	movs	r1, #2
 800161e:	4618      	mov	r0, r3
 8001620:	f002 fea8 	bl	8004374 <HAL_RCC_ClockConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800162a:	f000 fa83 	bl	8001b34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <SystemClock_Config+0xc0>)
 8001630:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM15;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800163e:	463b      	mov	r3, r7
 8001640:	4618      	mov	r0, r3
 8001642:	f003 f8cd 	bl	80047e0 <HAL_RCCEx_PeriphCLKConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800164c:	f000 fa72 	bl	8001b34 <Error_Handler>
  }
}
 8001650:	bf00      	nop
 8001652:	3770      	adds	r7, #112	; 0x70
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	00041020 	.word	0x00041020

0800165c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <MX_I2C1_Init+0x74>)
 8001662:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <MX_I2C1_Init+0x78>)
 8001664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <MX_I2C1_Init+0x74>)
 8001668:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <MX_I2C1_Init+0x7c>)
 800166a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_I2C1_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <MX_I2C1_Init+0x74>)
 8001674:	2201      	movs	r2, #1
 8001676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <MX_I2C1_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_I2C1_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <MX_I2C1_Init+0x74>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_I2C1_Init+0x74>)
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_I2C1_Init+0x74>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001696:	480e      	ldr	r0, [pc, #56]	; (80016d0 <MX_I2C1_Init+0x74>)
 8001698:	f001 fa02 	bl	8002aa0 <HAL_I2C_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016a2:	f000 fa47 	bl	8001b34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4809      	ldr	r0, [pc, #36]	; (80016d0 <MX_I2C1_Init+0x74>)
 80016aa:	f001 fd8d 	bl	80031c8 <HAL_I2CEx_ConfigAnalogFilter>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016b4:	f000 fa3e 	bl	8001b34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016b8:	2100      	movs	r1, #0
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_I2C1_Init+0x74>)
 80016bc:	f001 fdcf 	bl	800325e <HAL_I2CEx_ConfigDigitalFilter>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016c6:	f000 fa35 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000424 	.word	0x20000424
 80016d4:	40005400 	.word	0x40005400
 80016d8:	2000090e 	.word	0x2000090e

080016dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b09a      	sub	sp, #104	; 0x68
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
 800170c:	615a      	str	r2, [r3, #20]
 800170e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	222c      	movs	r2, #44	; 0x2c
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f004 fe3c 	bl	8006394 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800171c:	4b44      	ldr	r3, [pc, #272]	; (8001830 <MX_TIM1_Init+0x154>)
 800171e:	4a45      	ldr	r2, [pc, #276]	; (8001834 <MX_TIM1_Init+0x158>)
 8001720:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001722:	4b43      	ldr	r3, [pc, #268]	; (8001830 <MX_TIM1_Init+0x154>)
 8001724:	2247      	movs	r2, #71	; 0x47
 8001726:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001728:	4b41      	ldr	r3, [pc, #260]	; (8001830 <MX_TIM1_Init+0x154>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 800172e:	4b40      	ldr	r3, [pc, #256]	; (8001830 <MX_TIM1_Init+0x154>)
 8001730:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001734:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001736:	4b3e      	ldr	r3, [pc, #248]	; (8001830 <MX_TIM1_Init+0x154>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800173c:	4b3c      	ldr	r3, [pc, #240]	; (8001830 <MX_TIM1_Init+0x154>)
 800173e:	2200      	movs	r2, #0
 8001740:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <MX_TIM1_Init+0x154>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001748:	4839      	ldr	r0, [pc, #228]	; (8001830 <MX_TIM1_Init+0x154>)
 800174a:	f003 f9db 	bl	8004b04 <HAL_TIM_Base_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001754:	f000 f9ee 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800175e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001762:	4619      	mov	r1, r3
 8001764:	4832      	ldr	r0, [pc, #200]	; (8001830 <MX_TIM1_Init+0x154>)
 8001766:	f003 fccd 	bl	8005104 <HAL_TIM_ConfigClockSource>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001770:	f000 f9e0 	bl	8001b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001774:	482e      	ldr	r0, [pc, #184]	; (8001830 <MX_TIM1_Init+0x154>)
 8001776:	f003 fa69 	bl	8004c4c <HAL_TIM_PWM_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001780:	f000 f9d8 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001790:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001794:	4619      	mov	r1, r3
 8001796:	4826      	ldr	r0, [pc, #152]	; (8001830 <MX_TIM1_Init+0x154>)
 8001798:	f004 f952 	bl	8005a40 <HAL_TIMEx_MasterConfigSynchronization>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80017a2:	f000 f9c7 	bl	8001b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a6:	2360      	movs	r3, #96	; 0x60
 80017a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 80017aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017b4:	2300      	movs	r3, #0
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017bc:	2300      	movs	r3, #0
 80017be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017c0:	2300      	movs	r3, #0
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017c8:	2200      	movs	r2, #0
 80017ca:	4619      	mov	r1, r3
 80017cc:	4818      	ldr	r0, [pc, #96]	; (8001830 <MX_TIM1_Init+0x154>)
 80017ce:	f003 fb85 	bl	8004edc <HAL_TIM_PWM_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80017d8:	f000 f9ac 	bl	8001b34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	4619      	mov	r1, r3
 8001810:	4807      	ldr	r0, [pc, #28]	; (8001830 <MX_TIM1_Init+0x154>)
 8001812:	f004 f97b 	bl	8005b0c <HAL_TIMEx_ConfigBreakDeadTime>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800181c:	f000 f98a 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001820:	4803      	ldr	r0, [pc, #12]	; (8001830 <MX_TIM1_Init+0x154>)
 8001822:	f000 fcbd 	bl	80021a0 <HAL_TIM_MspPostInit>

}
 8001826:	bf00      	nop
 8001828:	3768      	adds	r7, #104	; 0x68
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000478 	.word	0x20000478
 8001834:	40012c00 	.word	0x40012c00

08001838 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001856:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <MX_TIM2_Init+0x98>)
 8001858:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800185c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <MX_TIM2_Init+0x98>)
 8001860:	2247      	movs	r2, #71	; 0x47
 8001862:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <MX_TIM2_Init+0x98>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <MX_TIM2_Init+0x98>)
 800186c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001870:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_TIM2_Init+0x98>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_TIM2_Init+0x98>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800187e:	4814      	ldr	r0, [pc, #80]	; (80018d0 <MX_TIM2_Init+0x98>)
 8001880:	f003 f940 	bl	8004b04 <HAL_TIM_Base_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800188a:	f000 f953 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001892:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	4619      	mov	r1, r3
 800189a:	480d      	ldr	r0, [pc, #52]	; (80018d0 <MX_TIM2_Init+0x98>)
 800189c:	f003 fc32 	bl	8005104 <HAL_TIM_ConfigClockSource>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018a6:	f000 f945 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <MX_TIM2_Init+0x98>)
 80018b8:	f004 f8c2 	bl	8005a40 <HAL_TIMEx_MasterConfigSynchronization>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018c2:	f000 f937 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200004c4 	.word	0x200004c4

080018d4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018da:	f107 0310 	add.w	r3, r7, #16
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <MX_TIM15_Init+0x9c>)
 80018f4:	4a1f      	ldr	r2, [pc, #124]	; (8001974 <MX_TIM15_Init+0xa0>)
 80018f6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 71;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <MX_TIM15_Init+0x9c>)
 80018fa:	2247      	movs	r2, #71	; 0x47
 80018fc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fe:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <MX_TIM15_Init+0x9c>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <MX_TIM15_Init+0x9c>)
 8001906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800190a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <MX_TIM15_Init+0x9c>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <MX_TIM15_Init+0x9c>)
 8001914:	2200      	movs	r2, #0
 8001916:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <MX_TIM15_Init+0x9c>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800191e:	4814      	ldr	r0, [pc, #80]	; (8001970 <MX_TIM15_Init+0x9c>)
 8001920:	f003 f8f0 	bl	8004b04 <HAL_TIM_Base_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800192a:	f000 f903 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001932:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	4619      	mov	r1, r3
 800193a:	480d      	ldr	r0, [pc, #52]	; (8001970 <MX_TIM15_Init+0x9c>)
 800193c:	f003 fbe2 	bl	8005104 <HAL_TIM_ConfigClockSource>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001946:	f000 f8f5 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	4619      	mov	r1, r3
 8001956:	4806      	ldr	r0, [pc, #24]	; (8001970 <MX_TIM15_Init+0x9c>)
 8001958:	f004 f872 	bl	8005a40 <HAL_TIMEx_MasterConfigSynchronization>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001962:	f000 f8e7 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	3720      	adds	r7, #32
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000510 	.word	0x20000510
 8001974:	40014000 	.word	0x40014000

08001978 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 800197e:	4a15      	ldr	r2, [pc, #84]	; (80019d4 <MX_USART2_UART_Init+0x5c>)
 8001980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 8001984:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 800199e:	220c      	movs	r2, #12
 80019a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 80019bc:	f004 f91e 	bl	8005bfc <HAL_UART_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019c6:	f000 f8b5 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000055c 	.word	0x2000055c
 80019d4:	40004400 	.word	0x40004400

080019d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	4b4e      	ldr	r3, [pc, #312]	; (8001b28 <MX_GPIO_Init+0x150>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	4a4d      	ldr	r2, [pc, #308]	; (8001b28 <MX_GPIO_Init+0x150>)
 80019f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019f8:	6153      	str	r3, [r2, #20]
 80019fa:	4b4b      	ldr	r3, [pc, #300]	; (8001b28 <MX_GPIO_Init+0x150>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a06:	4b48      	ldr	r3, [pc, #288]	; (8001b28 <MX_GPIO_Init+0x150>)
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	4a47      	ldr	r2, [pc, #284]	; (8001b28 <MX_GPIO_Init+0x150>)
 8001a0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a10:	6153      	str	r3, [r2, #20]
 8001a12:	4b45      	ldr	r3, [pc, #276]	; (8001b28 <MX_GPIO_Init+0x150>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	4b42      	ldr	r3, [pc, #264]	; (8001b28 <MX_GPIO_Init+0x150>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	4a41      	ldr	r2, [pc, #260]	; (8001b28 <MX_GPIO_Init+0x150>)
 8001a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a28:	6153      	str	r3, [r2, #20]
 8001a2a:	4b3f      	ldr	r3, [pc, #252]	; (8001b28 <MX_GPIO_Init+0x150>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a36:	4b3c      	ldr	r3, [pc, #240]	; (8001b28 <MX_GPIO_Init+0x150>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	4a3b      	ldr	r2, [pc, #236]	; (8001b28 <MX_GPIO_Init+0x150>)
 8001a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a40:	6153      	str	r3, [r2, #20]
 8001a42:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <MX_GPIO_Init+0x150>)
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f641 61f0 	movw	r1, #7920	; 0x1ef0
 8001a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a58:	f001 f80a 	bl	8002a70 <HAL_GPIO_WritePin>
                          |IN1_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|IN4_Pin|IN3_Pin, GPIO_PIN_RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f24a 0140 	movw	r1, #41024	; 0xa040
 8001a62:	4832      	ldr	r0, [pc, #200]	; (8001b2c <MX_GPIO_Init+0x154>)
 8001a64:	f001 f804 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001a6e:	4830      	ldr	r0, [pc, #192]	; (8001b30 <MX_GPIO_Init+0x158>)
 8001a70:	f000 fffe 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : blue_Pin */
  GPIO_InitStruct.Pin = blue_Pin;
 8001a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a7a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(blue_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4829      	ldr	r0, [pc, #164]	; (8001b30 <MX_GPIO_Init+0x158>)
 8001a8c:	f000 fe66 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           IN1_Pin PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001a90:	f641 63f0 	movw	r3, #7920	; 0x1ef0
 8001a94:	617b      	str	r3, [r7, #20]
                          |IN1_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a96:	2301      	movs	r3, #1
 8001a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aac:	f000 fe56 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 8001ab0:	f240 4307 	movw	r3, #1031	; 0x407
 8001ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4819      	ldr	r0, [pc, #100]	; (8001b2c <MX_GPIO_Init+0x154>)
 8001ac6:	f000 fe49 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin IN4_Pin IN3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|IN4_Pin|IN3_Pin;
 8001aca:	f24a 0340 	movw	r3, #41024	; 0xa040
 8001ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4812      	ldr	r0, [pc, #72]	; (8001b2c <MX_GPIO_Init+0x154>)
 8001ae4:	f000 fe3a 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_Pin PC9 */
  GPIO_InitStruct.Pin = IN2_Pin|GPIO_PIN_9;
 8001ae8:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	480b      	ldr	r0, [pc, #44]	; (8001b30 <MX_GPIO_Init+0x158>)
 8001b02:	f000 fe2b 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_GPIO_Init+0x158>)
 8001b1c:	f000 fe1e 	bl	800275c <HAL_GPIO_Init>

}
 8001b20:	bf00      	nop
 8001b22:	3728      	adds	r7, #40	; 0x28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	48000400 	.word	0x48000400
 8001b30:	48000800 	.word	0x48000800

08001b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <Error_Handler+0x8>

08001b3e <write_byte>:
};



void write_byte (uint8_t byte)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	e01e      	b.n	8001b8c <write_byte+0x4e>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b58:	f000 ff8a 	bl	8002a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6e:	f000 ff7f 	bl	8002a70 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b82:	f000 ff75 	bl	8002a70 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b07      	cmp	r3, #7
 8001b90:	dddd      	ble.n	8001b4e <write_byte+0x10>
	}
}
 8001b92:	bf00      	nop
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	460a      	mov	r2, r1
 8001ba6:	71fb      	strb	r3, [r7, #7]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8001bac:	2200      	movs	r2, #0
 8001bae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb6:	f000 ff5b 	bl	8002a70 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	e00a      	b.n	8001bd6 <write_max_cmd+0x3a>
	{
		write_byte (address);
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ffbb 	bl	8001b3e <write_byte>
		write_byte (cmd); 
 8001bc8:	79bb      	ldrb	r3, [r7, #6]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ffb7 	bl	8001b3e <write_byte>
	for (int i=0;i<num; i++)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	ddf1      	ble.n	8001bc0 <write_max_cmd+0x24>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be6:	f000 ff43 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 8001bea:	2201      	movs	r2, #1
 8001bec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf4:	f000 ff3c 	bl	8002a70 <HAL_GPIO_WritePin>
}
 8001bf8:	bf00      	nop
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	71bb      	strb	r3, [r7, #6]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 8001c12:	797b      	ldrb	r3, [r7, #5]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00d      	beq.n	8001c34 <setled+0x34>
 8001c18:	79bb      	ldrb	r3, [r7, #6]
 8001c1a:	4a2f      	ldr	r2, [pc, #188]	; (8001cd8 <setled+0xd8>)
 8001c1c:	5cd1      	ldrb	r1, [r2, r3]
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	2201      	movs	r2, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	79bb      	ldrb	r3, [r7, #6]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	b2d1      	uxtb	r1, r2
 8001c2e:	4a2a      	ldr	r2, [pc, #168]	; (8001cd8 <setled+0xd8>)
 8001c30:	54d1      	strb	r1, [r2, r3]
 8001c32:	e00e      	b.n	8001c52 <setled+0x52>
 8001c34:	79bb      	ldrb	r3, [r7, #6]
 8001c36:	4a28      	ldr	r2, [pc, #160]	; (8001cd8 <setled+0xd8>)
 8001c38:	5cd1      	ldrb	r1, [r2, r3]
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	400a      	ands	r2, r1
 8001c4c:	b2d1      	uxtb	r1, r2
 8001c4e:	4a22      	ldr	r2, [pc, #136]	; (8001cd8 <setled+0xd8>)
 8001c50:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 8001c52:	79bb      	ldrb	r3, [r7, #6]
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8001c5a:	79bb      	ldrb	r3, [r7, #6]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6c:	f000 ff00 	bl	8002a70 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e01b      	b.n	8001cae <setled+0xae>
	{
		if (i == (num-(n+1)))
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	425b      	negs	r3, r3
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d10d      	bne.n	8001c9c <setled+0x9c>
		{
			write_byte (((c+1)));
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	3301      	adds	r3, #1
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff58 	bl	8001b3e <write_byte>
			write_byte (buffer[col]);
 8001c8e:	79bb      	ldrb	r3, [r7, #6]
 8001c90:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <setled+0xd8>)
 8001c92:	5cd3      	ldrb	r3, [r2, r3]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff52 	bl	8001b3e <write_byte>
 8001c9a:	e005      	b.n	8001ca8 <setled+0xa8>
		}
		else
		{
			write_byte (0);
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff ff4e 	bl	8001b3e <write_byte>
			write_byte (0);
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f7ff ff4b 	bl	8001b3e <write_byte>
	for (int i=0; i<num; i++) 
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3301      	adds	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	dde0      	ble.n	8001c76 <setled+0x76>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cbe:	f000 fed7 	bl	8002a70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ccc:	f000 fed0 	bl	8002a70 <HAL_GPIO_WritePin>
}
 8001cd0:	bf00      	nop
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200005e8 	.word	0x200005e8

08001cdc <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	71fb      	strb	r3, [r7, #7]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	08db      	lsrs	r3, r3, #3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 8001cfc:	79bb      	ldrb	r3, [r7, #6]
 8001cfe:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	e02d      	b.n	8001d62 <setrow+0x86>
	{
		if (i == ((n)))
 8001d06:	69fa      	ldr	r2, [r7, #28]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d120      	bne.n	8001d50 <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	3307      	adds	r3, #7
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	e015      	b.n	8001d44 <setrow+0x68>
			{
				bool b = value&0x80;
 8001d18:	79bb      	ldrb	r3, [r7, #6]
 8001d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf14      	ite	ne
 8001d22:	2301      	movne	r3, #1
 8001d24:	2300      	moveq	r3, #0
 8001d26:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	b2d1      	uxtb	r1, r2
 8001d30:	7bba      	ldrb	r2, [r7, #14]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ff64 	bl	8001c00 <setled>
				value<<=1;
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	dae4      	bge.n	8001d18 <setrow+0x3c>
 8001d4e:	e005      	b.n	8001d5c <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff fef4 	bl	8001b3e <write_byte>
			write_byte (0);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f7ff fef1 	bl	8001b3e <write_byte>
	for (int i=0; i<num; i++) 
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	ddce      	ble.n	8001d06 <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	4903      	ldr	r1, [pc, #12]	; (8001d78 <setrow+0x9c>)
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	54ca      	strb	r2, [r1, r3]
}
 8001d70:	bf00      	nop
 8001d72:	3720      	adds	r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000638 	.word	0x20000638

08001d7c <write_char>:
		


void write_char (char c, uint8_t max)  
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	460a      	mov	r2, r1
 8001d86:	71fb      	strb	r3, [r7, #7]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4a16      	ldr	r2, [pc, #88]	; (8001dec <write_char+0x70>)
 8001d92:	5cd3      	ldrb	r3, [r2, r3]
 8001d94:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	60bb      	str	r3, [r7, #8]
	int row =6;
 8001d9e:	2306      	movs	r3, #6
 8001da0:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	e016      	b.n	8001dd6 <write_char+0x5a>
//	for (int j=start+7; j>=(start); j--)  // uncomment this if the character looks inverted about Y axis
	{
		setrow (row+(8*(max-1)), CH[j]);
 8001da8:	79bb      	ldrb	r3, [r7, #6]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	490c      	ldr	r1, [pc, #48]	; (8001dec <write_char+0x70>)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	440b      	add	r3, r1
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	f7ff ff89 	bl	8001cdc <setrow>
		row--;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4413      	add	r3, r2
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	dbe2      	blt.n	8001da8 <write_char+0x2c>
	}
}
 8001de2:	bf00      	nop
 8001de4:	bf00      	nop
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000004 	.word	0x20000004

08001df0 <shift_char>:
					break;
			}			
}	
		
void shift_char (char c, uint32_t speed, char direction)  
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4a22      	ldr	r2, [pc, #136]	; (8001e90 <shift_char+0xa0>)
 8001e06:	5cd3      	ldrb	r3, [r2, r3]
 8001e08:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	60bb      	str	r3, [r7, #8]

		switch (direction)
 8001e12:	79bb      	ldrb	r3, [r7, #6]
 8001e14:	2b4c      	cmp	r3, #76	; 0x4c
 8001e16:	d002      	beq.n	8001e1e <shift_char+0x2e>
 8001e18:	2b52      	cmp	r3, #82	; 0x52
 8001e1a:	d01a      	beq.n	8001e52 <shift_char+0x62>
						HAL_Delay (speed);
					}
					break;
			
				default :
					break;
 8001e1c:	e034      	b.n	8001e88 <shift_char+0x98>
					for (int j=start; j<(start+width+1); j++)
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e00f      	b.n	8001e44 <shift_char+0x54>
						setrow (0, CH[j]);
 8001e24:	4a1a      	ldr	r2, [pc, #104]	; (8001e90 <shift_char+0xa0>)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	4413      	add	r3, r2
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f7ff ff54 	bl	8001cdc <setrow>
						shiftleft();
 8001e34:	f000 f878 	bl	8001f28 <shiftleft>
						HAL_Delay (speed);
 8001e38:	6838      	ldr	r0, [r7, #0]
 8001e3a:	f000 fb85 	bl	8002548 <HAL_Delay>
					for (int j=start; j<(start+width+1); j++)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4413      	add	r3, r2
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dde9      	ble.n	8001e24 <shift_char+0x34>
						break;
 8001e50:	e01a      	b.n	8001e88 <shift_char+0x98>
					for (int j=start+width+1; j>=(start); j--)
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	3301      	adds	r3, #1
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	e00f      	b.n	8001e7e <shift_char+0x8e>
						setrow ((num*8)-1, CH[j]);
 8001e5e:	4a0c      	ldr	r2, [pc, #48]	; (8001e90 <shift_char+0xa0>)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4619      	mov	r1, r3
 8001e68:	2007      	movs	r0, #7
 8001e6a:	f7ff ff37 	bl	8001cdc <setrow>
						shiftright();
 8001e6e:	f000 f893 	bl	8001f98 <shiftright>
						HAL_Delay (speed);
 8001e72:	6838      	ldr	r0, [r7, #0]
 8001e74:	f000 fb68 	bl	8002548 <HAL_Delay>
					for (int j=start+width+1; j>=(start); j--)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	daeb      	bge.n	8001e5e <shift_char+0x6e>
					break;
 8001e86:	bf00      	nop
			}
}
 8001e88:	bf00      	nop
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000004 	.word	0x20000004

08001e94 <scroll_string>:



void scroll_string (uint8_t *string, uint32_t speed, char direction)
{	
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	71fb      	strb	r3, [r7, #7]
	while (*string != 0) 
 8001ea2:	e009      	b.n	8001eb8 <scroll_string+0x24>
	{	
		shift_char (*string, speed, direction);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	79fa      	ldrb	r2, [r7, #7]
 8001eaa:	68b9      	ldr	r1, [r7, #8]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff9f 	bl	8001df0 <shift_char>
		string++;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
	while (*string != 0) 
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f1      	bne.n	8001ea4 <scroll_string+0x10>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <max_clear>:



void max_clear(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	e008      	b.n	8001eea <max_clear+0x1e>
		setrow(i,0);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fefc 	bl	8001cdc <setrow>
	for (int i=0; i<num*8; i++) 
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b07      	cmp	r3, #7
 8001eee:	ddf3      	ble.n	8001ed8 <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	e00c      	b.n	8001f10 <max_clear+0x44>
	{
		buffer[i] = 0;
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <max_clear+0x54>)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 8001f00:	4a08      	ldr	r2, [pc, #32]	; (8001f24 <max_clear+0x58>)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2b4f      	cmp	r3, #79	; 0x4f
 8001f14:	ddef      	ble.n	8001ef6 <max_clear+0x2a>
	}
}
 8001f16:	bf00      	nop
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200005e8 	.word	0x200005e8
 8001f24:	20000638 	.word	0x20000638

08001f28 <shiftleft>:



void shiftleft(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
	int last = num*8-1;
 8001f2e:	2307      	movs	r3, #7
 8001f30:	60bb      	str	r3, [r7, #8]
	uint8_t old = buffer_row[last];
 8001f32:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <shiftleft+0x6c>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4413      	add	r3, r2
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	71fb      	strb	r3, [r7, #7]
	int i;
	for (i=0; i<num*8; i++)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	e00c      	b.n	8001f5c <shiftleft+0x34>
	{
		setrow(i, buffer_row[i]);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4913      	ldr	r1, [pc, #76]	; (8001f94 <shiftleft+0x6c>)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	440b      	add	r3, r1
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4610      	mov	r0, r2
 8001f52:	f7ff fec3 	bl	8001cdc <setrow>
	for (i=0; i<num*8; i++)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2b07      	cmp	r3, #7
 8001f60:	ddef      	ble.n	8001f42 <shiftleft+0x1a>
	}
	for (i=79; i>0; i--)
 8001f62:	234f      	movs	r3, #79	; 0x4f
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	e00b      	b.n	8001f80 <shiftleft+0x58>
	{
 		buffer_row[i] = buffer_row[i-1];
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	4a09      	ldr	r2, [pc, #36]	; (8001f94 <shiftleft+0x6c>)
 8001f6e:	5cd1      	ldrb	r1, [r2, r3]
 8001f70:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <shiftleft+0x6c>)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4413      	add	r3, r2
 8001f76:	460a      	mov	r2, r1
 8001f78:	701a      	strb	r2, [r3, #0]
	for (i=79; i>0; i--)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	dcf0      	bgt.n	8001f68 <shiftleft+0x40>
	}
	
	buffer_row[0] = old;
 8001f86:	4a03      	ldr	r2, [pc, #12]	; (8001f94 <shiftleft+0x6c>)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	7013      	strb	r3, [r2, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000638 	.word	0x20000638

08001f98 <shiftright>:


void shiftright(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
	int last = num*8-1;	
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	607b      	str	r3, [r7, #4]
	uint8_t old = buffer_row[0];
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <shiftright+0x68>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	70fb      	strb	r3, [r7, #3]
	
	for (int i=last; i>=0; i--)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	e00c      	b.n	8001fc8 <shiftright+0x30>
	{
		setrow (i, buffer_row[i]);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4913      	ldr	r1, [pc, #76]	; (8002000 <shiftright+0x68>)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	440b      	add	r3, r1
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	f7ff fe8d 	bl	8001cdc <setrow>
	for (int i=last; i>=0; i--)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	daef      	bge.n	8001fae <shiftright+0x16>
	}
	
	for (int i=0; i<80; i++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	e00b      	b.n	8001fec <shiftright+0x54>
	{
		buffer_row[i] = buffer_row[i+1];
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	4a09      	ldr	r2, [pc, #36]	; (8002000 <shiftright+0x68>)
 8001fda:	5cd1      	ldrb	r1, [r2, r3]
 8001fdc:	4a08      	ldr	r2, [pc, #32]	; (8002000 <shiftright+0x68>)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	460a      	mov	r2, r1
 8001fe4:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b4f      	cmp	r3, #79	; 0x4f
 8001ff0:	ddf0      	ble.n	8001fd4 <shiftright+0x3c>
	}
	
	buffer_row[num*8-1] = old;
 8001ff2:	4a03      	ldr	r2, [pc, #12]	; (8002000 <shiftright+0x68>)
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	71d3      	strb	r3, [r2, #7]
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000638 	.word	0x20000638

08002004 <max_init>:



void max_init (uint8_t brightness)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 800200e:	2100      	movs	r1, #0
 8002010:	2009      	movs	r0, #9
 8002012:	f7ff fdc3 	bl	8001b9c <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8002016:	2107      	movs	r1, #7
 8002018:	200b      	movs	r0, #11
 800201a:	f7ff fdbf 	bl	8001b9c <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 800201e:	2101      	movs	r1, #1
 8002020:	200c      	movs	r0, #12
 8002022:	f7ff fdbb 	bl	8001b9c <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8002026:	2100      	movs	r1, #0
 8002028:	200f      	movs	r0, #15
 800202a:	f7ff fdb7 	bl	8001b9c <write_max_cmd>
	
	max_clear ();
 800202e:	f7ff ff4d 	bl	8001ecc <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	4619      	mov	r1, r3
 8002036:	200a      	movs	r0, #10
 8002038:	f7ff fdb0 	bl	8001b9c <write_max_cmd>
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <HAL_MspInit+0x44>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	4a0e      	ldr	r2, [pc, #56]	; (8002088 <HAL_MspInit+0x44>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6193      	str	r3, [r2, #24]
 8002056:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <HAL_MspInit+0x44>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_MspInit+0x44>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4a08      	ldr	r2, [pc, #32]	; (8002088 <HAL_MspInit+0x44>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206c:	61d3      	str	r3, [r2, #28]
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_MspInit+0x44>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800207a:	2007      	movs	r0, #7
 800207c:	f000 fb3a 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40021000 	.word	0x40021000

0800208c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a17      	ldr	r2, [pc, #92]	; (8002108 <HAL_I2C_MspInit+0x7c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d128      	bne.n	8002100 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	4b17      	ldr	r3, [pc, #92]	; (800210c <HAL_I2C_MspInit+0x80>)
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	4a16      	ldr	r2, [pc, #88]	; (800210c <HAL_I2C_MspInit+0x80>)
 80020b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b8:	6153      	str	r3, [r2, #20]
 80020ba:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_I2C_MspInit+0x80>)
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020cc:	2312      	movs	r3, #18
 80020ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020d4:	2303      	movs	r3, #3
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020d8:	2304      	movs	r3, #4
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	480b      	ldr	r0, [pc, #44]	; (8002110 <HAL_I2C_MspInit+0x84>)
 80020e4:	f000 fb3a 	bl	800275c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_I2C_MspInit+0x80>)
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	4a07      	ldr	r2, [pc, #28]	; (800210c <HAL_I2C_MspInit+0x80>)
 80020ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020f2:	61d3      	str	r3, [r2, #28]
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_I2C_MspInit+0x80>)
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002100:	bf00      	nop
 8002102:	3728      	adds	r7, #40	; 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40005400 	.word	0x40005400
 800210c:	40021000 	.word	0x40021000
 8002110:	48000400 	.word	0x48000400

08002114 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <HAL_TIM_Base_MspInit+0x80>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d10c      	bne.n	8002140 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002126:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <HAL_TIM_Base_MspInit+0x84>)
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	4a1b      	ldr	r2, [pc, #108]	; (8002198 <HAL_TIM_Base_MspInit+0x84>)
 800212c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002130:	6193      	str	r3, [r2, #24]
 8002132:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_TIM_Base_MspInit+0x84>)
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800213e:	e022      	b.n	8002186 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002148:	d10c      	bne.n	8002164 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <HAL_TIM_Base_MspInit+0x84>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	4a12      	ldr	r2, [pc, #72]	; (8002198 <HAL_TIM_Base_MspInit+0x84>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	61d3      	str	r3, [r2, #28]
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <HAL_TIM_Base_MspInit+0x84>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]
}
 8002162:	e010      	b.n	8002186 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM15)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0c      	ldr	r2, [pc, #48]	; (800219c <HAL_TIM_Base_MspInit+0x88>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d10b      	bne.n	8002186 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_TIM_Base_MspInit+0x84>)
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	4a09      	ldr	r2, [pc, #36]	; (8002198 <HAL_TIM_Base_MspInit+0x84>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6193      	str	r3, [r2, #24]
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <HAL_TIM_Base_MspInit+0x84>)
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
}
 8002186:	bf00      	nop
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40012c00 	.word	0x40012c00
 8002198:	40021000 	.word	0x40021000
 800219c:	40014000 	.word	0x40014000

080021a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a11      	ldr	r2, [pc, #68]	; (8002204 <HAL_TIM_MspPostInit+0x64>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d11b      	bne.n	80021fa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_TIM_MspPostInit+0x68>)
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	4a10      	ldr	r2, [pc, #64]	; (8002208 <HAL_TIM_MspPostInit+0x68>)
 80021c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021cc:	6153      	str	r3, [r2, #20]
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <HAL_TIM_MspPostInit+0x68>)
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021da:	2301      	movs	r3, #1
 80021dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80021ea:	2302      	movs	r3, #2
 80021ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ee:	f107 030c 	add.w	r3, r7, #12
 80021f2:	4619      	mov	r1, r3
 80021f4:	4805      	ldr	r0, [pc, #20]	; (800220c <HAL_TIM_MspPostInit+0x6c>)
 80021f6:	f000 fab1 	bl	800275c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021fa:	bf00      	nop
 80021fc:	3720      	adds	r7, #32
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40012c00 	.word	0x40012c00
 8002208:	40021000 	.word	0x40021000
 800220c:	48000800 	.word	0x48000800

08002210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a17      	ldr	r2, [pc, #92]	; (800228c <HAL_UART_MspInit+0x7c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d128      	bne.n	8002284 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002232:	4b17      	ldr	r3, [pc, #92]	; (8002290 <HAL_UART_MspInit+0x80>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4a16      	ldr	r2, [pc, #88]	; (8002290 <HAL_UART_MspInit+0x80>)
 8002238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223c:	61d3      	str	r3, [r2, #28]
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <HAL_UART_MspInit+0x80>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_UART_MspInit+0x80>)
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	4a10      	ldr	r2, [pc, #64]	; (8002290 <HAL_UART_MspInit+0x80>)
 8002250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002254:	6153      	str	r3, [r2, #20]
 8002256:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_UART_MspInit+0x80>)
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002262:	230c      	movs	r3, #12
 8002264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002272:	2307      	movs	r3, #7
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002276:	f107 0314 	add.w	r3, r7, #20
 800227a:	4619      	mov	r1, r3
 800227c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002280:	f000 fa6c 	bl	800275c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002284:	bf00      	nop
 8002286:	3728      	adds	r7, #40	; 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40004400 	.word	0x40004400
 8002290:	40021000 	.word	0x40021000

08002294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <NMI_Handler+0x4>

0800229a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <HardFault_Handler+0x4>

080022a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <MemManage_Handler+0x4>

080022a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <BusFault_Handler+0x4>

080022ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <UsageFault_Handler+0x4>

080022b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e0:	f000 f912 	bl	8002508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <SystemInit+0x20>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <SystemInit+0x20>)
 80022f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <ultrasonic_init>:

#define timmer htim15 // reemplazan por el timmer que utilizen

extern TIM_HandleTypeDef timmer;

void ultrasonic_init(void) {
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&timmer);
 8002310:	4805      	ldr	r0, [pc, #20]	; (8002328 <ultrasonic_init+0x1c>)
 8002312:	f002 fc4f 	bl	8004bb4 <HAL_TIM_Base_Start>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // ponggo el trigger en bajo
 8002316:	2200      	movs	r2, #0
 8002318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800231c:	4803      	ldr	r0, [pc, #12]	; (800232c <ultrasonic_init+0x20>)
 800231e:	f000 fba7 	bl	8002a70 <HAL_GPIO_WritePin>
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000510 	.word	0x20000510
 800232c:	48000800 	.word	0x48000800

08002330 <ultrasonic_measure_distance>:


uint16_t ultrasonic_measure_distance(void) {
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
    uint32_t pMillis = HAL_GetTick();
 8002336:	f000 f8fb 	bl	8002530 <HAL_GetTick>
 800233a:	60f8      	str	r0, [r7, #12]
    uint32_t Value1 = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
    uint32_t Value2 = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	607b      	str	r3, [r7, #4]

    uint16_t Distance  = 0;  // cm*/
 8002344:	2300      	movs	r3, #0
 8002346:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pongo el trigger el alto
 8002348:	2201      	movs	r2, #1
 800234a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800234e:	4834      	ldr	r0, [pc, #208]	; (8002420 <ultrasonic_measure_distance+0xf0>)
 8002350:	f000 fb8e 	bl	8002a70 <HAL_GPIO_WritePin>
          __HAL_TIM_SET_COUNTER(&timmer, 0);
 8002354:	4b33      	ldr	r3, [pc, #204]	; (8002424 <ultrasonic_measure_distance+0xf4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2200      	movs	r2, #0
 800235a:	625a      	str	r2, [r3, #36]	; 0x24
          while (__HAL_TIM_GET_COUNTER (&timmer) < 10);  // espero 10 us
 800235c:	bf00      	nop
 800235e:	4b31      	ldr	r3, [pc, #196]	; (8002424 <ultrasonic_measure_distance+0xf4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	2b09      	cmp	r3, #9
 8002366:	d9fa      	bls.n	800235e <ultrasonic_measure_distance+0x2e>
          HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pongo el trigger en bajo nuevamente.
 8002368:	2200      	movs	r2, #0
 800236a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800236e:	482c      	ldr	r0, [pc, #176]	; (8002420 <ultrasonic_measure_distance+0xf0>)
 8002370:	f000 fb7e 	bl	8002a70 <HAL_GPIO_WritePin>

          pMillis = HAL_GetTick();
 8002374:	f000 f8dc 	bl	8002530 <HAL_GetTick>
 8002378:	60f8      	str	r0, [r7, #12]
          // espero que el ecco reciba el 1 del trigger
          while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 800237a:	bf00      	nop
 800237c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002380:	4827      	ldr	r0, [pc, #156]	; (8002420 <ultrasonic_measure_distance+0xf0>)
 8002382:	f000 fb5d 	bl	8002a40 <HAL_GPIO_ReadPin>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d107      	bne.n	800239c <ultrasonic_measure_distance+0x6c>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f103 040a 	add.w	r4, r3, #10
 8002392:	f000 f8cd 	bl	8002530 <HAL_GetTick>
 8002396:	4603      	mov	r3, r0
 8002398:	429c      	cmp	r4, r3
 800239a:	d8ef      	bhi.n	800237c <ultrasonic_measure_distance+0x4c>
          Value1 = __HAL_TIM_GET_COUNTER (&timmer);
 800239c:	4b21      	ldr	r3, [pc, #132]	; (8002424 <ultrasonic_measure_distance+0xf4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	60bb      	str	r3, [r7, #8]

          pMillis = HAL_GetTick();
 80023a4:	f000 f8c4 	bl	8002530 <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]
          // espero que el pin ecco este en bajo
          while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 80023aa:	bf00      	nop
 80023ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023b0:	481b      	ldr	r0, [pc, #108]	; (8002420 <ultrasonic_measure_distance+0xf0>)
 80023b2:	f000 fb45 	bl	8002a40 <HAL_GPIO_ReadPin>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d007      	beq.n	80023cc <ultrasonic_measure_distance+0x9c>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80023c2:	f000 f8b5 	bl	8002530 <HAL_GetTick>
 80023c6:	4603      	mov	r3, r0
 80023c8:	429c      	cmp	r4, r3
 80023ca:	d8ef      	bhi.n	80023ac <ultrasonic_measure_distance+0x7c>
          Value2 = __HAL_TIM_GET_COUNTER (&timmer);
 80023cc:	4b15      	ldr	r3, [pc, #84]	; (8002424 <ultrasonic_measure_distance+0xf4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	607b      	str	r3, [r7, #4]
          Distance = (Value2-Value1)* 0.034/2;
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe f836 	bl	800044c <__aeabi_ui2d>
 80023e0:	a30d      	add	r3, pc, #52	; (adr r3, 8002418 <ultrasonic_measure_distance+0xe8>)
 80023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e6:	f7fe f8ab 	bl	8000540 <__aeabi_dmul>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023fa:	f7fe f9cb 	bl	8000794 <__aeabi_ddiv>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	f7fe faad 	bl	8000964 <__aeabi_d2uiz>
 800240a:	4603      	mov	r3, r0
 800240c:	807b      	strh	r3, [r7, #2]

}
 800240e:	bf00      	nop
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	bd90      	pop	{r4, r7, pc}
 8002418:	b020c49c 	.word	0xb020c49c
 800241c:	3fa16872 	.word	0x3fa16872
 8002420:	48000800 	.word	0x48000800
 8002424:	20000510 	.word	0x20000510

08002428 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002460 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800242c:	f7ff ff5c 	bl	80022e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002430:	480c      	ldr	r0, [pc, #48]	; (8002464 <LoopForever+0x6>)
  ldr r1, =_edata
 8002432:	490d      	ldr	r1, [pc, #52]	; (8002468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002434:	4a0d      	ldr	r2, [pc, #52]	; (800246c <LoopForever+0xe>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002438:	e002      	b.n	8002440 <LoopCopyDataInit>

0800243a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800243c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800243e:	3304      	adds	r3, #4

08002440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002444:	d3f9      	bcc.n	800243a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002446:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002448:	4c0a      	ldr	r4, [pc, #40]	; (8002474 <LoopForever+0x16>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800244c:	e001      	b.n	8002452 <LoopFillZerobss>

0800244e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800244e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002450:	3204      	adds	r2, #4

08002452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002454:	d3fb      	bcc.n	800244e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002456:	f003 ff6b 	bl	8006330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800245a:	f7fe fec3 	bl	80011e4 <main>

0800245e <LoopForever>:

LoopForever:
    b LoopForever
 800245e:	e7fe      	b.n	800245e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002460:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002468:	20000408 	.word	0x20000408
  ldr r2, =_sidata
 800246c:	080064d8 	.word	0x080064d8
  ldr r2, =_sbss
 8002470:	20000408 	.word	0x20000408
  ldr r4, =_ebss
 8002474:	2000068c 	.word	0x2000068c

08002478 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002478:	e7fe      	b.n	8002478 <ADC1_IRQHandler>
	...

0800247c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <HAL_Init+0x28>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <HAL_Init+0x28>)
 8002486:	f043 0310 	orr.w	r3, r3, #16
 800248a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800248c:	2003      	movs	r0, #3
 800248e:	f000 f931 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002492:	2000      	movs	r0, #0
 8002494:	f000 f808 	bl	80024a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002498:	f7ff fdd4 	bl	8002044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40022000 	.word	0x40022000

080024a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_InitTick+0x54>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_InitTick+0x58>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	4619      	mov	r1, r3
 80024ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024be:	fbb3 f3f1 	udiv	r3, r3, r1
 80024c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f93b 	bl	8002742 <HAL_SYSTICK_Config>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00e      	b.n	80024f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b0f      	cmp	r3, #15
 80024da:	d80a      	bhi.n	80024f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024dc:	2200      	movs	r2, #0
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f000 f911 	bl	800270a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024e8:	4a06      	ldr	r2, [pc, #24]	; (8002504 <HAL_InitTick+0x5c>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	e000      	b.n	80024f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200003fc 	.word	0x200003fc
 8002500:	20000404 	.word	0x20000404
 8002504:	20000400 	.word	0x20000400

08002508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_IncTick+0x20>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_IncTick+0x24>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4413      	add	r3, r2
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_IncTick+0x24>)
 800251a:	6013      	str	r3, [r2, #0]
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000404 	.word	0x20000404
 800252c:	20000688 	.word	0x20000688

08002530 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return uwTick;  
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <HAL_GetTick+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000688 	.word	0x20000688

08002548 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002550:	f7ff ffee 	bl	8002530 <HAL_GetTick>
 8002554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d005      	beq.n	800256e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <HAL_Delay+0x44>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800256e:	bf00      	nop
 8002570:	f7ff ffde 	bl	8002530 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	429a      	cmp	r2, r3
 800257e:	d8f7      	bhi.n	8002570 <HAL_Delay+0x28>
  {
  }
}
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000404 	.word	0x20000404

08002590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025ac:	4013      	ands	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c2:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	60d3      	str	r3, [r2, #12]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025dc:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <__NVIC_GetPriorityGrouping+0x18>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	f003 0307 	and.w	r3, r3, #7
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	; (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c0:	d301      	bcc.n	80026c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00f      	b.n	80026e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <SysTick_Config+0x40>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ce:	210f      	movs	r1, #15
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f7ff ff8e 	bl	80025f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <SysTick_Config+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026de:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <SysTick_Config+0x40>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff47 	bl	8002590 <__NVIC_SetPriorityGrouping>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800271c:	f7ff ff5c 	bl	80025d8 <__NVIC_GetPriorityGrouping>
 8002720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	6978      	ldr	r0, [r7, #20]
 8002728:	f7ff ff8e 	bl	8002648 <NVIC_EncodePriority>
 800272c:	4602      	mov	r2, r0
 800272e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff5d 	bl	80025f4 <__NVIC_SetPriority>
}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff ffb0 	bl	80026b0 <SysTick_Config>
 8002750:	4603      	mov	r3, r0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276a:	e14e      	b.n	8002a0a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	2101      	movs	r1, #1
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	4013      	ands	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8140 	beq.w	8002a04 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d005      	beq.n	800279c <HAL_GPIO_Init+0x40>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d130      	bne.n	80027fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2203      	movs	r2, #3
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d2:	2201      	movs	r2, #1
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	f003 0201 	and.w	r2, r3, #1
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b03      	cmp	r3, #3
 8002808:	d017      	beq.n	800283a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d123      	bne.n	800288e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	08da      	lsrs	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3208      	adds	r2, #8
 800284e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002852:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	220f      	movs	r2, #15
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	08da      	lsrs	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3208      	adds	r2, #8
 8002888:	6939      	ldr	r1, [r7, #16]
 800288a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	2203      	movs	r2, #3
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0203 	and.w	r2, r3, #3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 809a 	beq.w	8002a04 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d0:	4b55      	ldr	r3, [pc, #340]	; (8002a28 <HAL_GPIO_Init+0x2cc>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	4a54      	ldr	r2, [pc, #336]	; (8002a28 <HAL_GPIO_Init+0x2cc>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6193      	str	r3, [r2, #24]
 80028dc:	4b52      	ldr	r3, [pc, #328]	; (8002a28 <HAL_GPIO_Init+0x2cc>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028e8:	4a50      	ldr	r2, [pc, #320]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	3302      	adds	r3, #2
 80028f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	220f      	movs	r2, #15
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002912:	d013      	beq.n	800293c <HAL_GPIO_Init+0x1e0>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a46      	ldr	r2, [pc, #280]	; (8002a30 <HAL_GPIO_Init+0x2d4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00d      	beq.n	8002938 <HAL_GPIO_Init+0x1dc>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a45      	ldr	r2, [pc, #276]	; (8002a34 <HAL_GPIO_Init+0x2d8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d007      	beq.n	8002934 <HAL_GPIO_Init+0x1d8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a44      	ldr	r2, [pc, #272]	; (8002a38 <HAL_GPIO_Init+0x2dc>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d101      	bne.n	8002930 <HAL_GPIO_Init+0x1d4>
 800292c:	2303      	movs	r3, #3
 800292e:	e006      	b.n	800293e <HAL_GPIO_Init+0x1e2>
 8002930:	2305      	movs	r3, #5
 8002932:	e004      	b.n	800293e <HAL_GPIO_Init+0x1e2>
 8002934:	2302      	movs	r3, #2
 8002936:	e002      	b.n	800293e <HAL_GPIO_Init+0x1e2>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <HAL_GPIO_Init+0x1e2>
 800293c:	2300      	movs	r3, #0
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	f002 0203 	and.w	r2, r2, #3
 8002944:	0092      	lsls	r2, r2, #2
 8002946:	4093      	lsls	r3, r2
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800294e:	4937      	ldr	r1, [pc, #220]	; (8002a2c <HAL_GPIO_Init+0x2d0>)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	3302      	adds	r3, #2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800295c:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <HAL_GPIO_Init+0x2e0>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	43db      	mvns	r3, r3
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4013      	ands	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002980:	4a2e      	ldr	r2, [pc, #184]	; (8002a3c <HAL_GPIO_Init+0x2e0>)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002986:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <HAL_GPIO_Init+0x2e0>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	43db      	mvns	r3, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029aa:	4a24      	ldr	r2, [pc, #144]	; (8002a3c <HAL_GPIO_Init+0x2e0>)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029b0:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <HAL_GPIO_Init+0x2e0>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029d4:	4a19      	ldr	r2, [pc, #100]	; (8002a3c <HAL_GPIO_Init+0x2e0>)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029da:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <HAL_GPIO_Init+0x2e0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029fe:	4a0f      	ldr	r2, [pc, #60]	; (8002a3c <HAL_GPIO_Init+0x2e0>)
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	3301      	adds	r3, #1
 8002a08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f47f aea9 	bne.w	800276c <HAL_GPIO_Init+0x10>
  }
}
 8002a1a:	bf00      	nop
 8002a1c:	bf00      	nop
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	48000400 	.word	0x48000400
 8002a34:	48000800 	.word	0x48000800
 8002a38:	48000c00 	.word	0x48000c00
 8002a3c:	40010400 	.word	0x40010400

08002a40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	887b      	ldrh	r3, [r7, #2]
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
 8002a5c:	e001      	b.n	8002a62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a80:	787b      	ldrb	r3, [r7, #1]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a8c:	e002      	b.n	8002a94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e081      	b.n	8002bb6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff fae0 	bl	800208c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2224      	movs	r2, #36	; 0x24
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002af0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d107      	bne.n	8002b1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	e006      	b.n	8002b28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d104      	bne.n	8002b3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69d9      	ldr	r1, [r3, #28]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1a      	ldr	r2, [r3, #32]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	460b      	mov	r3, r1
 8002bce:	817b      	strh	r3, [r7, #10]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	f040 80da 	bne.w	8002d96 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_I2C_Master_Transmit+0x30>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e0d3      	b.n	8002d98 <HAL_I2C_Master_Transmit+0x1d8>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bf8:	f7ff fc9a 	bl	8002530 <HAL_GetTick>
 8002bfc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	2319      	movs	r3, #25
 8002c04:	2201      	movs	r2, #1
 8002c06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f8f0 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e0be      	b.n	8002d98 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2221      	movs	r2, #33	; 0x21
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2210      	movs	r2, #16
 8002c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	893a      	ldrh	r2, [r7, #8]
 8002c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2bff      	cmp	r3, #255	; 0xff
 8002c4a:	d90e      	bls.n	8002c6a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	22ff      	movs	r2, #255	; 0xff
 8002c50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	8979      	ldrh	r1, [r7, #10]
 8002c5a:	4b51      	ldr	r3, [pc, #324]	; (8002da0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fa7e 	bl	8003164 <I2C_TransferConfig>
 8002c68:	e06c      	b.n	8002d44 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	8979      	ldrh	r1, [r7, #10]
 8002c7c:	4b48      	ldr	r3, [pc, #288]	; (8002da0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 fa6d 	bl	8003164 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c8a:	e05b      	b.n	8002d44 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	6a39      	ldr	r1, [r7, #32]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f8fc 	bl	8002e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e07b      	b.n	8002d98 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d034      	beq.n	8002d44 <HAL_I2C_Master_Transmit+0x184>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d130      	bne.n	8002d44 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2180      	movs	r1, #128	; 0x80
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f87f 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e04d      	b.n	8002d98 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2bff      	cmp	r3, #255	; 0xff
 8002d04:	d90e      	bls.n	8002d24 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	22ff      	movs	r2, #255	; 0xff
 8002d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	8979      	ldrh	r1, [r7, #10]
 8002d14:	2300      	movs	r3, #0
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fa21 	bl	8003164 <I2C_TransferConfig>
 8002d22:	e00f      	b.n	8002d44 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	8979      	ldrh	r1, [r7, #10]
 8002d36:	2300      	movs	r3, #0
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 fa10 	bl	8003164 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d19e      	bne.n	8002c8c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	6a39      	ldr	r1, [r7, #32]
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f8e2 	bl	8002f1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e01a      	b.n	8002d98 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2220      	movs	r2, #32
 8002d68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d76:	400b      	ands	r3, r1
 8002d78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e000      	b.n	8002d98 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d96:	2302      	movs	r3, #2
  }
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	80002000 	.word	0x80002000
 8002da4:	fe00e800 	.word	0xfe00e800

08002da8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d103      	bne.n	8002dc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d007      	beq.n	8002de4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	619a      	str	r2, [r3, #24]
  }
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e00:	e031      	b.n	8002e66 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e08:	d02d      	beq.n	8002e66 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0a:	f7ff fb91 	bl	8002530 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d302      	bcc.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d122      	bne.n	8002e66 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d113      	bne.n	8002e66 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	f043 0220 	orr.w	r2, r3, #32
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e00f      	b.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699a      	ldr	r2, [r3, #24]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	bf0c      	ite	eq
 8002e76:	2301      	moveq	r3, #1
 8002e78:	2300      	movne	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d0be      	beq.n	8002e02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e9a:	e033      	b.n	8002f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f87f 	bl	8002fa4 <I2C_IsErrorOccurred>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e031      	b.n	8002f14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb6:	d025      	beq.n	8002f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb8:	f7ff fb3a 	bl	8002530 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d302      	bcc.n	8002ece <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d11a      	bne.n	8002f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d013      	beq.n	8002f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e007      	b.n	8002f14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d1c4      	bne.n	8002e9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f28:	e02f      	b.n	8002f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 f838 	bl	8002fa4 <I2C_IsErrorOccurred>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e02d      	b.n	8002f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3e:	f7ff faf7 	bl	8002530 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d302      	bcc.n	8002f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d11a      	bne.n	8002f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d013      	beq.n	8002f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	f043 0220 	orr.w	r2, r3, #32
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e007      	b.n	8002f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d1c8      	bne.n	8002f2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	; 0x28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d068      	beq.n	80030a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fd8:	e049      	b.n	800306e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe0:	d045      	beq.n	800306e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fe2:	f7ff faa5 	bl	8002530 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <I2C_IsErrorOccurred+0x54>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d13a      	bne.n	800306e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003002:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800300a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301a:	d121      	bne.n	8003060 <I2C_IsErrorOccurred+0xbc>
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003022:	d01d      	beq.n	8003060 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	2b20      	cmp	r3, #32
 8003028:	d01a      	beq.n	8003060 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003038:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800303a:	f7ff fa79 	bl	8002530 <HAL_GetTick>
 800303e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003040:	e00e      	b.n	8003060 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003042:	f7ff fa75 	bl	8002530 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b19      	cmp	r3, #25
 800304e:	d907      	bls.n	8003060 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	f043 0320 	orr.w	r3, r3, #32
 8003056:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800305e:	e006      	b.n	800306e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b20      	cmp	r3, #32
 800306c:	d1e9      	bne.n	8003042 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b20      	cmp	r3, #32
 800307a:	d003      	beq.n	8003084 <I2C_IsErrorOccurred+0xe0>
 800307c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0aa      	beq.n	8002fda <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2220      	movs	r2, #32
 8003092:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	f043 0304 	orr.w	r3, r3, #4
 800309a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00b      	beq.n	80030cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00b      	beq.n	8003110 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	f043 0302 	orr.w	r3, r3, #2
 80030fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003108:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01c      	beq.n	8003152 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f7ff fe45 	bl	8002da8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <I2C_IsErrorOccurred+0x1bc>)
 800312a:	400b      	ands	r3, r1
 800312c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	431a      	orrs	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003156:	4618      	mov	r0, r3
 8003158:	3728      	adds	r7, #40	; 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	fe00e800 	.word	0xfe00e800

08003164 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	817b      	strh	r3, [r7, #10]
 8003172:	4613      	mov	r3, r2
 8003174:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003176:	897b      	ldrh	r3, [r7, #10]
 8003178:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800317c:	7a7b      	ldrb	r3, [r7, #9]
 800317e:	041b      	lsls	r3, r3, #16
 8003180:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003184:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	4313      	orrs	r3, r2
 800318e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003192:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	0d5b      	lsrs	r3, r3, #21
 800319e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <I2C_TransferConfig+0x60>)
 80031a4:	430b      	orrs	r3, r1
 80031a6:	43db      	mvns	r3, r3
 80031a8:	ea02 0103 	and.w	r1, r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	03ff63ff 	.word	0x03ff63ff

080031c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b20      	cmp	r3, #32
 80031dc:	d138      	bne.n	8003250 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e032      	b.n	8003252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2224      	movs	r2, #36	; 0x24
 80031f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800321a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6819      	ldr	r1, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	e000      	b.n	8003252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003250:	2302      	movs	r3, #2
  }
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800325e:	b480      	push	{r7}
 8003260:	b085      	sub	sp, #20
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b20      	cmp	r3, #32
 8003272:	d139      	bne.n	80032e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800327e:	2302      	movs	r3, #2
 8003280:	e033      	b.n	80032ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2224      	movs	r2, #36	; 0x24
 800328e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e000      	b.n	80032ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032e8:	2302      	movs	r3, #2
  }
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80032fe:	af00      	add	r7, sp, #0
 8003300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003304:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003308:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800330a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	f001 b823 	b.w	8004364 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003322:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 817d 	beq.w	800362e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003334:	4bbc      	ldr	r3, [pc, #752]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 030c 	and.w	r3, r3, #12
 800333c:	2b04      	cmp	r3, #4
 800333e:	d00c      	beq.n	800335a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003340:	4bb9      	ldr	r3, [pc, #740]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 030c 	and.w	r3, r3, #12
 8003348:	2b08      	cmp	r3, #8
 800334a:	d15c      	bne.n	8003406 <HAL_RCC_OscConfig+0x10e>
 800334c:	4bb6      	ldr	r3, [pc, #728]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003358:	d155      	bne.n	8003406 <HAL_RCC_OscConfig+0x10e>
 800335a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800335e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003366:	fa93 f3a3 	rbit	r3, r3
 800336a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800336e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b01      	cmp	r3, #1
 8003384:	d102      	bne.n	800338c <HAL_RCC_OscConfig+0x94>
 8003386:	4ba8      	ldr	r3, [pc, #672]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	e015      	b.n	80033b8 <HAL_RCC_OscConfig+0xc0>
 800338c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003390:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80033a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033a4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80033a8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80033b4:	4b9c      	ldr	r3, [pc, #624]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033bc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80033c0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80033c4:	fa92 f2a2 	rbit	r2, r2
 80033c8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80033cc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80033d0:	fab2 f282 	clz	r2, r2
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	f042 0220 	orr.w	r2, r2, #32
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	f002 021f 	and.w	r2, r2, #31
 80033e0:	2101      	movs	r1, #1
 80033e2:	fa01 f202 	lsl.w	r2, r1, r2
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 811f 	beq.w	800362c <HAL_RCC_OscConfig+0x334>
 80033ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f040 8116 	bne.w	800362c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f000 bfaf 	b.w	8004364 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003416:	d106      	bne.n	8003426 <HAL_RCC_OscConfig+0x12e>
 8003418:	4b83      	ldr	r3, [pc, #524]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a82      	ldr	r2, [pc, #520]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 800341e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	e036      	b.n	8003494 <HAL_RCC_OscConfig+0x19c>
 8003426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x158>
 8003436:	4b7c      	ldr	r3, [pc, #496]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7b      	ldr	r2, [pc, #492]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 800343c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b79      	ldr	r3, [pc, #484]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a78      	ldr	r2, [pc, #480]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 8003448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e021      	b.n	8003494 <HAL_RCC_OscConfig+0x19c>
 8003450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003454:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003460:	d10c      	bne.n	800347c <HAL_RCC_OscConfig+0x184>
 8003462:	4b71      	ldr	r3, [pc, #452]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a70      	ldr	r2, [pc, #448]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 8003468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4b6e      	ldr	r3, [pc, #440]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a6d      	ldr	r2, [pc, #436]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	e00b      	b.n	8003494 <HAL_RCC_OscConfig+0x19c>
 800347c:	4b6a      	ldr	r3, [pc, #424]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a69      	ldr	r2, [pc, #420]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b67      	ldr	r3, [pc, #412]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a66      	ldr	r2, [pc, #408]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 800348e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003492:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003494:	4b64      	ldr	r3, [pc, #400]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	f023 020f 	bic.w	r2, r3, #15
 800349c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	495f      	ldr	r1, [pc, #380]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d059      	beq.n	8003572 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034be:	f7ff f837 	bl	8002530 <HAL_GetTick>
 80034c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	e00a      	b.n	80034de <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c8:	f7ff f832 	bl	8002530 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b64      	cmp	r3, #100	; 0x64
 80034d6:	d902      	bls.n	80034de <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	f000 bf43 	b.w	8004364 <HAL_RCC_OscConfig+0x106c>
 80034de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034e2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80034f2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d102      	bne.n	8003510 <HAL_RCC_OscConfig+0x218>
 800350a:	4b47      	ldr	r3, [pc, #284]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	e015      	b.n	800353c <HAL_RCC_OscConfig+0x244>
 8003510:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003514:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800351c:	fa93 f3a3 	rbit	r3, r3
 8003520:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003528:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800352c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003538:	4b3b      	ldr	r3, [pc, #236]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003540:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003544:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003548:	fa92 f2a2 	rbit	r2, r2
 800354c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003550:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003554:	fab2 f282 	clz	r2, r2
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	f042 0220 	orr.w	r2, r2, #32
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	f002 021f 	and.w	r2, r2, #31
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f202 	lsl.w	r2, r1, r2
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0ab      	beq.n	80034c8 <HAL_RCC_OscConfig+0x1d0>
 8003570:	e05d      	b.n	800362e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003572:	f7fe ffdd 	bl	8002530 <HAL_GetTick>
 8003576:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357a:	e00a      	b.n	8003592 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800357c:	f7fe ffd8 	bl	8002530 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b64      	cmp	r3, #100	; 0x64
 800358a:	d902      	bls.n	8003592 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	f000 bee9 	b.w	8004364 <HAL_RCC_OscConfig+0x106c>
 8003592:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003596:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800359e:	fa93 f3a3 	rbit	r3, r3
 80035a2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80035a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035aa:	fab3 f383 	clz	r3, r3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	095b      	lsrs	r3, r3, #5
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d102      	bne.n	80035c4 <HAL_RCC_OscConfig+0x2cc>
 80035be:	4b1a      	ldr	r3, [pc, #104]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	e015      	b.n	80035f0 <HAL_RCC_OscConfig+0x2f8>
 80035c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035c8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80035d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035dc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80035e0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80035ec:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <HAL_RCC_OscConfig+0x330>)
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035f4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80035f8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80035fc:	fa92 f2a2 	rbit	r2, r2
 8003600:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003604:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003608:	fab2 f282 	clz	r2, r2
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	f042 0220 	orr.w	r2, r2, #32
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	f002 021f 	and.w	r2, r2, #31
 8003618:	2101      	movs	r1, #1
 800361a:	fa01 f202 	lsl.w	r2, r1, r2
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1ab      	bne.n	800357c <HAL_RCC_OscConfig+0x284>
 8003624:	e003      	b.n	800362e <HAL_RCC_OscConfig+0x336>
 8003626:	bf00      	nop
 8003628:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800362e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 817d 	beq.w	800393e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003644:	4ba6      	ldr	r3, [pc, #664]	; (80038e0 <HAL_RCC_OscConfig+0x5e8>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00b      	beq.n	8003668 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003650:	4ba3      	ldr	r3, [pc, #652]	; (80038e0 <HAL_RCC_OscConfig+0x5e8>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 030c 	and.w	r3, r3, #12
 8003658:	2b08      	cmp	r3, #8
 800365a:	d172      	bne.n	8003742 <HAL_RCC_OscConfig+0x44a>
 800365c:	4ba0      	ldr	r3, [pc, #640]	; (80038e0 <HAL_RCC_OscConfig+0x5e8>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d16c      	bne.n	8003742 <HAL_RCC_OscConfig+0x44a>
 8003668:	2302      	movs	r3, #2
 800366a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800367a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367e:	fab3 f383 	clz	r3, r3
 8003682:	b2db      	uxtb	r3, r3
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d102      	bne.n	8003698 <HAL_RCC_OscConfig+0x3a0>
 8003692:	4b93      	ldr	r3, [pc, #588]	; (80038e0 <HAL_RCC_OscConfig+0x5e8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	e013      	b.n	80036c0 <HAL_RCC_OscConfig+0x3c8>
 8003698:	2302      	movs	r3, #2
 800369a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80036a2:	fa93 f3a3 	rbit	r3, r3
 80036a6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80036aa:	2302      	movs	r3, #2
 80036ac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80036b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80036bc:	4b88      	ldr	r3, [pc, #544]	; (80038e0 <HAL_RCC_OscConfig+0x5e8>)
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	2202      	movs	r2, #2
 80036c2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80036c6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80036ca:	fa92 f2a2 	rbit	r2, r2
 80036ce:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80036d2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80036d6:	fab2 f282 	clz	r2, r2
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	f042 0220 	orr.w	r2, r2, #32
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	f002 021f 	and.w	r2, r2, #31
 80036e6:	2101      	movs	r1, #1
 80036e8:	fa01 f202 	lsl.w	r2, r1, r2
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_RCC_OscConfig+0x410>
 80036f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d002      	beq.n	8003708 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f000 be2e 	b.w	8004364 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003708:	4b75      	ldr	r3, [pc, #468]	; (80038e0 <HAL_RCC_OscConfig+0x5e8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003714:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	21f8      	movs	r1, #248	; 0xf8
 800371e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003726:	fa91 f1a1 	rbit	r1, r1
 800372a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800372e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003732:	fab1 f181 	clz	r1, r1
 8003736:	b2c9      	uxtb	r1, r1
 8003738:	408b      	lsls	r3, r1
 800373a:	4969      	ldr	r1, [pc, #420]	; (80038e0 <HAL_RCC_OscConfig+0x5e8>)
 800373c:	4313      	orrs	r3, r2
 800373e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003740:	e0fd      	b.n	800393e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003746:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 8088 	beq.w	8003864 <HAL_RCC_OscConfig+0x56c>
 8003754:	2301      	movs	r3, #1
 8003756:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003766:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003774:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	461a      	mov	r2, r3
 800377c:	2301      	movs	r3, #1
 800377e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7fe fed6 	bl	8002530 <HAL_GetTick>
 8003784:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800378a:	f7fe fed1 	bl	8002530 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d902      	bls.n	80037a0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	f000 bde2 	b.w	8004364 <HAL_RCC_OscConfig+0x106c>
 80037a0:	2302      	movs	r3, #2
 80037a2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80037aa:	fa93 f3a3 	rbit	r3, r3
 80037ae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80037b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d102      	bne.n	80037d0 <HAL_RCC_OscConfig+0x4d8>
 80037ca:	4b45      	ldr	r3, [pc, #276]	; (80038e0 <HAL_RCC_OscConfig+0x5e8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	e013      	b.n	80037f8 <HAL_RCC_OscConfig+0x500>
 80037d0:	2302      	movs	r3, #2
 80037d2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80037e2:	2302      	movs	r3, #2
 80037e4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80037e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80037f4:	4b3a      	ldr	r3, [pc, #232]	; (80038e0 <HAL_RCC_OscConfig+0x5e8>)
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	2202      	movs	r2, #2
 80037fa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80037fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003802:	fa92 f2a2 	rbit	r2, r2
 8003806:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800380a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800380e:	fab2 f282 	clz	r2, r2
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	f042 0220 	orr.w	r2, r2, #32
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	f002 021f 	and.w	r2, r2, #31
 800381e:	2101      	movs	r1, #1
 8003820:	fa01 f202 	lsl.w	r2, r1, r2
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0af      	beq.n	800378a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382a:	4b2d      	ldr	r3, [pc, #180]	; (80038e0 <HAL_RCC_OscConfig+0x5e8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003836:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	21f8      	movs	r1, #248	; 0xf8
 8003840:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003848:	fa91 f1a1 	rbit	r1, r1
 800384c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003850:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003854:	fab1 f181 	clz	r1, r1
 8003858:	b2c9      	uxtb	r1, r1
 800385a:	408b      	lsls	r3, r1
 800385c:	4920      	ldr	r1, [pc, #128]	; (80038e0 <HAL_RCC_OscConfig+0x5e8>)
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]
 8003862:	e06c      	b.n	800393e <HAL_RCC_OscConfig+0x646>
 8003864:	2301      	movs	r3, #1
 8003866:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003876:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003884:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	461a      	mov	r2, r3
 800388c:	2300      	movs	r3, #0
 800388e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fe fe4e 	bl	8002530 <HAL_GetTick>
 8003894:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800389a:	f7fe fe49 	bl	8002530 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d902      	bls.n	80038b0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	f000 bd5a 	b.w	8004364 <HAL_RCC_OscConfig+0x106c>
 80038b0:	2302      	movs	r3, #2
 80038b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80038c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c6:	fab3 f383 	clz	r3, r3
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d104      	bne.n	80038e4 <HAL_RCC_OscConfig+0x5ec>
 80038da:	4b01      	ldr	r3, [pc, #4]	; (80038e0 <HAL_RCC_OscConfig+0x5e8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	e015      	b.n	800390c <HAL_RCC_OscConfig+0x614>
 80038e0:	40021000 	.word	0x40021000
 80038e4:	2302      	movs	r3, #2
 80038e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80038f6:	2302      	movs	r3, #2
 80038f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80038fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003900:	fa93 f3a3 	rbit	r3, r3
 8003904:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003908:	4bc8      	ldr	r3, [pc, #800]	; (8003c2c <HAL_RCC_OscConfig+0x934>)
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	2202      	movs	r2, #2
 800390e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003912:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003916:	fa92 f2a2 	rbit	r2, r2
 800391a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800391e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003922:	fab2 f282 	clz	r2, r2
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	f042 0220 	orr.w	r2, r2, #32
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	f002 021f 	and.w	r2, r2, #31
 8003932:	2101      	movs	r1, #1
 8003934:	fa01 f202 	lsl.w	r2, r1, r2
 8003938:	4013      	ands	r3, r2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1ad      	bne.n	800389a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 8110 	beq.w	8003b74 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003958:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d079      	beq.n	8003a58 <HAL_RCC_OscConfig+0x760>
 8003964:	2301      	movs	r3, #1
 8003966:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397a:	fab3 f383 	clz	r3, r3
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	4bab      	ldr	r3, [pc, #684]	; (8003c30 <HAL_RCC_OscConfig+0x938>)
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	461a      	mov	r2, r3
 800398a:	2301      	movs	r3, #1
 800398c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398e:	f7fe fdcf 	bl	8002530 <HAL_GetTick>
 8003992:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003996:	e00a      	b.n	80039ae <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003998:	f7fe fdca 	bl	8002530 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d902      	bls.n	80039ae <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	f000 bcdb 	b.w	8004364 <HAL_RCC_OscConfig+0x106c>
 80039ae:	2302      	movs	r3, #2
 80039b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039b8:	fa93 f3a3 	rbit	r3, r3
 80039bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80039c8:	2202      	movs	r2, #2
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	fa93 f2a3 	rbit	r2, r3
 80039da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039ec:	2202      	movs	r2, #2
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	fa93 f2a3 	rbit	r2, r3
 80039fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a06:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a08:	4b88      	ldr	r3, [pc, #544]	; (8003c2c <HAL_RCC_OscConfig+0x934>)
 8003a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003a14:	2102      	movs	r1, #2
 8003a16:	6019      	str	r1, [r3, #0]
 8003a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	fa93 f1a3 	rbit	r1, r3
 8003a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003a2e:	6019      	str	r1, [r3, #0]
  return result;
 8003a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	fab3 f383 	clz	r3, r3
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0a0      	beq.n	8003998 <HAL_RCC_OscConfig+0x6a0>
 8003a56:	e08d      	b.n	8003b74 <HAL_RCC_OscConfig+0x87c>
 8003a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a60:	2201      	movs	r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	fa93 f2a3 	rbit	r2, r3
 8003a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a76:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a7a:	601a      	str	r2, [r3, #0]
  return result;
 8003a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a80:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a84:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4b68      	ldr	r3, [pc, #416]	; (8003c30 <HAL_RCC_OscConfig+0x938>)
 8003a90:	4413      	add	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	461a      	mov	r2, r3
 8003a96:	2300      	movs	r3, #0
 8003a98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fe fd49 	bl	8002530 <HAL_GetTick>
 8003a9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa4:	f7fe fd44 	bl	8002530 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d902      	bls.n	8003aba <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	f000 bc55 	b.w	8004364 <HAL_RCC_OscConfig+0x106c>
 8003aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003abe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	fa93 f2a3 	rbit	r2, r3
 8003ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	fa93 f2a3 	rbit	r2, r3
 8003af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	fa93 f2a3 	rbit	r2, r3
 8003b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b20:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003b24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b26:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <HAL_RCC_OscConfig+0x934>)
 8003b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003b32:	2102      	movs	r1, #2
 8003b34:	6019      	str	r1, [r3, #0]
 8003b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	fa93 f1a3 	rbit	r1, r3
 8003b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003b4c:	6019      	str	r1, [r3, #0]
  return result;
 8003b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b52:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	fab3 f383 	clz	r3, r3
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	2101      	movs	r1, #1
 8003b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d197      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 81a1 	beq.w	8003ecc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b90:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <HAL_RCC_OscConfig+0x934>)
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d116      	bne.n	8003bca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9c:	4b23      	ldr	r3, [pc, #140]	; (8003c2c <HAL_RCC_OscConfig+0x934>)
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	4a22      	ldr	r2, [pc, #136]	; (8003c2c <HAL_RCC_OscConfig+0x934>)
 8003ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	61d3      	str	r3, [r2, #28]
 8003ba8:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <HAL_RCC_OscConfig+0x934>)
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bbe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003bc2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bca:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <HAL_RCC_OscConfig+0x93c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d11a      	bne.n	8003c0c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bd6:	4b17      	ldr	r3, [pc, #92]	; (8003c34 <HAL_RCC_OscConfig+0x93c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a16      	ldr	r2, [pc, #88]	; (8003c34 <HAL_RCC_OscConfig+0x93c>)
 8003bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be2:	f7fe fca5 	bl	8002530 <HAL_GetTick>
 8003be6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bea:	e009      	b.n	8003c00 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bec:	f7fe fca0 	bl	8002530 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b64      	cmp	r3, #100	; 0x64
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e3b1      	b.n	8004364 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <HAL_RCC_OscConfig+0x93c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0ef      	beq.n	8003bec <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d10d      	bne.n	8003c38 <HAL_RCC_OscConfig+0x940>
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <HAL_RCC_OscConfig+0x934>)
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	4a02      	ldr	r2, [pc, #8]	; (8003c2c <HAL_RCC_OscConfig+0x934>)
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	6213      	str	r3, [r2, #32]
 8003c28:	e03c      	b.n	8003ca4 <HAL_RCC_OscConfig+0x9ac>
 8003c2a:	bf00      	nop
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	10908120 	.word	0x10908120
 8003c34:	40007000 	.word	0x40007000
 8003c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10c      	bne.n	8003c62 <HAL_RCC_OscConfig+0x96a>
 8003c48:	4bc1      	ldr	r3, [pc, #772]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	4ac0      	ldr	r2, [pc, #768]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	6213      	str	r3, [r2, #32]
 8003c54:	4bbe      	ldr	r3, [pc, #760]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	4abd      	ldr	r2, [pc, #756]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003c5a:	f023 0304 	bic.w	r3, r3, #4
 8003c5e:	6213      	str	r3, [r2, #32]
 8003c60:	e020      	b.n	8003ca4 <HAL_RCC_OscConfig+0x9ac>
 8003c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b05      	cmp	r3, #5
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x994>
 8003c72:	4bb7      	ldr	r3, [pc, #732]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	4ab6      	ldr	r2, [pc, #728]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003c78:	f043 0304 	orr.w	r3, r3, #4
 8003c7c:	6213      	str	r3, [r2, #32]
 8003c7e:	4bb4      	ldr	r3, [pc, #720]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4ab3      	ldr	r2, [pc, #716]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	6213      	str	r3, [r2, #32]
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0x9ac>
 8003c8c:	4bb0      	ldr	r3, [pc, #704]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	4aaf      	ldr	r2, [pc, #700]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	6213      	str	r3, [r2, #32]
 8003c98:	4bad      	ldr	r3, [pc, #692]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	4aac      	ldr	r2, [pc, #688]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003c9e:	f023 0304 	bic.w	r3, r3, #4
 8003ca2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8081 	beq.w	8003db8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb6:	f7fe fc3b 	bl	8002530 <HAL_GetTick>
 8003cba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbe:	e00b      	b.n	8003cd8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fe fc36 	bl	8002530 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e345      	b.n	8004364 <HAL_RCC_OscConfig+0x106c>
 8003cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cdc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	fa93 f2a3 	rbit	r2, r3
 8003cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d00:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003d04:	2202      	movs	r2, #2
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	fa93 f2a3 	rbit	r2, r3
 8003d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d1a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003d1e:	601a      	str	r2, [r3, #0]
  return result;
 8003d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d24:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003d28:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2a:	fab3 f383 	clz	r3, r3
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f043 0302 	orr.w	r3, r3, #2
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d102      	bne.n	8003d44 <HAL_RCC_OscConfig+0xa4c>
 8003d3e:	4b84      	ldr	r3, [pc, #528]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	e013      	b.n	8003d6c <HAL_RCC_OscConfig+0xa74>
 8003d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d48:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d54:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	fa93 f2a3 	rbit	r2, r3
 8003d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d62:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	4b79      	ldr	r3, [pc, #484]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d70:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003d74:	2102      	movs	r1, #2
 8003d76:	6011      	str	r1, [r2, #0]
 8003d78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d7c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	fa92 f1a2 	rbit	r1, r2
 8003d86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d8a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d8e:	6011      	str	r1, [r2, #0]
  return result;
 8003d90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d94:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	fab2 f282 	clz	r2, r2
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	f002 021f 	and.w	r2, r2, #31
 8003daa:	2101      	movs	r1, #1
 8003dac:	fa01 f202 	lsl.w	r2, r1, r2
 8003db0:	4013      	ands	r3, r2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d084      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x9c8>
 8003db6:	e07f      	b.n	8003eb8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db8:	f7fe fbba 	bl	8002530 <HAL_GetTick>
 8003dbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc0:	e00b      	b.n	8003dda <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fe fbb5 	bl	8002530 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e2c4      	b.n	8004364 <HAL_RCC_OscConfig+0x106c>
 8003dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dde:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003de2:	2202      	movs	r2, #2
 8003de4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	fa93 f2a3 	rbit	r2, r3
 8003df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e02:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003e06:	2202      	movs	r2, #2
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e0e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	fa93 f2a3 	rbit	r2, r3
 8003e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003e20:	601a      	str	r2, [r3, #0]
  return result;
 8003e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e26:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003e2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e2c:	fab3 f383 	clz	r3, r3
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	f043 0302 	orr.w	r3, r3, #2
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d102      	bne.n	8003e46 <HAL_RCC_OscConfig+0xb4e>
 8003e40:	4b43      	ldr	r3, [pc, #268]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	e013      	b.n	8003e6e <HAL_RCC_OscConfig+0xb76>
 8003e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e4a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003e4e:	2202      	movs	r2, #2
 8003e50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e56:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	fa93 f2a3 	rbit	r2, r3
 8003e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e64:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	4b39      	ldr	r3, [pc, #228]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e72:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003e76:	2102      	movs	r1, #2
 8003e78:	6011      	str	r1, [r2, #0]
 8003e7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e7e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	fa92 f1a2 	rbit	r1, r2
 8003e88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e8c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e90:	6011      	str	r1, [r2, #0]
  return result;
 8003e92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e96:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	fab2 f282 	clz	r2, r2
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	f002 021f 	and.w	r2, r2, #31
 8003eac:	2101      	movs	r1, #1
 8003eae:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d184      	bne.n	8003dc2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003eb8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d105      	bne.n	8003ecc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec0:	4b23      	ldr	r3, [pc, #140]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	4a22      	ldr	r2, [pc, #136]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8242 	beq.w	8004362 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ede:	4b1c      	ldr	r3, [pc, #112]	; (8003f50 <HAL_RCC_OscConfig+0xc58>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	f000 8213 	beq.w	8004312 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	f040 8162 	bne.w	80041c2 <HAL_RCC_OscConfig+0xeca>
 8003efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f02:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003f06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f10:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	fa93 f2a3 	rbit	r2, r3
 8003f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003f22:	601a      	str	r2, [r3, #0]
  return result;
 8003f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f28:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003f2c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2300      	movs	r3, #0
 8003f42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fe faf4 	bl	8002530 <HAL_GetTick>
 8003f48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f4c:	e00c      	b.n	8003f68 <HAL_RCC_OscConfig+0xc70>
 8003f4e:	bf00      	nop
 8003f50:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fe faec 	bl	8002530 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e1fd      	b.n	8004364 <HAL_RCC_OscConfig+0x106c>
 8003f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003f70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	fa93 f2a3 	rbit	r2, r3
 8003f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f88:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f8c:	601a      	str	r2, [r3, #0]
  return result;
 8003f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f92:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f98:	fab3 f383 	clz	r3, r3
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d102      	bne.n	8003fb2 <HAL_RCC_OscConfig+0xcba>
 8003fac:	4bb0      	ldr	r3, [pc, #704]	; (8004270 <HAL_RCC_OscConfig+0xf78>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	e027      	b.n	8004002 <HAL_RCC_OscConfig+0xd0a>
 8003fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003fba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	fa93 f2a3 	rbit	r2, r3
 8003fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fdc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003fe0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fea:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	fa93 f2a3 	rbit	r2, r3
 8003ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	4b9c      	ldr	r3, [pc, #624]	; (8004270 <HAL_RCC_OscConfig+0xf78>)
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004006:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800400a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800400e:	6011      	str	r1, [r2, #0]
 8004010:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004014:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	fa92 f1a2 	rbit	r1, r2
 800401e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004022:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004026:	6011      	str	r1, [r2, #0]
  return result;
 8004028:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800402c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	fab2 f282 	clz	r2, r2
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	f042 0220 	orr.w	r2, r2, #32
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	f002 021f 	and.w	r2, r2, #31
 8004042:	2101      	movs	r1, #1
 8004044:	fa01 f202 	lsl.w	r2, r1, r2
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d182      	bne.n	8003f54 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800404e:	4b88      	ldr	r3, [pc, #544]	; (8004270 <HAL_RCC_OscConfig+0xf78>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	430b      	orrs	r3, r1
 8004070:	497f      	ldr	r1, [pc, #508]	; (8004270 <HAL_RCC_OscConfig+0xf78>)
 8004072:	4313      	orrs	r3, r2
 8004074:	604b      	str	r3, [r1, #4]
 8004076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800407e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004082:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004088:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	fa93 f2a3 	rbit	r2, r3
 8004092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004096:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800409a:	601a      	str	r2, [r3, #0]
  return result;
 800409c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80040a4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040a6:	fab3 f383 	clz	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	461a      	mov	r2, r3
 80040b8:	2301      	movs	r3, #1
 80040ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040bc:	f7fe fa38 	bl	8002530 <HAL_GetTick>
 80040c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040c4:	e009      	b.n	80040da <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c6:	f7fe fa33 	bl	8002530 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e144      	b.n	8004364 <HAL_RCC_OscConfig+0x106c>
 80040da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040de:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80040e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ec:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	fa93 f2a3 	rbit	r2, r3
 80040f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80040fe:	601a      	str	r2, [r3, #0]
  return result;
 8004100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004104:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004108:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800410a:	fab3 f383 	clz	r3, r3
 800410e:	b2db      	uxtb	r3, r3
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	b2db      	uxtb	r3, r3
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b01      	cmp	r3, #1
 800411c:	d102      	bne.n	8004124 <HAL_RCC_OscConfig+0xe2c>
 800411e:	4b54      	ldr	r3, [pc, #336]	; (8004270 <HAL_RCC_OscConfig+0xf78>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	e027      	b.n	8004174 <HAL_RCC_OscConfig+0xe7c>
 8004124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004128:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800412c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004130:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004136:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	fa93 f2a3 	rbit	r2, r3
 8004140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004144:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004152:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	fa93 f2a3 	rbit	r2, r3
 8004166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	4b3f      	ldr	r3, [pc, #252]	; (8004270 <HAL_RCC_OscConfig+0xf78>)
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004178:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800417c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004180:	6011      	str	r1, [r2, #0]
 8004182:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004186:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	fa92 f1a2 	rbit	r1, r2
 8004190:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004194:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004198:	6011      	str	r1, [r2, #0]
  return result;
 800419a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800419e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	fab2 f282 	clz	r2, r2
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	f042 0220 	orr.w	r2, r2, #32
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	f002 021f 	and.w	r2, r2, #31
 80041b4:	2101      	movs	r1, #1
 80041b6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d082      	beq.n	80040c6 <HAL_RCC_OscConfig+0xdce>
 80041c0:	e0cf      	b.n	8004362 <HAL_RCC_OscConfig+0x106a>
 80041c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80041ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	fa93 f2a3 	rbit	r2, r3
 80041de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80041e6:	601a      	str	r2, [r3, #0]
  return result;
 80041e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ec:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80041f0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f2:	fab3 f383 	clz	r3, r3
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	461a      	mov	r2, r3
 8004204:	2300      	movs	r3, #0
 8004206:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004208:	f7fe f992 	bl	8002530 <HAL_GetTick>
 800420c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004210:	e009      	b.n	8004226 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004212:	f7fe f98d 	bl	8002530 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e09e      	b.n	8004364 <HAL_RCC_OscConfig+0x106c>
 8004226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800422a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800422e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004238:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	fa93 f2a3 	rbit	r2, r3
 8004242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004246:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800424a:	601a      	str	r2, [r3, #0]
  return result;
 800424c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004250:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004254:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b01      	cmp	r3, #1
 8004268:	d104      	bne.n	8004274 <HAL_RCC_OscConfig+0xf7c>
 800426a:	4b01      	ldr	r3, [pc, #4]	; (8004270 <HAL_RCC_OscConfig+0xf78>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	e029      	b.n	80042c4 <HAL_RCC_OscConfig+0xfcc>
 8004270:	40021000 	.word	0x40021000
 8004274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004278:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800427c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004280:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004286:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	fa93 f2a3 	rbit	r2, r3
 8004290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004294:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80042a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ac:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	fa93 f2a3 	rbit	r2, r3
 80042b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ba:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	4b2b      	ldr	r3, [pc, #172]	; (8004370 <HAL_RCC_OscConfig+0x1078>)
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042c8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80042cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042d0:	6011      	str	r1, [r2, #0]
 80042d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042d6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	fa92 f1a2 	rbit	r1, r2
 80042e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042e4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80042e8:	6011      	str	r1, [r2, #0]
  return result;
 80042ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042ee:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	fab2 f282 	clz	r2, r2
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	f042 0220 	orr.w	r2, r2, #32
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	f002 021f 	and.w	r2, r2, #31
 8004304:	2101      	movs	r1, #1
 8004306:	fa01 f202 	lsl.w	r2, r1, r2
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d180      	bne.n	8004212 <HAL_RCC_OscConfig+0xf1a>
 8004310:	e027      	b.n	8004362 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004316:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e01e      	b.n	8004364 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004326:	4b12      	ldr	r3, [pc, #72]	; (8004370 <HAL_RCC_OscConfig+0x1078>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800432e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004332:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800433a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	429a      	cmp	r2, r3
 8004344:	d10b      	bne.n	800435e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004346:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800434a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800434e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004352:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800435a:	429a      	cmp	r2, r3
 800435c:	d001      	beq.n	8004362 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000

08004374 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b09e      	sub	sp, #120	; 0x78
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e162      	b.n	8004652 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800438c:	4b90      	ldr	r3, [pc, #576]	; (80045d0 <HAL_RCC_ClockConfig+0x25c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d910      	bls.n	80043bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4b8d      	ldr	r3, [pc, #564]	; (80045d0 <HAL_RCC_ClockConfig+0x25c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 0207 	bic.w	r2, r3, #7
 80043a2:	498b      	ldr	r1, [pc, #556]	; (80045d0 <HAL_RCC_ClockConfig+0x25c>)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043aa:	4b89      	ldr	r3, [pc, #548]	; (80045d0 <HAL_RCC_ClockConfig+0x25c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d001      	beq.n	80043bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e14a      	b.n	8004652 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c8:	4b82      	ldr	r3, [pc, #520]	; (80045d4 <HAL_RCC_ClockConfig+0x260>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	497f      	ldr	r1, [pc, #508]	; (80045d4 <HAL_RCC_ClockConfig+0x260>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80dc 	beq.w	80045a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d13c      	bne.n	800446a <HAL_RCC_ClockConfig+0xf6>
 80043f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043f8:	fa93 f3a3 	rbit	r3, r3
 80043fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80043fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004400:	fab3 f383 	clz	r3, r3
 8004404:	b2db      	uxtb	r3, r3
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	b2db      	uxtb	r3, r3
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b01      	cmp	r3, #1
 8004412:	d102      	bne.n	800441a <HAL_RCC_ClockConfig+0xa6>
 8004414:	4b6f      	ldr	r3, [pc, #444]	; (80045d4 <HAL_RCC_ClockConfig+0x260>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	e00f      	b.n	800443a <HAL_RCC_ClockConfig+0xc6>
 800441a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800441e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004420:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004422:	fa93 f3a3 	rbit	r3, r3
 8004426:	667b      	str	r3, [r7, #100]	; 0x64
 8004428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800442c:	663b      	str	r3, [r7, #96]	; 0x60
 800442e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004430:	fa93 f3a3 	rbit	r3, r3
 8004434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004436:	4b67      	ldr	r3, [pc, #412]	; (80045d4 <HAL_RCC_ClockConfig+0x260>)
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800443e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004440:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004442:	fa92 f2a2 	rbit	r2, r2
 8004446:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004448:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800444a:	fab2 f282 	clz	r2, r2
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	f042 0220 	orr.w	r2, r2, #32
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	f002 021f 	and.w	r2, r2, #31
 800445a:	2101      	movs	r1, #1
 800445c:	fa01 f202 	lsl.w	r2, r1, r2
 8004460:	4013      	ands	r3, r2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d17b      	bne.n	800455e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e0f3      	b.n	8004652 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d13c      	bne.n	80044ec <HAL_RCC_ClockConfig+0x178>
 8004472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004476:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800447a:	fa93 f3a3 	rbit	r3, r3
 800447e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004482:	fab3 f383 	clz	r3, r3
 8004486:	b2db      	uxtb	r3, r3
 8004488:	095b      	lsrs	r3, r3, #5
 800448a:	b2db      	uxtb	r3, r3
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b01      	cmp	r3, #1
 8004494:	d102      	bne.n	800449c <HAL_RCC_ClockConfig+0x128>
 8004496:	4b4f      	ldr	r3, [pc, #316]	; (80045d4 <HAL_RCC_ClockConfig+0x260>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	e00f      	b.n	80044bc <HAL_RCC_ClockConfig+0x148>
 800449c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a4:	fa93 f3a3 	rbit	r3, r3
 80044a8:	647b      	str	r3, [r7, #68]	; 0x44
 80044aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044ae:	643b      	str	r3, [r7, #64]	; 0x40
 80044b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b2:	fa93 f3a3 	rbit	r3, r3
 80044b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044b8:	4b46      	ldr	r3, [pc, #280]	; (80045d4 <HAL_RCC_ClockConfig+0x260>)
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80044c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044c4:	fa92 f2a2 	rbit	r2, r2
 80044c8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80044ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044cc:	fab2 f282 	clz	r2, r2
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	f042 0220 	orr.w	r2, r2, #32
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	f002 021f 	and.w	r2, r2, #31
 80044dc:	2101      	movs	r1, #1
 80044de:	fa01 f202 	lsl.w	r2, r1, r2
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d13a      	bne.n	800455e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0b2      	b.n	8004652 <HAL_RCC_ClockConfig+0x2de>
 80044ec:	2302      	movs	r3, #2
 80044ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	fa93 f3a3 	rbit	r3, r3
 80044f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80044f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fa:	fab3 f383 	clz	r3, r3
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	b2db      	uxtb	r3, r3
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d102      	bne.n	8004514 <HAL_RCC_ClockConfig+0x1a0>
 800450e:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <HAL_RCC_ClockConfig+0x260>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	e00d      	b.n	8004530 <HAL_RCC_ClockConfig+0x1bc>
 8004514:	2302      	movs	r3, #2
 8004516:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	fa93 f3a3 	rbit	r3, r3
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
 8004520:	2302      	movs	r3, #2
 8004522:	623b      	str	r3, [r7, #32]
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	fa93 f3a3 	rbit	r3, r3
 800452a:	61fb      	str	r3, [r7, #28]
 800452c:	4b29      	ldr	r3, [pc, #164]	; (80045d4 <HAL_RCC_ClockConfig+0x260>)
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	2202      	movs	r2, #2
 8004532:	61ba      	str	r2, [r7, #24]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	fa92 f2a2 	rbit	r2, r2
 800453a:	617a      	str	r2, [r7, #20]
  return result;
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	fab2 f282 	clz	r2, r2
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	f042 0220 	orr.w	r2, r2, #32
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	f002 021f 	and.w	r2, r2, #31
 800454e:	2101      	movs	r1, #1
 8004550:	fa01 f202 	lsl.w	r2, r1, r2
 8004554:	4013      	ands	r3, r2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e079      	b.n	8004652 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800455e:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <HAL_RCC_ClockConfig+0x260>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f023 0203 	bic.w	r2, r3, #3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	491a      	ldr	r1, [pc, #104]	; (80045d4 <HAL_RCC_ClockConfig+0x260>)
 800456c:	4313      	orrs	r3, r2
 800456e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004570:	f7fd ffde 	bl	8002530 <HAL_GetTick>
 8004574:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004576:	e00a      	b.n	800458e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004578:	f7fd ffda 	bl	8002530 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f241 3288 	movw	r2, #5000	; 0x1388
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e061      	b.n	8004652 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458e:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <HAL_RCC_ClockConfig+0x260>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 020c 	and.w	r2, r3, #12
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	429a      	cmp	r2, r3
 800459e:	d1eb      	bne.n	8004578 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <HAL_RCC_ClockConfig+0x25c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d214      	bcs.n	80045d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ae:	4b08      	ldr	r3, [pc, #32]	; (80045d0 <HAL_RCC_ClockConfig+0x25c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 0207 	bic.w	r2, r3, #7
 80045b6:	4906      	ldr	r1, [pc, #24]	; (80045d0 <HAL_RCC_ClockConfig+0x25c>)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045be:	4b04      	ldr	r3, [pc, #16]	; (80045d0 <HAL_RCC_ClockConfig+0x25c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d005      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e040      	b.n	8004652 <HAL_RCC_ClockConfig+0x2de>
 80045d0:	40022000 	.word	0x40022000
 80045d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d008      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045e4:	4b1d      	ldr	r3, [pc, #116]	; (800465c <HAL_RCC_ClockConfig+0x2e8>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	491a      	ldr	r1, [pc, #104]	; (800465c <HAL_RCC_ClockConfig+0x2e8>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004602:	4b16      	ldr	r3, [pc, #88]	; (800465c <HAL_RCC_ClockConfig+0x2e8>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4912      	ldr	r1, [pc, #72]	; (800465c <HAL_RCC_ClockConfig+0x2e8>)
 8004612:	4313      	orrs	r3, r2
 8004614:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004616:	f000 f829 	bl	800466c <HAL_RCC_GetSysClockFreq>
 800461a:	4601      	mov	r1, r0
 800461c:	4b0f      	ldr	r3, [pc, #60]	; (800465c <HAL_RCC_ClockConfig+0x2e8>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004624:	22f0      	movs	r2, #240	; 0xf0
 8004626:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	fa92 f2a2 	rbit	r2, r2
 800462e:	60fa      	str	r2, [r7, #12]
  return result;
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	fab2 f282 	clz	r2, r2
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	40d3      	lsrs	r3, r2
 800463a:	4a09      	ldr	r2, [pc, #36]	; (8004660 <HAL_RCC_ClockConfig+0x2ec>)
 800463c:	5cd3      	ldrb	r3, [r2, r3]
 800463e:	fa21 f303 	lsr.w	r3, r1, r3
 8004642:	4a08      	ldr	r2, [pc, #32]	; (8004664 <HAL_RCC_ClockConfig+0x2f0>)
 8004644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004646:	4b08      	ldr	r3, [pc, #32]	; (8004668 <HAL_RCC_ClockConfig+0x2f4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7fd ff2c 	bl	80024a8 <HAL_InitTick>
  
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3778      	adds	r7, #120	; 0x78
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40021000 	.word	0x40021000
 8004660:	08006498 	.word	0x08006498
 8004664:	200003fc 	.word	0x200003fc
 8004668:	20000400 	.word	0x20000400

0800466c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800466c:	b480      	push	{r7}
 800466e:	b08b      	sub	sp, #44	; 0x2c
 8004670:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
 8004676:	2300      	movs	r3, #0
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	2300      	movs	r3, #0
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
 800467e:	2300      	movs	r3, #0
 8004680:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004686:	4b29      	ldr	r3, [pc, #164]	; (800472c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f003 030c 	and.w	r3, r3, #12
 8004692:	2b04      	cmp	r3, #4
 8004694:	d002      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0x30>
 8004696:	2b08      	cmp	r3, #8
 8004698:	d003      	beq.n	80046a2 <HAL_RCC_GetSysClockFreq+0x36>
 800469a:	e03c      	b.n	8004716 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800469c:	4b24      	ldr	r3, [pc, #144]	; (8004730 <HAL_RCC_GetSysClockFreq+0xc4>)
 800469e:	623b      	str	r3, [r7, #32]
      break;
 80046a0:	e03c      	b.n	800471c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80046a8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80046ac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	fa92 f2a2 	rbit	r2, r2
 80046b4:	607a      	str	r2, [r7, #4]
  return result;
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	fab2 f282 	clz	r2, r2
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	40d3      	lsrs	r3, r2
 80046c0:	4a1c      	ldr	r2, [pc, #112]	; (8004734 <HAL_RCC_GetSysClockFreq+0xc8>)
 80046c2:	5cd3      	ldrb	r3, [r2, r3]
 80046c4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80046c6:	4b19      	ldr	r3, [pc, #100]	; (800472c <HAL_RCC_GetSysClockFreq+0xc0>)
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	220f      	movs	r2, #15
 80046d0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	fa92 f2a2 	rbit	r2, r2
 80046d8:	60fa      	str	r2, [r7, #12]
  return result;
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	fab2 f282 	clz	r2, r2
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	40d3      	lsrs	r3, r2
 80046e4:	4a14      	ldr	r2, [pc, #80]	; (8004738 <HAL_RCC_GetSysClockFreq+0xcc>)
 80046e6:	5cd3      	ldrb	r3, [r2, r3]
 80046e8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046f4:	4a0e      	ldr	r2, [pc, #56]	; (8004730 <HAL_RCC_GetSysClockFreq+0xc4>)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	fb02 f303 	mul.w	r3, r2, r3
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
 8004704:	e004      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	4a0c      	ldr	r2, [pc, #48]	; (800473c <HAL_RCC_GetSysClockFreq+0xd0>)
 800470a:	fb02 f303 	mul.w	r3, r2, r3
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	623b      	str	r3, [r7, #32]
      break;
 8004714:	e002      	b.n	800471c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004718:	623b      	str	r3, [r7, #32]
      break;
 800471a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800471c:	6a3b      	ldr	r3, [r7, #32]
}
 800471e:	4618      	mov	r0, r3
 8004720:	372c      	adds	r7, #44	; 0x2c
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40021000 	.word	0x40021000
 8004730:	007a1200 	.word	0x007a1200
 8004734:	080064b0 	.word	0x080064b0
 8004738:	080064c0 	.word	0x080064c0
 800473c:	003d0900 	.word	0x003d0900

08004740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004744:	4b03      	ldr	r3, [pc, #12]	; (8004754 <HAL_RCC_GetHCLKFreq+0x14>)
 8004746:	681b      	ldr	r3, [r3, #0]
}
 8004748:	4618      	mov	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	200003fc 	.word	0x200003fc

08004758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800475e:	f7ff ffef 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 8004762:	4601      	mov	r1, r0
 8004764:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800476c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004770:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	fa92 f2a2 	rbit	r2, r2
 8004778:	603a      	str	r2, [r7, #0]
  return result;
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	fab2 f282 	clz	r2, r2
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	40d3      	lsrs	r3, r2
 8004784:	4a04      	ldr	r2, [pc, #16]	; (8004798 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004786:	5cd3      	ldrb	r3, [r2, r3]
 8004788:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40021000 	.word	0x40021000
 8004798:	080064a8 	.word	0x080064a8

0800479c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80047a2:	f7ff ffcd 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 80047a6:	4601      	mov	r1, r0
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80047b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80047b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	fa92 f2a2 	rbit	r2, r2
 80047bc:	603a      	str	r2, [r7, #0]
  return result;
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	fab2 f282 	clz	r2, r2
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	40d3      	lsrs	r3, r2
 80047c8:	4a04      	ldr	r2, [pc, #16]	; (80047dc <HAL_RCC_GetPCLK2Freq+0x40>)
 80047ca:	5cd3      	ldrb	r3, [r2, r3]
 80047cc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40021000 	.word	0x40021000
 80047dc:	080064a8 	.word	0x080064a8

080047e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b092      	sub	sp, #72	; 0x48
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80047f0:	2300      	movs	r3, #0
 80047f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 80d4 	beq.w	80049ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004804:	4b4e      	ldr	r3, [pc, #312]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10e      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004810:	4b4b      	ldr	r3, [pc, #300]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	4a4a      	ldr	r2, [pc, #296]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481a:	61d3      	str	r3, [r2, #28]
 800481c:	4b48      	ldr	r3, [pc, #288]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004828:	2301      	movs	r3, #1
 800482a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482e:	4b45      	ldr	r3, [pc, #276]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d118      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800483a:	4b42      	ldr	r3, [pc, #264]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a41      	ldr	r2, [pc, #260]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004844:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004846:	f7fd fe73 	bl	8002530 <HAL_GetTick>
 800484a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484c:	e008      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800484e:	f7fd fe6f 	bl	8002530 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b64      	cmp	r3, #100	; 0x64
 800485a:	d901      	bls.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e14b      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004860:	4b38      	ldr	r3, [pc, #224]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f0      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800486c:	4b34      	ldr	r3, [pc, #208]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004874:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 8084 	beq.w	8004986 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004886:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004888:	429a      	cmp	r2, r3
 800488a:	d07c      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800488c:	4b2c      	ldr	r3, [pc, #176]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004896:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800489a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	fa93 f3a3 	rbit	r3, r3
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80048a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048a6:	fab3 f383 	clz	r3, r3
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	4b26      	ldr	r3, [pc, #152]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	461a      	mov	r2, r3
 80048b6:	2301      	movs	r3, #1
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	fa93 f3a3 	rbit	r3, r3
 80048c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80048c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048ca:	fab3 f383 	clz	r3, r3
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	461a      	mov	r2, r3
 80048d2:	4b1d      	ldr	r3, [pc, #116]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	461a      	mov	r2, r3
 80048da:	2300      	movs	r3, #0
 80048dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048de:	4a18      	ldr	r2, [pc, #96]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d04b      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ee:	f7fd fe1f 	bl	8002530 <HAL_GetTick>
 80048f2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f4:	e00a      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f6:	f7fd fe1b 	bl	8002530 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	f241 3288 	movw	r2, #5000	; 0x1388
 8004904:	4293      	cmp	r3, r2
 8004906:	d901      	bls.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e0f5      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800490c:	2302      	movs	r3, #2
 800490e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	fa93 f3a3 	rbit	r3, r3
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
 8004918:	2302      	movs	r3, #2
 800491a:	623b      	str	r3, [r7, #32]
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	fa93 f3a3 	rbit	r3, r3
 8004922:	61fb      	str	r3, [r7, #28]
  return result;
 8004924:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004926:	fab3 f383 	clz	r3, r3
 800492a:	b2db      	uxtb	r3, r3
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	b2db      	uxtb	r3, r3
 8004930:	f043 0302 	orr.w	r3, r3, #2
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d108      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800493a:	4b01      	ldr	r3, [pc, #4]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	e00d      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004940:	40021000 	.word	0x40021000
 8004944:	40007000 	.word	0x40007000
 8004948:	10908100 	.word	0x10908100
 800494c:	2302      	movs	r3, #2
 800494e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	fa93 f3a3 	rbit	r3, r3
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	4b69      	ldr	r3, [pc, #420]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	2202      	movs	r2, #2
 800495e:	613a      	str	r2, [r7, #16]
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	fa92 f2a2 	rbit	r2, r2
 8004966:	60fa      	str	r2, [r7, #12]
  return result;
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	fab2 f282 	clz	r2, r2
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	f002 021f 	and.w	r2, r2, #31
 800497a:	2101      	movs	r1, #1
 800497c:	fa01 f202 	lsl.w	r2, r1, r2
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0b7      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004986:	4b5e      	ldr	r3, [pc, #376]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	495b      	ldr	r1, [pc, #364]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004994:	4313      	orrs	r3, r2
 8004996:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004998:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800499c:	2b01      	cmp	r3, #1
 800499e:	d105      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a0:	4b57      	ldr	r3, [pc, #348]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	4a56      	ldr	r2, [pc, #344]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049b8:	4b51      	ldr	r3, [pc, #324]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049bc:	f023 0203 	bic.w	r2, r3, #3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	494e      	ldr	r1, [pc, #312]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d008      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049d6:	4b4a      	ldr	r3, [pc, #296]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	f023 0210 	bic.w	r2, r3, #16
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	4947      	ldr	r1, [pc, #284]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80049f4:	4b42      	ldr	r3, [pc, #264]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a00:	493f      	ldr	r1, [pc, #252]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d008      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a12:	4b3b      	ldr	r3, [pc, #236]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	f023 0220 	bic.w	r2, r3, #32
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	4938      	ldr	r1, [pc, #224]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a30:	4b33      	ldr	r3, [pc, #204]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a34:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	4930      	ldr	r1, [pc, #192]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d008      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a4e:	4b2c      	ldr	r3, [pc, #176]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	4929      	ldr	r1, [pc, #164]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d008      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004a6c:	4b24      	ldr	r3, [pc, #144]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	4921      	ldr	r1, [pc, #132]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d008      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a8a:	4b1d      	ldr	r3, [pc, #116]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	491a      	ldr	r1, [pc, #104]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004aa8:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	4912      	ldr	r1, [pc, #72]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d008      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004ac6:	4b0e      	ldr	r3, [pc, #56]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	490b      	ldr	r1, [pc, #44]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004ae4:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	4903      	ldr	r1, [pc, #12]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3748      	adds	r7, #72	; 0x48
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40021000 	.word	0x40021000

08004b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e049      	b.n	8004baa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fd faf2 	bl	8002114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	4619      	mov	r1, r3
 8004b42:	4610      	mov	r0, r2
 8004b44:	f000 fba8 	bl	8005298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d001      	beq.n	8004bcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e033      	b.n	8004c34 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a19      	ldr	r2, [pc, #100]	; (8004c40 <HAL_TIM_Base_Start+0x8c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d009      	beq.n	8004bf2 <HAL_TIM_Base_Start+0x3e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be6:	d004      	beq.n	8004bf2 <HAL_TIM_Base_Start+0x3e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <HAL_TIM_Base_Start+0x90>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d115      	bne.n	8004c1e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	4b13      	ldr	r3, [pc, #76]	; (8004c48 <HAL_TIM_Base_Start+0x94>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b06      	cmp	r3, #6
 8004c02:	d015      	beq.n	8004c30 <HAL_TIM_Base_Start+0x7c>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0a:	d011      	beq.n	8004c30 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1c:	e008      	b.n	8004c30 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0201 	orr.w	r2, r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	e000      	b.n	8004c32 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	40012c00 	.word	0x40012c00
 8004c44:	40014000 	.word	0x40014000
 8004c48:	00010007 	.word	0x00010007

08004c4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e049      	b.n	8004cf2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f841 	bl	8004cfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3304      	adds	r3, #4
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f000 fb04 	bl	8005298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d109      	bne.n	8004d34 <HAL_TIM_PWM_Start+0x24>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	bf14      	ite	ne
 8004d2c:	2301      	movne	r3, #1
 8004d2e:	2300      	moveq	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	e03c      	b.n	8004dae <HAL_TIM_PWM_Start+0x9e>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d109      	bne.n	8004d4e <HAL_TIM_PWM_Start+0x3e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	bf14      	ite	ne
 8004d46:	2301      	movne	r3, #1
 8004d48:	2300      	moveq	r3, #0
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	e02f      	b.n	8004dae <HAL_TIM_PWM_Start+0x9e>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d109      	bne.n	8004d68 <HAL_TIM_PWM_Start+0x58>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	bf14      	ite	ne
 8004d60:	2301      	movne	r3, #1
 8004d62:	2300      	moveq	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	e022      	b.n	8004dae <HAL_TIM_PWM_Start+0x9e>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b0c      	cmp	r3, #12
 8004d6c:	d109      	bne.n	8004d82 <HAL_TIM_PWM_Start+0x72>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	bf14      	ite	ne
 8004d7a:	2301      	movne	r3, #1
 8004d7c:	2300      	moveq	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	e015      	b.n	8004dae <HAL_TIM_PWM_Start+0x9e>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d109      	bne.n	8004d9c <HAL_TIM_PWM_Start+0x8c>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	bf14      	ite	ne
 8004d94:	2301      	movne	r3, #1
 8004d96:	2300      	moveq	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	e008      	b.n	8004dae <HAL_TIM_PWM_Start+0x9e>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	bf14      	ite	ne
 8004da8:	2301      	movne	r3, #1
 8004daa:	2300      	moveq	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e083      	b.n	8004ebe <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d104      	bne.n	8004dc6 <HAL_TIM_PWM_Start+0xb6>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc4:	e023      	b.n	8004e0e <HAL_TIM_PWM_Start+0xfe>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d104      	bne.n	8004dd6 <HAL_TIM_PWM_Start+0xc6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dd4:	e01b      	b.n	8004e0e <HAL_TIM_PWM_Start+0xfe>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d104      	bne.n	8004de6 <HAL_TIM_PWM_Start+0xd6>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de4:	e013      	b.n	8004e0e <HAL_TIM_PWM_Start+0xfe>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b0c      	cmp	r3, #12
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_PWM_Start+0xe6>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004df4:	e00b      	b.n	8004e0e <HAL_TIM_PWM_Start+0xfe>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b10      	cmp	r3, #16
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_PWM_Start+0xf6>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e04:	e003      	b.n	8004e0e <HAL_TIM_PWM_Start+0xfe>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2201      	movs	r2, #1
 8004e14:	6839      	ldr	r1, [r7, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fdec 	bl	80059f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a29      	ldr	r2, [pc, #164]	; (8004ec8 <HAL_TIM_PWM_Start+0x1b8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d00e      	beq.n	8004e44 <HAL_TIM_PWM_Start+0x134>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a28      	ldr	r2, [pc, #160]	; (8004ecc <HAL_TIM_PWM_Start+0x1bc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d009      	beq.n	8004e44 <HAL_TIM_PWM_Start+0x134>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a26      	ldr	r2, [pc, #152]	; (8004ed0 <HAL_TIM_PWM_Start+0x1c0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d004      	beq.n	8004e44 <HAL_TIM_PWM_Start+0x134>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a25      	ldr	r2, [pc, #148]	; (8004ed4 <HAL_TIM_PWM_Start+0x1c4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d101      	bne.n	8004e48 <HAL_TIM_PWM_Start+0x138>
 8004e44:	2301      	movs	r3, #1
 8004e46:	e000      	b.n	8004e4a <HAL_TIM_PWM_Start+0x13a>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a19      	ldr	r2, [pc, #100]	; (8004ec8 <HAL_TIM_PWM_Start+0x1b8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_TIM_PWM_Start+0x16c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e70:	d004      	beq.n	8004e7c <HAL_TIM_PWM_Start+0x16c>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <HAL_TIM_PWM_Start+0x1bc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d115      	bne.n	8004ea8 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <HAL_TIM_PWM_Start+0x1c8>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b06      	cmp	r3, #6
 8004e8c:	d015      	beq.n	8004eba <HAL_TIM_PWM_Start+0x1aa>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e94:	d011      	beq.n	8004eba <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0201 	orr.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea6:	e008      	b.n	8004eba <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	e000      	b.n	8004ebc <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40012c00 	.word	0x40012c00
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800
 8004ed8:	00010007 	.word	0x00010007

08004edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e0ff      	b.n	80050fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b14      	cmp	r3, #20
 8004f06:	f200 80f0 	bhi.w	80050ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f0a:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f10:	08004f65 	.word	0x08004f65
 8004f14:	080050eb 	.word	0x080050eb
 8004f18:	080050eb 	.word	0x080050eb
 8004f1c:	080050eb 	.word	0x080050eb
 8004f20:	08004fa5 	.word	0x08004fa5
 8004f24:	080050eb 	.word	0x080050eb
 8004f28:	080050eb 	.word	0x080050eb
 8004f2c:	080050eb 	.word	0x080050eb
 8004f30:	08004fe7 	.word	0x08004fe7
 8004f34:	080050eb 	.word	0x080050eb
 8004f38:	080050eb 	.word	0x080050eb
 8004f3c:	080050eb 	.word	0x080050eb
 8004f40:	08005027 	.word	0x08005027
 8004f44:	080050eb 	.word	0x080050eb
 8004f48:	080050eb 	.word	0x080050eb
 8004f4c:	080050eb 	.word	0x080050eb
 8004f50:	08005069 	.word	0x08005069
 8004f54:	080050eb 	.word	0x080050eb
 8004f58:	080050eb 	.word	0x080050eb
 8004f5c:	080050eb 	.word	0x080050eb
 8004f60:	080050a9 	.word	0x080050a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fa02 	bl	8005374 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0208 	orr.w	r2, r2, #8
 8004f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0204 	bic.w	r2, r2, #4
 8004f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6999      	ldr	r1, [r3, #24]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	619a      	str	r2, [r3, #24]
      break;
 8004fa2:	e0a5      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fa68 	bl	8005480 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6999      	ldr	r1, [r3, #24]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	021a      	lsls	r2, r3, #8
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	619a      	str	r2, [r3, #24]
      break;
 8004fe4:	e084      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fac7 	bl	8005580 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0208 	orr.w	r2, r2, #8
 8005000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0204 	bic.w	r2, r2, #4
 8005010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69d9      	ldr	r1, [r3, #28]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	61da      	str	r2, [r3, #28]
      break;
 8005024:	e064      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fb25 	bl	800567c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69d9      	ldr	r1, [r3, #28]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	021a      	lsls	r2, r3, #8
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	61da      	str	r2, [r3, #28]
      break;
 8005066:	e043      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68b9      	ldr	r1, [r7, #8]
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fb68 	bl	8005744 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0208 	orr.w	r2, r2, #8
 8005082:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0204 	bic.w	r2, r2, #4
 8005092:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	691a      	ldr	r2, [r3, #16]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050a6:	e023      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fba6 	bl	8005800 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	021a      	lsls	r2, r3, #8
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050e8:	e002      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	75fb      	strb	r3, [r7, #23]
      break;
 80050ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop

08005104 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_TIM_ConfigClockSource+0x1c>
 800511c:	2302      	movs	r3, #2
 800511e:	e0b6      	b.n	800528e <HAL_TIM_ConfigClockSource+0x18a>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800513e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800514a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515c:	d03e      	beq.n	80051dc <HAL_TIM_ConfigClockSource+0xd8>
 800515e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005162:	f200 8087 	bhi.w	8005274 <HAL_TIM_ConfigClockSource+0x170>
 8005166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516a:	f000 8086 	beq.w	800527a <HAL_TIM_ConfigClockSource+0x176>
 800516e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005172:	d87f      	bhi.n	8005274 <HAL_TIM_ConfigClockSource+0x170>
 8005174:	2b70      	cmp	r3, #112	; 0x70
 8005176:	d01a      	beq.n	80051ae <HAL_TIM_ConfigClockSource+0xaa>
 8005178:	2b70      	cmp	r3, #112	; 0x70
 800517a:	d87b      	bhi.n	8005274 <HAL_TIM_ConfigClockSource+0x170>
 800517c:	2b60      	cmp	r3, #96	; 0x60
 800517e:	d050      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x11e>
 8005180:	2b60      	cmp	r3, #96	; 0x60
 8005182:	d877      	bhi.n	8005274 <HAL_TIM_ConfigClockSource+0x170>
 8005184:	2b50      	cmp	r3, #80	; 0x50
 8005186:	d03c      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0xfe>
 8005188:	2b50      	cmp	r3, #80	; 0x50
 800518a:	d873      	bhi.n	8005274 <HAL_TIM_ConfigClockSource+0x170>
 800518c:	2b40      	cmp	r3, #64	; 0x40
 800518e:	d058      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0x13e>
 8005190:	2b40      	cmp	r3, #64	; 0x40
 8005192:	d86f      	bhi.n	8005274 <HAL_TIM_ConfigClockSource+0x170>
 8005194:	2b30      	cmp	r3, #48	; 0x30
 8005196:	d064      	beq.n	8005262 <HAL_TIM_ConfigClockSource+0x15e>
 8005198:	2b30      	cmp	r3, #48	; 0x30
 800519a:	d86b      	bhi.n	8005274 <HAL_TIM_ConfigClockSource+0x170>
 800519c:	2b20      	cmp	r3, #32
 800519e:	d060      	beq.n	8005262 <HAL_TIM_ConfigClockSource+0x15e>
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d867      	bhi.n	8005274 <HAL_TIM_ConfigClockSource+0x170>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d05c      	beq.n	8005262 <HAL_TIM_ConfigClockSource+0x15e>
 80051a8:	2b10      	cmp	r3, #16
 80051aa:	d05a      	beq.n	8005262 <HAL_TIM_ConfigClockSource+0x15e>
 80051ac:	e062      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6818      	ldr	r0, [r3, #0]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	6899      	ldr	r1, [r3, #8]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f000 fbf9 	bl	80059b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	609a      	str	r2, [r3, #8]
      break;
 80051da:	e04f      	b.n	800527c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6818      	ldr	r0, [r3, #0]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	6899      	ldr	r1, [r3, #8]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f000 fbe2 	bl	80059b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051fe:	609a      	str	r2, [r3, #8]
      break;
 8005200:	e03c      	b.n	800527c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	6859      	ldr	r1, [r3, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	461a      	mov	r2, r3
 8005210:	f000 fb56 	bl	80058c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2150      	movs	r1, #80	; 0x50
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fbaf 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 8005220:	e02c      	b.n	800527c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6859      	ldr	r1, [r3, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	461a      	mov	r2, r3
 8005230:	f000 fb75 	bl	800591e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2160      	movs	r1, #96	; 0x60
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fb9f 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 8005240:	e01c      	b.n	800527c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6818      	ldr	r0, [r3, #0]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	6859      	ldr	r1, [r3, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	461a      	mov	r2, r3
 8005250:	f000 fb36 	bl	80058c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2140      	movs	r1, #64	; 0x40
 800525a:	4618      	mov	r0, r3
 800525c:	f000 fb8f 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 8005260:	e00c      	b.n	800527c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4619      	mov	r1, r3
 800526c:	4610      	mov	r0, r2
 800526e:	f000 fb86 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 8005272:	e003      	b.n	800527c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	73fb      	strb	r3, [r7, #15]
      break;
 8005278:	e000      	b.n	800527c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800527a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800528c:	7bfb      	ldrb	r3, [r7, #15]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a2e      	ldr	r2, [pc, #184]	; (8005364 <TIM_Base_SetConfig+0xcc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d003      	beq.n	80052b8 <TIM_Base_SetConfig+0x20>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b6:	d108      	bne.n	80052ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a25      	ldr	r2, [pc, #148]	; (8005364 <TIM_Base_SetConfig+0xcc>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00f      	beq.n	80052f2 <TIM_Base_SetConfig+0x5a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d8:	d00b      	beq.n	80052f2 <TIM_Base_SetConfig+0x5a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a22      	ldr	r2, [pc, #136]	; (8005368 <TIM_Base_SetConfig+0xd0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d007      	beq.n	80052f2 <TIM_Base_SetConfig+0x5a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a21      	ldr	r2, [pc, #132]	; (800536c <TIM_Base_SetConfig+0xd4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d003      	beq.n	80052f2 <TIM_Base_SetConfig+0x5a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a20      	ldr	r2, [pc, #128]	; (8005370 <TIM_Base_SetConfig+0xd8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d108      	bne.n	8005304 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a0e      	ldr	r2, [pc, #56]	; (8005364 <TIM_Base_SetConfig+0xcc>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00b      	beq.n	8005348 <TIM_Base_SetConfig+0xb0>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a0d      	ldr	r2, [pc, #52]	; (8005368 <TIM_Base_SetConfig+0xd0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d007      	beq.n	8005348 <TIM_Base_SetConfig+0xb0>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a0c      	ldr	r2, [pc, #48]	; (800536c <TIM_Base_SetConfig+0xd4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_Base_SetConfig+0xb0>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a0b      	ldr	r2, [pc, #44]	; (8005370 <TIM_Base_SetConfig+0xd8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d103      	bne.n	8005350 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	615a      	str	r2, [r3, #20]
}
 8005356:	bf00      	nop
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40012c00 	.word	0x40012c00
 8005368:	40014000 	.word	0x40014000
 800536c:	40014400 	.word	0x40014400
 8005370:	40014800 	.word	0x40014800

08005374 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f023 0201 	bic.w	r2, r3, #1
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0303 	bic.w	r3, r3, #3
 80053ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f023 0302 	bic.w	r3, r3, #2
 80053c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a28      	ldr	r2, [pc, #160]	; (8005470 <TIM_OC1_SetConfig+0xfc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00b      	beq.n	80053ec <TIM_OC1_SetConfig+0x78>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a27      	ldr	r2, [pc, #156]	; (8005474 <TIM_OC1_SetConfig+0x100>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d007      	beq.n	80053ec <TIM_OC1_SetConfig+0x78>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a26      	ldr	r2, [pc, #152]	; (8005478 <TIM_OC1_SetConfig+0x104>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_OC1_SetConfig+0x78>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a25      	ldr	r2, [pc, #148]	; (800547c <TIM_OC1_SetConfig+0x108>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d10c      	bne.n	8005406 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f023 0308 	bic.w	r3, r3, #8
 80053f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f023 0304 	bic.w	r3, r3, #4
 8005404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a19      	ldr	r2, [pc, #100]	; (8005470 <TIM_OC1_SetConfig+0xfc>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00b      	beq.n	8005426 <TIM_OC1_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a18      	ldr	r2, [pc, #96]	; (8005474 <TIM_OC1_SetConfig+0x100>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d007      	beq.n	8005426 <TIM_OC1_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a17      	ldr	r2, [pc, #92]	; (8005478 <TIM_OC1_SetConfig+0x104>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d003      	beq.n	8005426 <TIM_OC1_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a16      	ldr	r2, [pc, #88]	; (800547c <TIM_OC1_SetConfig+0x108>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d111      	bne.n	800544a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800542c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	621a      	str	r2, [r3, #32]
}
 8005464:	bf00      	nop
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	40012c00 	.word	0x40012c00
 8005474:	40014000 	.word	0x40014000
 8005478:	40014400 	.word	0x40014400
 800547c:	40014800 	.word	0x40014800

08005480 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f023 0210 	bic.w	r2, r3, #16
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	021b      	lsls	r3, r3, #8
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f023 0320 	bic.w	r3, r3, #32
 80054ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4313      	orrs	r3, r2
 80054da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a24      	ldr	r2, [pc, #144]	; (8005570 <TIM_OC2_SetConfig+0xf0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10d      	bne.n	8005500 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a1b      	ldr	r2, [pc, #108]	; (8005570 <TIM_OC2_SetConfig+0xf0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00b      	beq.n	8005520 <TIM_OC2_SetConfig+0xa0>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a1a      	ldr	r2, [pc, #104]	; (8005574 <TIM_OC2_SetConfig+0xf4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d007      	beq.n	8005520 <TIM_OC2_SetConfig+0xa0>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a19      	ldr	r2, [pc, #100]	; (8005578 <TIM_OC2_SetConfig+0xf8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d003      	beq.n	8005520 <TIM_OC2_SetConfig+0xa0>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a18      	ldr	r2, [pc, #96]	; (800557c <TIM_OC2_SetConfig+0xfc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d113      	bne.n	8005548 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005526:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800552e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	621a      	str	r2, [r3, #32]
}
 8005562:	bf00      	nop
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800

08005580 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0303 	bic.w	r3, r3, #3
 80055ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a23      	ldr	r2, [pc, #140]	; (800566c <TIM_OC3_SetConfig+0xec>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d10d      	bne.n	80055fe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	021b      	lsls	r3, r3, #8
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055fc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a1a      	ldr	r2, [pc, #104]	; (800566c <TIM_OC3_SetConfig+0xec>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00b      	beq.n	800561e <TIM_OC3_SetConfig+0x9e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a19      	ldr	r2, [pc, #100]	; (8005670 <TIM_OC3_SetConfig+0xf0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d007      	beq.n	800561e <TIM_OC3_SetConfig+0x9e>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a18      	ldr	r2, [pc, #96]	; (8005674 <TIM_OC3_SetConfig+0xf4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d003      	beq.n	800561e <TIM_OC3_SetConfig+0x9e>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a17      	ldr	r2, [pc, #92]	; (8005678 <TIM_OC3_SetConfig+0xf8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d113      	bne.n	8005646 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800562c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	621a      	str	r2, [r3, #32]
}
 8005660:	bf00      	nop
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	40012c00 	.word	0x40012c00
 8005670:	40014000 	.word	0x40014000
 8005674:	40014400 	.word	0x40014400
 8005678:	40014800 	.word	0x40014800

0800567c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	021b      	lsls	r3, r3, #8
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	031b      	lsls	r3, r3, #12
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a16      	ldr	r2, [pc, #88]	; (8005734 <TIM_OC4_SetConfig+0xb8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d00b      	beq.n	80056f8 <TIM_OC4_SetConfig+0x7c>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a15      	ldr	r2, [pc, #84]	; (8005738 <TIM_OC4_SetConfig+0xbc>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d007      	beq.n	80056f8 <TIM_OC4_SetConfig+0x7c>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a14      	ldr	r2, [pc, #80]	; (800573c <TIM_OC4_SetConfig+0xc0>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d003      	beq.n	80056f8 <TIM_OC4_SetConfig+0x7c>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a13      	ldr	r2, [pc, #76]	; (8005740 <TIM_OC4_SetConfig+0xc4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d109      	bne.n	800570c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	019b      	lsls	r3, r3, #6
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	621a      	str	r2, [r3, #32]
}
 8005726:	bf00      	nop
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40012c00 	.word	0x40012c00
 8005738:	40014000 	.word	0x40014000
 800573c:	40014400 	.word	0x40014400
 8005740:	40014800 	.word	0x40014800

08005744 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005788:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	041b      	lsls	r3, r3, #16
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a15      	ldr	r2, [pc, #84]	; (80057f0 <TIM_OC5_SetConfig+0xac>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00b      	beq.n	80057b6 <TIM_OC5_SetConfig+0x72>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a14      	ldr	r2, [pc, #80]	; (80057f4 <TIM_OC5_SetConfig+0xb0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d007      	beq.n	80057b6 <TIM_OC5_SetConfig+0x72>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a13      	ldr	r2, [pc, #76]	; (80057f8 <TIM_OC5_SetConfig+0xb4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d003      	beq.n	80057b6 <TIM_OC5_SetConfig+0x72>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a12      	ldr	r2, [pc, #72]	; (80057fc <TIM_OC5_SetConfig+0xb8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d109      	bne.n	80057ca <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	621a      	str	r2, [r3, #32]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	40012c00 	.word	0x40012c00
 80057f4:	40014000 	.word	0x40014000
 80057f8:	40014400 	.word	0x40014400
 80057fc:	40014800 	.word	0x40014800

08005800 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800582e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	021b      	lsls	r3, r3, #8
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	051b      	lsls	r3, r3, #20
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a16      	ldr	r2, [pc, #88]	; (80058b0 <TIM_OC6_SetConfig+0xb0>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00b      	beq.n	8005874 <TIM_OC6_SetConfig+0x74>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a15      	ldr	r2, [pc, #84]	; (80058b4 <TIM_OC6_SetConfig+0xb4>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d007      	beq.n	8005874 <TIM_OC6_SetConfig+0x74>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a14      	ldr	r2, [pc, #80]	; (80058b8 <TIM_OC6_SetConfig+0xb8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d003      	beq.n	8005874 <TIM_OC6_SetConfig+0x74>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a13      	ldr	r2, [pc, #76]	; (80058bc <TIM_OC6_SetConfig+0xbc>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d109      	bne.n	8005888 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800587a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	029b      	lsls	r3, r3, #10
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	621a      	str	r2, [r3, #32]
}
 80058a2:	bf00      	nop
 80058a4:	371c      	adds	r7, #28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40012c00 	.word	0x40012c00
 80058b4:	40014000 	.word	0x40014000
 80058b8:	40014400 	.word	0x40014400
 80058bc:	40014800 	.word	0x40014800

080058c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	f023 0201 	bic.w	r2, r3, #1
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f023 030a 	bic.w	r3, r3, #10
 80058fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	621a      	str	r2, [r3, #32]
}
 8005912:	bf00      	nop
 8005914:	371c      	adds	r7, #28
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800591e:	b480      	push	{r7}
 8005920:	b087      	sub	sp, #28
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f023 0210 	bic.w	r2, r3, #16
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	031b      	lsls	r3, r3, #12
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800595a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	621a      	str	r2, [r3, #32]
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	f043 0307 	orr.w	r3, r3, #7
 80059a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	609a      	str	r2, [r3, #8]
}
 80059a8:	bf00      	nop
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	021a      	lsls	r2, r3, #8
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4313      	orrs	r3, r2
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	609a      	str	r2, [r3, #8]
}
 80059e8:	bf00      	nop
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	2201      	movs	r2, #1
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a1a      	ldr	r2, [r3, #32]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	43db      	mvns	r3, r3
 8005a16:	401a      	ands	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a1a      	ldr	r2, [r3, #32]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 031f 	and.w	r3, r3, #31
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	621a      	str	r2, [r3, #32]
}
 8005a32:	bf00      	nop
 8005a34:	371c      	adds	r7, #28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
	...

08005a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e04f      	b.n	8005af8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a21      	ldr	r2, [pc, #132]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d108      	bne.n	8005a94 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a14      	ldr	r2, [pc, #80]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d009      	beq.n	8005acc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac0:	d004      	beq.n	8005acc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a10      	ldr	r2, [pc, #64]	; (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d10c      	bne.n	8005ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ad2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	40012c00 	.word	0x40012c00
 8005b08:	40014000 	.word	0x40014000

08005b0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e060      	b.n	8005bea <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	041b      	lsls	r3, r3, #16
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a14      	ldr	r2, [pc, #80]	; (8005bf8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d115      	bne.n	8005bd8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	051b      	lsls	r3, r3, #20
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40012c00 	.word	0x40012c00

08005bfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e040      	b.n	8005c90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7fc faf6 	bl	8002210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2224      	movs	r2, #36	; 0x24
 8005c28:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0201 	bic.w	r2, r2, #1
 8005c38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f82c 	bl	8005c98 <UART_SetConfig>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e022      	b.n	8005c90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f956 	bl	8005f04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f9dd 	bl	8006048 <UART_CheckIdleState>
 8005c8e:	4603      	mov	r3, r0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	4b8a      	ldr	r3, [pc, #552]	; (8005eec <UART_SetConfig+0x254>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6812      	ldr	r2, [r2, #0]
 8005cca:	6979      	ldr	r1, [r7, #20]
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a78      	ldr	r2, [pc, #480]	; (8005ef0 <UART_SetConfig+0x258>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d120      	bne.n	8005d56 <UART_SetConfig+0xbe>
 8005d14:	4b77      	ldr	r3, [pc, #476]	; (8005ef4 <UART_SetConfig+0x25c>)
 8005d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d18:	f003 0303 	and.w	r3, r3, #3
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d817      	bhi.n	8005d50 <UART_SetConfig+0xb8>
 8005d20:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <UART_SetConfig+0x90>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005d39 	.word	0x08005d39
 8005d2c:	08005d45 	.word	0x08005d45
 8005d30:	08005d4b 	.word	0x08005d4b
 8005d34:	08005d3f 	.word	0x08005d3f
 8005d38:	2300      	movs	r3, #0
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	e01d      	b.n	8005d7a <UART_SetConfig+0xe2>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	77fb      	strb	r3, [r7, #31]
 8005d42:	e01a      	b.n	8005d7a <UART_SetConfig+0xe2>
 8005d44:	2304      	movs	r3, #4
 8005d46:	77fb      	strb	r3, [r7, #31]
 8005d48:	e017      	b.n	8005d7a <UART_SetConfig+0xe2>
 8005d4a:	2308      	movs	r3, #8
 8005d4c:	77fb      	strb	r3, [r7, #31]
 8005d4e:	e014      	b.n	8005d7a <UART_SetConfig+0xe2>
 8005d50:	2310      	movs	r3, #16
 8005d52:	77fb      	strb	r3, [r7, #31]
 8005d54:	e011      	b.n	8005d7a <UART_SetConfig+0xe2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a67      	ldr	r2, [pc, #412]	; (8005ef8 <UART_SetConfig+0x260>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d102      	bne.n	8005d66 <UART_SetConfig+0xce>
 8005d60:	2300      	movs	r3, #0
 8005d62:	77fb      	strb	r3, [r7, #31]
 8005d64:	e009      	b.n	8005d7a <UART_SetConfig+0xe2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a64      	ldr	r2, [pc, #400]	; (8005efc <UART_SetConfig+0x264>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d102      	bne.n	8005d76 <UART_SetConfig+0xde>
 8005d70:	2300      	movs	r3, #0
 8005d72:	77fb      	strb	r3, [r7, #31]
 8005d74:	e001      	b.n	8005d7a <UART_SetConfig+0xe2>
 8005d76:	2310      	movs	r3, #16
 8005d78:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d82:	d15a      	bne.n	8005e3a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005d84:	7ffb      	ldrb	r3, [r7, #31]
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d827      	bhi.n	8005dda <UART_SetConfig+0x142>
 8005d8a:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <UART_SetConfig+0xf8>)
 8005d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d90:	08005db5 	.word	0x08005db5
 8005d94:	08005dbd 	.word	0x08005dbd
 8005d98:	08005dc5 	.word	0x08005dc5
 8005d9c:	08005ddb 	.word	0x08005ddb
 8005da0:	08005dcb 	.word	0x08005dcb
 8005da4:	08005ddb 	.word	0x08005ddb
 8005da8:	08005ddb 	.word	0x08005ddb
 8005dac:	08005ddb 	.word	0x08005ddb
 8005db0:	08005dd3 	.word	0x08005dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005db4:	f7fe fcd0 	bl	8004758 <HAL_RCC_GetPCLK1Freq>
 8005db8:	61b8      	str	r0, [r7, #24]
        break;
 8005dba:	e013      	b.n	8005de4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dbc:	f7fe fcee 	bl	800479c <HAL_RCC_GetPCLK2Freq>
 8005dc0:	61b8      	str	r0, [r7, #24]
        break;
 8005dc2:	e00f      	b.n	8005de4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dc4:	4b4e      	ldr	r3, [pc, #312]	; (8005f00 <UART_SetConfig+0x268>)
 8005dc6:	61bb      	str	r3, [r7, #24]
        break;
 8005dc8:	e00c      	b.n	8005de4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dca:	f7fe fc4f 	bl	800466c <HAL_RCC_GetSysClockFreq>
 8005dce:	61b8      	str	r0, [r7, #24]
        break;
 8005dd0:	e008      	b.n	8005de4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dd6:	61bb      	str	r3, [r7, #24]
        break;
 8005dd8:	e004      	b.n	8005de4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	77bb      	strb	r3, [r7, #30]
        break;
 8005de2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d074      	beq.n	8005ed4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	005a      	lsls	r2, r3, #1
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	441a      	add	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2b0f      	cmp	r3, #15
 8005e04:	d916      	bls.n	8005e34 <UART_SetConfig+0x19c>
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e0c:	d212      	bcs.n	8005e34 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	f023 030f 	bic.w	r3, r3, #15
 8005e16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	89fb      	ldrh	r3, [r7, #14]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	89fa      	ldrh	r2, [r7, #14]
 8005e30:	60da      	str	r2, [r3, #12]
 8005e32:	e04f      	b.n	8005ed4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	77bb      	strb	r3, [r7, #30]
 8005e38:	e04c      	b.n	8005ed4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e3a:	7ffb      	ldrb	r3, [r7, #31]
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d828      	bhi.n	8005e92 <UART_SetConfig+0x1fa>
 8005e40:	a201      	add	r2, pc, #4	; (adr r2, 8005e48 <UART_SetConfig+0x1b0>)
 8005e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e46:	bf00      	nop
 8005e48:	08005e6d 	.word	0x08005e6d
 8005e4c:	08005e75 	.word	0x08005e75
 8005e50:	08005e7d 	.word	0x08005e7d
 8005e54:	08005e93 	.word	0x08005e93
 8005e58:	08005e83 	.word	0x08005e83
 8005e5c:	08005e93 	.word	0x08005e93
 8005e60:	08005e93 	.word	0x08005e93
 8005e64:	08005e93 	.word	0x08005e93
 8005e68:	08005e8b 	.word	0x08005e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e6c:	f7fe fc74 	bl	8004758 <HAL_RCC_GetPCLK1Freq>
 8005e70:	61b8      	str	r0, [r7, #24]
        break;
 8005e72:	e013      	b.n	8005e9c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e74:	f7fe fc92 	bl	800479c <HAL_RCC_GetPCLK2Freq>
 8005e78:	61b8      	str	r0, [r7, #24]
        break;
 8005e7a:	e00f      	b.n	8005e9c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e7c:	4b20      	ldr	r3, [pc, #128]	; (8005f00 <UART_SetConfig+0x268>)
 8005e7e:	61bb      	str	r3, [r7, #24]
        break;
 8005e80:	e00c      	b.n	8005e9c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e82:	f7fe fbf3 	bl	800466c <HAL_RCC_GetSysClockFreq>
 8005e86:	61b8      	str	r0, [r7, #24]
        break;
 8005e88:	e008      	b.n	8005e9c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e8e:	61bb      	str	r3, [r7, #24]
        break;
 8005e90:	e004      	b.n	8005e9c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	77bb      	strb	r3, [r7, #30]
        break;
 8005e9a:	bf00      	nop
    }

    if (pclk != 0U)
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d018      	beq.n	8005ed4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	085a      	lsrs	r2, r3, #1
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	441a      	add	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	2b0f      	cmp	r3, #15
 8005eba:	d909      	bls.n	8005ed0 <UART_SetConfig+0x238>
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec2:	d205      	bcs.n	8005ed0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	60da      	str	r2, [r3, #12]
 8005ece:	e001      	b.n	8005ed4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005ee0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3720      	adds	r7, #32
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	efff69f3 	.word	0xefff69f3
 8005ef0:	40013800 	.word	0x40013800
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	40004400 	.word	0x40004400
 8005efc:	40004800 	.word	0x40004800
 8005f00:	007a1200 	.word	0x007a1200

08005f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00a      	beq.n	8005f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00a      	beq.n	8005f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	f003 0310 	and.w	r3, r3, #16
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00a      	beq.n	8005fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00a      	beq.n	8005fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01a      	beq.n	800601a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006002:	d10a      	bne.n	800601a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	605a      	str	r2, [r3, #4]
  }
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b098      	sub	sp, #96	; 0x60
 800604c:	af02      	add	r7, sp, #8
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006058:	f7fc fa6a 	bl	8002530 <HAL_GetTick>
 800605c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0308 	and.w	r3, r3, #8
 8006068:	2b08      	cmp	r3, #8
 800606a:	d12e      	bne.n	80060ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800606c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006074:	2200      	movs	r2, #0
 8006076:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f88c 	bl	8006198 <UART_WaitOnFlagUntilTimeout>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d021      	beq.n	80060ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	e853 3f00 	ldrex	r3, [r3]
 8006092:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800609a:	653b      	str	r3, [r7, #80]	; 0x50
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060a4:	647b      	str	r3, [r7, #68]	; 0x44
 80060a6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060ac:	e841 2300 	strex	r3, r2, [r1]
 80060b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e6      	bne.n	8006086 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2220      	movs	r2, #32
 80060bc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e062      	b.n	8006190 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d149      	bne.n	800616c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060e0:	2200      	movs	r2, #0
 80060e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f856 	bl	8006198 <UART_WaitOnFlagUntilTimeout>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d03c      	beq.n	800616c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	e853 3f00 	ldrex	r3, [r3]
 80060fe:	623b      	str	r3, [r7, #32]
   return(result);
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006110:	633b      	str	r3, [r7, #48]	; 0x30
 8006112:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006114:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006118:	e841 2300 	strex	r3, r2, [r1]
 800611c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e6      	bne.n	80060f2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3308      	adds	r3, #8
 800612a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	e853 3f00 	ldrex	r3, [r3]
 8006132:	60fb      	str	r3, [r7, #12]
   return(result);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0301 	bic.w	r3, r3, #1
 800613a:	64bb      	str	r3, [r7, #72]	; 0x48
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3308      	adds	r3, #8
 8006142:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006144:	61fa      	str	r2, [r7, #28]
 8006146:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006148:	69b9      	ldr	r1, [r7, #24]
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	e841 2300 	strex	r3, r2, [r1]
 8006150:	617b      	str	r3, [r7, #20]
   return(result);
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e5      	bne.n	8006124 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2220      	movs	r2, #32
 800615c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e011      	b.n	8006190 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2220      	movs	r2, #32
 8006170:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2220      	movs	r2, #32
 8006176:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3758      	adds	r7, #88	; 0x58
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	4613      	mov	r3, r2
 80061a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a8:	e049      	b.n	800623e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b0:	d045      	beq.n	800623e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b2:	f7fc f9bd 	bl	8002530 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d302      	bcc.n	80061c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e048      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d031      	beq.n	800623e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d110      	bne.n	800620a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2208      	movs	r2, #8
 80061ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f838 	bl	8006266 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2208      	movs	r2, #8
 80061fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e029      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006218:	d111      	bne.n	800623e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006222:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f81e 	bl	8006266 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2220      	movs	r2, #32
 800622e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e00f      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4013      	ands	r3, r2
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	429a      	cmp	r2, r3
 800624c:	bf0c      	ite	eq
 800624e:	2301      	moveq	r3, #1
 8006250:	2300      	movne	r3, #0
 8006252:	b2db      	uxtb	r3, r3
 8006254:	461a      	mov	r2, r3
 8006256:	79fb      	ldrb	r3, [r7, #7]
 8006258:	429a      	cmp	r2, r3
 800625a:	d0a6      	beq.n	80061aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006266:	b480      	push	{r7}
 8006268:	b095      	sub	sp, #84	; 0x54
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	461a      	mov	r2, r3
 800628a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800628c:	643b      	str	r3, [r7, #64]	; 0x40
 800628e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006290:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006292:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006294:	e841 2300 	strex	r3, r2, [r1]
 8006298:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e6      	bne.n	800626e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3308      	adds	r3, #8
 80062a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	e853 3f00 	ldrex	r3, [r3]
 80062ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	f023 0301 	bic.w	r3, r3, #1
 80062b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3308      	adds	r3, #8
 80062be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c8:	e841 2300 	strex	r3, r2, [r1]
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e5      	bne.n	80062a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d118      	bne.n	800630e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f023 0310 	bic.w	r3, r3, #16
 80062f0:	647b      	str	r3, [r7, #68]	; 0x44
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062fa:	61bb      	str	r3, [r7, #24]
 80062fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	6979      	ldr	r1, [r7, #20]
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	613b      	str	r3, [r7, #16]
   return(result);
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1e6      	bne.n	80062dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2220      	movs	r2, #32
 8006312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006322:	bf00      	nop
 8006324:	3754      	adds	r7, #84	; 0x54
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
	...

08006330 <__libc_init_array>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	4d0d      	ldr	r5, [pc, #52]	; (8006368 <__libc_init_array+0x38>)
 8006334:	4c0d      	ldr	r4, [pc, #52]	; (800636c <__libc_init_array+0x3c>)
 8006336:	1b64      	subs	r4, r4, r5
 8006338:	10a4      	asrs	r4, r4, #2
 800633a:	2600      	movs	r6, #0
 800633c:	42a6      	cmp	r6, r4
 800633e:	d109      	bne.n	8006354 <__libc_init_array+0x24>
 8006340:	4d0b      	ldr	r5, [pc, #44]	; (8006370 <__libc_init_array+0x40>)
 8006342:	4c0c      	ldr	r4, [pc, #48]	; (8006374 <__libc_init_array+0x44>)
 8006344:	f000 f82e 	bl	80063a4 <_init>
 8006348:	1b64      	subs	r4, r4, r5
 800634a:	10a4      	asrs	r4, r4, #2
 800634c:	2600      	movs	r6, #0
 800634e:	42a6      	cmp	r6, r4
 8006350:	d105      	bne.n	800635e <__libc_init_array+0x2e>
 8006352:	bd70      	pop	{r4, r5, r6, pc}
 8006354:	f855 3b04 	ldr.w	r3, [r5], #4
 8006358:	4798      	blx	r3
 800635a:	3601      	adds	r6, #1
 800635c:	e7ee      	b.n	800633c <__libc_init_array+0xc>
 800635e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006362:	4798      	blx	r3
 8006364:	3601      	adds	r6, #1
 8006366:	e7f2      	b.n	800634e <__libc_init_array+0x1e>
 8006368:	080064d0 	.word	0x080064d0
 800636c:	080064d0 	.word	0x080064d0
 8006370:	080064d0 	.word	0x080064d0
 8006374:	080064d4 	.word	0x080064d4

08006378 <memcpy>:
 8006378:	440a      	add	r2, r1
 800637a:	4291      	cmp	r1, r2
 800637c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006380:	d100      	bne.n	8006384 <memcpy+0xc>
 8006382:	4770      	bx	lr
 8006384:	b510      	push	{r4, lr}
 8006386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800638a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800638e:	4291      	cmp	r1, r2
 8006390:	d1f9      	bne.n	8006386 <memcpy+0xe>
 8006392:	bd10      	pop	{r4, pc}

08006394 <memset>:
 8006394:	4402      	add	r2, r0
 8006396:	4603      	mov	r3, r0
 8006398:	4293      	cmp	r3, r2
 800639a:	d100      	bne.n	800639e <memset+0xa>
 800639c:	4770      	bx	lr
 800639e:	f803 1b01 	strb.w	r1, [r3], #1
 80063a2:	e7f9      	b.n	8006398 <memset+0x4>

080063a4 <_init>:
 80063a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a6:	bf00      	nop
 80063a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063aa:	bc08      	pop	{r3}
 80063ac:	469e      	mov	lr, r3
 80063ae:	4770      	bx	lr

080063b0 <_fini>:
 80063b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b2:	bf00      	nop
 80063b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063b6:	bc08      	pop	{r3}
 80063b8:	469e      	mov	lr, r3
 80063ba:	4770      	bx	lr
