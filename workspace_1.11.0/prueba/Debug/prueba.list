
prueba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002d48  08002d48  00012d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d80  08002d80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d80  08002d80  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d80  08002d80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d80  08002d80  00012d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d84  08002d84  00012d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08002d94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002d94  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb6d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001828  00000000  00000000  0002bba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  0002d3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002dd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a247  00000000  00000000  0002e5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c80c  00000000  00000000  000487e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000991ff  00000000  00000000  00054ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee1f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002570  00000000  00000000  000ee244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d30 	.word	0x08002d30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002d30 	.word	0x08002d30

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa4e 	bl	800066c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f807 	bl	80001e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8cc 	bl	8000370 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f89a 	bl	8000310 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001dc:	f000 f858 	bl	8000290 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e0:	e7fe      	b.n	80001e0 <main+0x18>

080001e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b09c      	sub	sp, #112	; 0x70
 80001e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80001ec:	2228      	movs	r2, #40	; 0x28
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f002 fd95 	bl	8002d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000206:	463b      	mov	r3, r7
 8000208:	2234      	movs	r2, #52	; 0x34
 800020a:	2100      	movs	r1, #0
 800020c:	4618      	mov	r0, r3
 800020e:	f002 fd87 	bl	8002d20 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000212:	2302      	movs	r3, #2
 8000214:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021a:	2310      	movs	r3, #16
 800021c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021e:	2302      	movs	r3, #2
 8000220:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000222:	2300      	movs	r3, #0
 8000224:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000226:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800022a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000230:	4618      	mov	r0, r3
 8000232:	f000 fe17 	bl	8000e64 <HAL_RCC_OscConfig>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800023c:	f000 f900 	bl	8000440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000240:	230f      	movs	r3, #15
 8000242:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000244:	2302      	movs	r3, #2
 8000246:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800024c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000250:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000256:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800025a:	2102      	movs	r1, #2
 800025c:	4618      	mov	r0, r3
 800025e:	f001 fe3f 	bl	8001ee0 <HAL_RCC_ClockConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000268:	f000 f8ea 	bl	8000440 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800026c:	2320      	movs	r3, #32
 800026e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000274:	463b      	mov	r3, r7
 8000276:	4618      	mov	r0, r3
 8000278:	f002 f868 	bl	800234c <HAL_RCCEx_PeriphCLKConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000282:	f000 f8dd 	bl	8000440 <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3770      	adds	r7, #112	; 0x70
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000294:	4b1b      	ldr	r3, [pc, #108]	; (8000304 <MX_I2C1_Init+0x74>)
 8000296:	4a1c      	ldr	r2, [pc, #112]	; (8000308 <MX_I2C1_Init+0x78>)
 8000298:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800029a:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <MX_I2C1_Init+0x74>)
 800029c:	4a1b      	ldr	r2, [pc, #108]	; (800030c <MX_I2C1_Init+0x7c>)
 800029e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002a0:	4b18      	ldr	r3, [pc, #96]	; (8000304 <MX_I2C1_Init+0x74>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002a6:	4b17      	ldr	r3, [pc, #92]	; (8000304 <MX_I2C1_Init+0x74>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ac:	4b15      	ldr	r3, [pc, #84]	; (8000304 <MX_I2C1_Init+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <MX_I2C1_Init+0x74>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <MX_I2C1_Init+0x74>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <MX_I2C1_Init+0x74>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002c4:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_I2C1_Init+0x74>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002ca:	480e      	ldr	r0, [pc, #56]	; (8000304 <MX_I2C1_Init+0x74>)
 80002cc:	f000 fca4 	bl	8000c18 <HAL_I2C_Init>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002d6:	f000 f8b3 	bl	8000440 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002da:	2100      	movs	r1, #0
 80002dc:	4809      	ldr	r0, [pc, #36]	; (8000304 <MX_I2C1_Init+0x74>)
 80002de:	f000 fd2a 	bl	8000d36 <HAL_I2CEx_ConfigAnalogFilter>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80002e8:	f000 f8aa 	bl	8000440 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002ec:	2100      	movs	r1, #0
 80002ee:	4805      	ldr	r0, [pc, #20]	; (8000304 <MX_I2C1_Init+0x74>)
 80002f0:	f000 fd6c 	bl	8000dcc <HAL_I2CEx_ConfigDigitalFilter>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80002fa:	f000 f8a1 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	20000028 	.word	0x20000028
 8000308:	40005400 	.word	0x40005400
 800030c:	2000090e 	.word	0x2000090e

08000310 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000314:	4b14      	ldr	r3, [pc, #80]	; (8000368 <MX_USART2_UART_Init+0x58>)
 8000316:	4a15      	ldr	r2, [pc, #84]	; (800036c <MX_USART2_UART_Init+0x5c>)
 8000318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <MX_USART2_UART_Init+0x58>)
 800031c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000322:	4b11      	ldr	r3, [pc, #68]	; (8000368 <MX_USART2_UART_Init+0x58>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_USART2_UART_Init+0x58>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <MX_USART2_UART_Init+0x58>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <MX_USART2_UART_Init+0x58>)
 8000336:	220c      	movs	r2, #12
 8000338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <MX_USART2_UART_Init+0x58>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <MX_USART2_UART_Init+0x58>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <MX_USART2_UART_Init+0x58>)
 8000348:	2200      	movs	r2, #0
 800034a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <MX_USART2_UART_Init+0x58>)
 800034e:	2200      	movs	r2, #0
 8000350:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <MX_USART2_UART_Init+0x58>)
 8000354:	f002 f98c 	bl	8002670 <HAL_UART_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800035e:	f000 f86f 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000074 	.word	0x20000074
 800036c:	40004400 	.word	0x40004400

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b08a      	sub	sp, #40	; 0x28
 8000374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 0314 	add.w	r3, r7, #20
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000386:	4b2b      	ldr	r3, [pc, #172]	; (8000434 <MX_GPIO_Init+0xc4>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a2a      	ldr	r2, [pc, #168]	; (8000434 <MX_GPIO_Init+0xc4>)
 800038c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b28      	ldr	r3, [pc, #160]	; (8000434 <MX_GPIO_Init+0xc4>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800039a:	613b      	str	r3, [r7, #16]
 800039c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800039e:	4b25      	ldr	r3, [pc, #148]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a24      	ldr	r2, [pc, #144]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003a8:	6153      	str	r3, [r2, #20]
 80003aa:	4b22      	ldr	r3, [pc, #136]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b6:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a1e      	ldr	r2, [pc, #120]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ce:	4b19      	ldr	r3, [pc, #100]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a18      	ldr	r2, [pc, #96]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003d8:	6153      	str	r3, [r2, #20]
 80003da:	4b16      	ldr	r3, [pc, #88]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ec:	4812      	ldr	r0, [pc, #72]	; (8000438 <MX_GPIO_Init+0xc8>)
 80003ee:	f000 fbfb 	bl	8000be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000402:	f107 0314 	add.w	r3, r7, #20
 8000406:	4619      	mov	r1, r3
 8000408:	480c      	ldr	r0, [pc, #48]	; (800043c <MX_GPIO_Init+0xcc>)
 800040a:	f000 fa7b 	bl	8000904 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800040e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000414:	2301      	movs	r3, #1
 8000416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	2300      	movs	r3, #0
 800041a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041c:	2300      	movs	r3, #0
 800041e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	4619      	mov	r1, r3
 8000426:	4804      	ldr	r0, [pc, #16]	; (8000438 <MX_GPIO_Init+0xc8>)
 8000428:	f000 fa6c 	bl	8000904 <HAL_GPIO_Init>

}
 800042c:	bf00      	nop
 800042e:	3728      	adds	r7, #40	; 0x28
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40021000 	.word	0x40021000
 8000438:	48000400 	.word	0x48000400
 800043c:	48000800 	.word	0x48000800

08000440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000444:	b672      	cpsid	i
}
 8000446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000448:	e7fe      	b.n	8000448 <Error_Handler+0x8>
	...

0800044c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <HAL_MspInit+0x44>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <HAL_MspInit+0x44>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <HAL_MspInit+0x44>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <HAL_MspInit+0x44>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a08      	ldr	r2, [pc, #32]	; (8000490 <HAL_MspInit+0x44>)
 8000470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <HAL_MspInit+0x44>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000482:	2007      	movs	r0, #7
 8000484:	f000 fa0a 	bl	800089c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40021000 	.word	0x40021000

08000494 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08a      	sub	sp, #40	; 0x28
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049c:	f107 0314 	add.w	r3, r7, #20
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
 80004aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a17      	ldr	r2, [pc, #92]	; (8000510 <HAL_I2C_MspInit+0x7c>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d128      	bne.n	8000508 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b6:	4b17      	ldr	r3, [pc, #92]	; (8000514 <HAL_I2C_MspInit+0x80>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a16      	ldr	r2, [pc, #88]	; (8000514 <HAL_I2C_MspInit+0x80>)
 80004bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004c0:	6153      	str	r3, [r2, #20]
 80004c2:	4b14      	ldr	r3, [pc, #80]	; (8000514 <HAL_I2C_MspInit+0x80>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ca:	613b      	str	r3, [r7, #16]
 80004cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80004ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80004d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004d4:	2312      	movs	r3, #18
 80004d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004dc:	2303      	movs	r3, #3
 80004de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004e0:	2304      	movs	r3, #4
 80004e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	4619      	mov	r1, r3
 80004ea:	480b      	ldr	r0, [pc, #44]	; (8000518 <HAL_I2C_MspInit+0x84>)
 80004ec:	f000 fa0a 	bl	8000904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <HAL_I2C_MspInit+0x80>)
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	4a07      	ldr	r2, [pc, #28]	; (8000514 <HAL_I2C_MspInit+0x80>)
 80004f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004fa:	61d3      	str	r3, [r2, #28]
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <HAL_I2C_MspInit+0x80>)
 80004fe:	69db      	ldr	r3, [r3, #28]
 8000500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000508:	bf00      	nop
 800050a:	3728      	adds	r7, #40	; 0x28
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40005400 	.word	0x40005400
 8000514:	40021000 	.word	0x40021000
 8000518:	48000400 	.word	0x48000400

0800051c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	; 0x28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a17      	ldr	r2, [pc, #92]	; (8000598 <HAL_UART_MspInit+0x7c>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d128      	bne.n	8000590 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800053e:	4b17      	ldr	r3, [pc, #92]	; (800059c <HAL_UART_MspInit+0x80>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	4a16      	ldr	r2, [pc, #88]	; (800059c <HAL_UART_MspInit+0x80>)
 8000544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000548:	61d3      	str	r3, [r2, #28]
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <HAL_UART_MspInit+0x80>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <HAL_UART_MspInit+0x80>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a10      	ldr	r2, [pc, #64]	; (800059c <HAL_UART_MspInit+0x80>)
 800055c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <HAL_UART_MspInit+0x80>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800056e:	230c      	movs	r3, #12
 8000570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000572:	2302      	movs	r3, #2
 8000574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	2300      	movs	r3, #0
 800057c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800057e:	2307      	movs	r3, #7
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058c:	f000 f9ba 	bl	8000904 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000590:	bf00      	nop
 8000592:	3728      	adds	r7, #40	; 0x28
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40004400 	.word	0x40004400
 800059c:	40021000 	.word	0x40021000

080005a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <NMI_Handler+0x4>

080005a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005aa:	e7fe      	b.n	80005aa <HardFault_Handler+0x4>

080005ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <MemManage_Handler+0x4>

080005b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <BusFault_Handler+0x4>

080005b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <UsageFault_Handler+0x4>

080005be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ec:	f000 f884 	bl	80006f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <SystemInit+0x20>)
 80005fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <SystemInit+0x20>)
 8000600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000650 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <LoopForever+0x6>)
  ldr r1, =_edata
 800061e:	490e      	ldr	r1, [pc, #56]	; (8000658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000620:	4a0e      	ldr	r2, [pc, #56]	; (800065c <LoopForever+0xe>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000634:	4c0b      	ldr	r4, [pc, #44]	; (8000664 <LoopForever+0x16>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000642:	f7ff ffd7 	bl	80005f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000646:	f002 fb47 	bl	8002cd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800064a:	f7ff fdbd 	bl	80001c8 <main>

0800064e <LoopForever>:

LoopForever:
    b LoopForever
 800064e:	e7fe      	b.n	800064e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000650:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800065c:	08002d88 	.word	0x08002d88
  ldr r2, =_sbss
 8000660:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000664:	200000fc 	.word	0x200000fc

08000668 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC1_IRQHandler>
	...

0800066c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <HAL_Init+0x28>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <HAL_Init+0x28>)
 8000676:	f043 0310 	orr.w	r3, r3, #16
 800067a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800067c:	2003      	movs	r0, #3
 800067e:	f000 f90d 	bl	800089c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000682:	2000      	movs	r0, #0
 8000684:	f000 f808 	bl	8000698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000688:	f7ff fee0 	bl	800044c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40022000 	.word	0x40022000

08000698 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_InitTick+0x54>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <HAL_InitTick+0x58>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4619      	mov	r1, r3
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80006b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f917 	bl	80008ea <HAL_SYSTICK_Config>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e00e      	b.n	80006e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2b0f      	cmp	r3, #15
 80006ca:	d80a      	bhi.n	80006e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006cc:	2200      	movs	r2, #0
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	f04f 30ff 	mov.w	r0, #4294967295
 80006d4:	f000 f8ed 	bl	80008b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d8:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <HAL_InitTick+0x5c>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006de:	2300      	movs	r3, #0
 80006e0:	e000      	b.n	80006e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000000 	.word	0x20000000
 80006f0:	20000008 	.word	0x20000008
 80006f4:	20000004 	.word	0x20000004

080006f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_IncTick+0x20>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_IncTick+0x24>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4413      	add	r3, r2
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <HAL_IncTick+0x24>)
 800070a:	6013      	str	r3, [r2, #0]
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000008 	.word	0x20000008
 800071c:	200000f8 	.word	0x200000f8

08000720 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return uwTick;  
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <HAL_GetTick+0x14>)
 8000726:	681b      	ldr	r3, [r3, #0]
}
 8000728:	4618      	mov	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	200000f8 	.word	0x200000f8

08000738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000754:	4013      	ands	r3, r2
 8000756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076a:	4a04      	ldr	r2, [pc, #16]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	60d3      	str	r3, [r2, #12]
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <__NVIC_GetPriorityGrouping+0x18>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	f003 0307 	and.w	r3, r3, #7
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	db0a      	blt.n	80007c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	490c      	ldr	r1, [pc, #48]	; (80007e8 <__NVIC_SetPriority+0x4c>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	b2d2      	uxtb	r2, r2
 80007be:	440b      	add	r3, r1
 80007c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c4:	e00a      	b.n	80007dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4908      	ldr	r1, [pc, #32]	; (80007ec <__NVIC_SetPriority+0x50>)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	3b04      	subs	r3, #4
 80007d4:	0112      	lsls	r2, r2, #4
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	440b      	add	r3, r1
 80007da:	761a      	strb	r2, [r3, #24]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000e100 	.word	0xe000e100
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b089      	sub	sp, #36	; 0x24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	f1c3 0307 	rsb	r3, r3, #7
 800080a:	2b04      	cmp	r3, #4
 800080c:	bf28      	it	cs
 800080e:	2304      	movcs	r3, #4
 8000810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3304      	adds	r3, #4
 8000816:	2b06      	cmp	r3, #6
 8000818:	d902      	bls.n	8000820 <NVIC_EncodePriority+0x30>
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3b03      	subs	r3, #3
 800081e:	e000      	b.n	8000822 <NVIC_EncodePriority+0x32>
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	43da      	mvns	r2, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	401a      	ands	r2, r3
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000838:	f04f 31ff 	mov.w	r1, #4294967295
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43d9      	mvns	r1, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	4313      	orrs	r3, r2
         );
}
 800084a:	4618      	mov	r0, r3
 800084c:	3724      	adds	r7, #36	; 0x24
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3b01      	subs	r3, #1
 8000864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000868:	d301      	bcc.n	800086e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800086a:	2301      	movs	r3, #1
 800086c:	e00f      	b.n	800088e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <SysTick_Config+0x40>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3b01      	subs	r3, #1
 8000874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000876:	210f      	movs	r1, #15
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f7ff ff8e 	bl	800079c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <SysTick_Config+0x40>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <SysTick_Config+0x40>)
 8000888:	2207      	movs	r2, #7
 800088a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	e000e010 	.word	0xe000e010

0800089c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff ff47 	bl	8000738 <__NVIC_SetPriorityGrouping>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b086      	sub	sp, #24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
 80008be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008c4:	f7ff ff5c 	bl	8000780 <__NVIC_GetPriorityGrouping>
 80008c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	68b9      	ldr	r1, [r7, #8]
 80008ce:	6978      	ldr	r0, [r7, #20]
 80008d0:	f7ff ff8e 	bl	80007f0 <NVIC_EncodePriority>
 80008d4:	4602      	mov	r2, r0
 80008d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008da:	4611      	mov	r1, r2
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff5d 	bl	800079c <__NVIC_SetPriority>
}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ffb0 	bl	8000858 <SysTick_Config>
 80008f8:	4603      	mov	r3, r0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000912:	e14e      	b.n	8000bb2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	2101      	movs	r1, #1
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	fa01 f303 	lsl.w	r3, r1, r3
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b00      	cmp	r3, #0
 8000928:	f000 8140 	beq.w	8000bac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f003 0303 	and.w	r3, r3, #3
 8000934:	2b01      	cmp	r3, #1
 8000936:	d005      	beq.n	8000944 <HAL_GPIO_Init+0x40>
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0303 	and.w	r3, r3, #3
 8000940:	2b02      	cmp	r3, #2
 8000942:	d130      	bne.n	80009a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2203      	movs	r2, #3
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68da      	ldr	r2, [r3, #12]
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	4313      	orrs	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800097a:	2201      	movs	r2, #1
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	091b      	lsrs	r3, r3, #4
 8000990:	f003 0201 	and.w	r2, r3, #1
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f003 0303 	and.w	r3, r3, #3
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d017      	beq.n	80009e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	2203      	movs	r2, #3
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f003 0303 	and.w	r3, r3, #3
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d123      	bne.n	8000a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	08da      	lsrs	r2, r3, #3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3208      	adds	r2, #8
 80009f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	220f      	movs	r2, #15
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	691a      	ldr	r2, [r3, #16]
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	f003 0307 	and.w	r3, r3, #7
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	08da      	lsrs	r2, r3, #3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3208      	adds	r2, #8
 8000a30:	6939      	ldr	r1, [r7, #16]
 8000a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2203      	movs	r2, #3
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 0203 	and.w	r2, r3, #3
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 809a 	beq.w	8000bac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a78:	4b55      	ldr	r3, [pc, #340]	; (8000bd0 <HAL_GPIO_Init+0x2cc>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a54      	ldr	r2, [pc, #336]	; (8000bd0 <HAL_GPIO_Init+0x2cc>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b52      	ldr	r3, [pc, #328]	; (8000bd0 <HAL_GPIO_Init+0x2cc>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a90:	4a50      	ldr	r2, [pc, #320]	; (8000bd4 <HAL_GPIO_Init+0x2d0>)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	3302      	adds	r3, #2
 8000a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	220f      	movs	r2, #15
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aba:	d013      	beq.n	8000ae4 <HAL_GPIO_Init+0x1e0>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a46      	ldr	r2, [pc, #280]	; (8000bd8 <HAL_GPIO_Init+0x2d4>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d00d      	beq.n	8000ae0 <HAL_GPIO_Init+0x1dc>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a45      	ldr	r2, [pc, #276]	; (8000bdc <HAL_GPIO_Init+0x2d8>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d007      	beq.n	8000adc <HAL_GPIO_Init+0x1d8>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a44      	ldr	r2, [pc, #272]	; (8000be0 <HAL_GPIO_Init+0x2dc>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d101      	bne.n	8000ad8 <HAL_GPIO_Init+0x1d4>
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	e006      	b.n	8000ae6 <HAL_GPIO_Init+0x1e2>
 8000ad8:	2305      	movs	r3, #5
 8000ada:	e004      	b.n	8000ae6 <HAL_GPIO_Init+0x1e2>
 8000adc:	2302      	movs	r3, #2
 8000ade:	e002      	b.n	8000ae6 <HAL_GPIO_Init+0x1e2>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e000      	b.n	8000ae6 <HAL_GPIO_Init+0x1e2>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	f002 0203 	and.w	r2, r2, #3
 8000aec:	0092      	lsls	r2, r2, #2
 8000aee:	4093      	lsls	r3, r2
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000af6:	4937      	ldr	r1, [pc, #220]	; (8000bd4 <HAL_GPIO_Init+0x2d0>)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	089b      	lsrs	r3, r3, #2
 8000afc:	3302      	adds	r3, #2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b04:	4b37      	ldr	r3, [pc, #220]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b28:	4a2e      	ldr	r2, [pc, #184]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b52:	4a24      	ldr	r2, [pc, #144]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b7c:	4a19      	ldr	r2, [pc, #100]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f47f aea9 	bne.w	8000914 <HAL_GPIO_Init+0x10>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	371c      	adds	r7, #28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010000 	.word	0x40010000
 8000bd8:	48000400 	.word	0x48000400
 8000bdc:	48000800 	.word	0x48000800
 8000be0:	48000c00 	.word	0x48000c00
 8000be4:	40010400 	.word	0x40010400

08000be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	807b      	strh	r3, [r7, #2]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bf8:	787b      	ldrb	r3, [r7, #1]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d003      	beq.n	8000c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bfe:	887a      	ldrh	r2, [r7, #2]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c04:	e002      	b.n	8000c0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c06:	887a      	ldrh	r2, [r7, #2]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e081      	b.n	8000d2e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d106      	bne.n	8000c44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff fc28 	bl	8000494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2224      	movs	r2, #36	; 0x24
 8000c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 0201 	bic.w	r2, r2, #1
 8000c5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d107      	bne.n	8000c92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	e006      	b.n	8000ca0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000c9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d104      	bne.n	8000cb2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	6812      	ldr	r2, [r2, #0]
 8000cbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	68da      	ldr	r2, [r3, #12]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	691a      	ldr	r2, [r3, #16]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	430a      	orrs	r2, r1
 8000cee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	69d9      	ldr	r1, [r3, #28]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a1a      	ldr	r2, [r3, #32]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f042 0201 	orr.w	r2, r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2220      	movs	r2, #32
 8000d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b20      	cmp	r3, #32
 8000d4a:	d138      	bne.n	8000dbe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d101      	bne.n	8000d5a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000d56:	2302      	movs	r3, #2
 8000d58:	e032      	b.n	8000dc0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2224      	movs	r2, #36	; 0x24
 8000d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f022 0201 	bic.w	r2, r2, #1
 8000d78:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d88:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6819      	ldr	r1, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	430a      	orrs	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f042 0201 	orr.w	r2, r2, #1
 8000da8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2220      	movs	r2, #32
 8000dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000dbe:	2302      	movs	r3, #2
  }
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b20      	cmp	r3, #32
 8000de0:	d139      	bne.n	8000e56 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d101      	bne.n	8000df0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000dec:	2302      	movs	r3, #2
 8000dee:	e033      	b.n	8000e58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2201      	movs	r2, #1
 8000df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2224      	movs	r2, #36	; 0x24
 8000dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 0201 	bic.w	r2, r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e1e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f042 0201 	orr.w	r2, r2, #1
 8000e40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2220      	movs	r2, #32
 8000e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e000      	b.n	8000e58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000e56:	2302      	movs	r3, #2
  }
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e74:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	f001 b823 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 817d 	beq.w	800119a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ea0:	4bbc      	ldr	r3, [pc, #752]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 030c 	and.w	r3, r3, #12
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	d00c      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eac:	4bb9      	ldr	r3, [pc, #740]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 030c 	and.w	r3, r3, #12
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d15c      	bne.n	8000f72 <HAL_RCC_OscConfig+0x10e>
 8000eb8:	4bb6      	ldr	r3, [pc, #728]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec4:	d155      	bne.n	8000f72 <HAL_RCC_OscConfig+0x10e>
 8000ec6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ece:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000ed2:	fa93 f3a3 	rbit	r3, r3
 8000ed6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eda:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ede:	fab3 f383 	clz	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	095b      	lsrs	r3, r3, #5
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d102      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x94>
 8000ef2:	4ba8      	ldr	r3, [pc, #672]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	e015      	b.n	8000f24 <HAL_RCC_OscConfig+0xc0>
 8000ef8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000efc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f00:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f04:	fa93 f3a3 	rbit	r3, r3
 8000f08:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f10:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f14:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f18:	fa93 f3a3 	rbit	r3, r3
 8000f1c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f20:	4b9c      	ldr	r3, [pc, #624]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f28:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f2c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f30:	fa92 f2a2 	rbit	r2, r2
 8000f34:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f38:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f3c:	fab2 f282 	clz	r2, r2
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	f042 0220 	orr.w	r2, r2, #32
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	f002 021f 	and.w	r2, r2, #31
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 811f 	beq.w	8001198 <HAL_RCC_OscConfig+0x334>
 8000f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f040 8116 	bne.w	8001198 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	f000 bfaf 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f82:	d106      	bne.n	8000f92 <HAL_RCC_OscConfig+0x12e>
 8000f84:	4b83      	ldr	r3, [pc, #524]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a82      	ldr	r2, [pc, #520]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	e036      	b.n	8001000 <HAL_RCC_OscConfig+0x19c>
 8000f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10c      	bne.n	8000fbc <HAL_RCC_OscConfig+0x158>
 8000fa2:	4b7c      	ldr	r3, [pc, #496]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a7b      	ldr	r2, [pc, #492]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	4b79      	ldr	r3, [pc, #484]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a78      	ldr	r2, [pc, #480]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	e021      	b.n	8001000 <HAL_RCC_OscConfig+0x19c>
 8000fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x184>
 8000fce:	4b71      	ldr	r3, [pc, #452]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a70      	ldr	r2, [pc, #448]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	4b6e      	ldr	r3, [pc, #440]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a6d      	ldr	r2, [pc, #436]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e00b      	b.n	8001000 <HAL_RCC_OscConfig+0x19c>
 8000fe8:	4b6a      	ldr	r3, [pc, #424]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a69      	ldr	r2, [pc, #420]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b67      	ldr	r3, [pc, #412]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a66      	ldr	r2, [pc, #408]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8000ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001000:	4b64      	ldr	r3, [pc, #400]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8001002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001004:	f023 020f 	bic.w	r2, r3, #15
 8001008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800100c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	495f      	ldr	r1, [pc, #380]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8001016:	4313      	orrs	r3, r2
 8001018:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800101a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800101e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d059      	beq.n	80010de <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102a:	f7ff fb79 	bl	8000720 <HAL_GetTick>
 800102e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001032:	e00a      	b.n	800104a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fb74 	bl	8000720 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b64      	cmp	r3, #100	; 0x64
 8001042:	d902      	bls.n	800104a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	f000 bf43 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>
 800104a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800104e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001052:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001056:	fa93 f3a3 	rbit	r3, r3
 800105a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800105e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001062:	fab3 f383 	clz	r3, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	095b      	lsrs	r3, r3, #5
 800106a:	b2db      	uxtb	r3, r3
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d102      	bne.n	800107c <HAL_RCC_OscConfig+0x218>
 8001076:	4b47      	ldr	r3, [pc, #284]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	e015      	b.n	80010a8 <HAL_RCC_OscConfig+0x244>
 800107c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001080:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001084:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001088:	fa93 f3a3 	rbit	r3, r3
 800108c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001094:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001098:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800109c:	fa93 f3a3 	rbit	r3, r3
 80010a0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80010a4:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010ac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80010b0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010b4:	fa92 f2a2 	rbit	r2, r2
 80010b8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80010bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80010c0:	fab2 f282 	clz	r2, r2
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	f042 0220 	orr.w	r2, r2, #32
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	f002 021f 	and.w	r2, r2, #31
 80010d0:	2101      	movs	r1, #1
 80010d2:	fa01 f202 	lsl.w	r2, r1, r2
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0ab      	beq.n	8001034 <HAL_RCC_OscConfig+0x1d0>
 80010dc:	e05d      	b.n	800119a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010de:	f7ff fb1f 	bl	8000720 <HAL_GetTick>
 80010e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e6:	e00a      	b.n	80010fe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010e8:	f7ff fb1a 	bl	8000720 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b64      	cmp	r3, #100	; 0x64
 80010f6:	d902      	bls.n	80010fe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	f000 bee9 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>
 80010fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001102:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001112:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001116:	fab3 f383 	clz	r3, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	095b      	lsrs	r3, r3, #5
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b01      	cmp	r3, #1
 8001128:	d102      	bne.n	8001130 <HAL_RCC_OscConfig+0x2cc>
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	e015      	b.n	800115c <HAL_RCC_OscConfig+0x2f8>
 8001130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001134:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001138:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800113c:	fa93 f3a3 	rbit	r3, r3
 8001140:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001148:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800114c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_RCC_OscConfig+0x330>)
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001160:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001164:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001168:	fa92 f2a2 	rbit	r2, r2
 800116c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001170:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001174:	fab2 f282 	clz	r2, r2
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	f042 0220 	orr.w	r2, r2, #32
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	f002 021f 	and.w	r2, r2, #31
 8001184:	2101      	movs	r1, #1
 8001186:	fa01 f202 	lsl.w	r2, r1, r2
 800118a:	4013      	ands	r3, r2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1ab      	bne.n	80010e8 <HAL_RCC_OscConfig+0x284>
 8001190:	e003      	b.n	800119a <HAL_RCC_OscConfig+0x336>
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800119e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 817d 	beq.w	80014aa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011b0:	4ba6      	ldr	r3, [pc, #664]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 030c 	and.w	r3, r3, #12
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00b      	beq.n	80011d4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011bc:	4ba3      	ldr	r3, [pc, #652]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 030c 	and.w	r3, r3, #12
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d172      	bne.n	80012ae <HAL_RCC_OscConfig+0x44a>
 80011c8:	4ba0      	ldr	r3, [pc, #640]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d16c      	bne.n	80012ae <HAL_RCC_OscConfig+0x44a>
 80011d4:	2302      	movs	r3, #2
 80011d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80011e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	095b      	lsrs	r3, r3, #5
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d102      	bne.n	8001204 <HAL_RCC_OscConfig+0x3a0>
 80011fe:	4b93      	ldr	r3, [pc, #588]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	e013      	b.n	800122c <HAL_RCC_OscConfig+0x3c8>
 8001204:	2302      	movs	r3, #2
 8001206:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001216:	2302      	movs	r3, #2
 8001218:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800121c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001220:	fa93 f3a3 	rbit	r3, r3
 8001224:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001228:	4b88      	ldr	r3, [pc, #544]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	2202      	movs	r2, #2
 800122e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001232:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001236:	fa92 f2a2 	rbit	r2, r2
 800123a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800123e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001242:	fab2 f282 	clz	r2, r2
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	f042 0220 	orr.w	r2, r2, #32
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	f002 021f 	and.w	r2, r2, #31
 8001252:	2101      	movs	r1, #1
 8001254:	fa01 f202 	lsl.w	r2, r1, r2
 8001258:	4013      	ands	r3, r2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00a      	beq.n	8001274 <HAL_RCC_OscConfig+0x410>
 800125e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001262:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d002      	beq.n	8001274 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	f000 be2e 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001274:	4b75      	ldr	r3, [pc, #468]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800127c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001280:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	21f8      	movs	r1, #248	; 0xf8
 800128a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001292:	fa91 f1a1 	rbit	r1, r1
 8001296:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800129a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800129e:	fab1 f181 	clz	r1, r1
 80012a2:	b2c9      	uxtb	r1, r1
 80012a4:	408b      	lsls	r3, r1
 80012a6:	4969      	ldr	r1, [pc, #420]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ac:	e0fd      	b.n	80014aa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8088 	beq.w	80013d0 <HAL_RCC_OscConfig+0x56c>
 80012c0:	2301      	movs	r3, #1
 80012c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80012d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d6:	fab3 f383 	clz	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	461a      	mov	r2, r3
 80012e8:	2301      	movs	r3, #1
 80012ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fa18 	bl	8000720 <HAL_GetTick>
 80012f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f4:	e00a      	b.n	800130c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f6:	f7ff fa13 	bl	8000720 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d902      	bls.n	800130c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	f000 bde2 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>
 800130c:	2302      	movs	r3, #2
 800130e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001316:	fa93 f3a3 	rbit	r3, r3
 800131a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800131e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	fab3 f383 	clz	r3, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	095b      	lsrs	r3, r3, #5
 800132a:	b2db      	uxtb	r3, r3
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b01      	cmp	r3, #1
 8001334:	d102      	bne.n	800133c <HAL_RCC_OscConfig+0x4d8>
 8001336:	4b45      	ldr	r3, [pc, #276]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	e013      	b.n	8001364 <HAL_RCC_OscConfig+0x500>
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001346:	fa93 f3a3 	rbit	r3, r3
 800134a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001354:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001358:	fa93 f3a3 	rbit	r3, r3
 800135c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001360:	4b3a      	ldr	r3, [pc, #232]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	2202      	movs	r2, #2
 8001366:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800136a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800136e:	fa92 f2a2 	rbit	r2, r2
 8001372:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001376:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800137a:	fab2 f282 	clz	r2, r2
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	f042 0220 	orr.w	r2, r2, #32
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	f002 021f 	and.w	r2, r2, #31
 800138a:	2101      	movs	r1, #1
 800138c:	fa01 f202 	lsl.w	r2, r1, r2
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0af      	beq.n	80012f6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800139e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	21f8      	movs	r1, #248	; 0xf8
 80013ac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013b4:	fa91 f1a1 	rbit	r1, r1
 80013b8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80013bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80013c0:	fab1 f181 	clz	r1, r1
 80013c4:	b2c9      	uxtb	r1, r1
 80013c6:	408b      	lsls	r3, r1
 80013c8:	4920      	ldr	r1, [pc, #128]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]
 80013ce:	e06c      	b.n	80014aa <HAL_RCC_OscConfig+0x646>
 80013d0:	2301      	movs	r3, #1
 80013d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80013da:	fa93 f3a3 	rbit	r3, r3
 80013de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80013e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e6:	fab3 f383 	clz	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	461a      	mov	r2, r3
 80013f8:	2300      	movs	r3, #0
 80013fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff f990 	bl	8000720 <HAL_GetTick>
 8001400:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001404:	e00a      	b.n	800141c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff f98b 	bl	8000720 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d902      	bls.n	800141c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	f000 bd5a 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>
 800141c:	2302      	movs	r3, #2
 800141e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001426:	fa93 f3a3 	rbit	r3, r3
 800142a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800142e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	fab3 f383 	clz	r3, r3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	095b      	lsrs	r3, r3, #5
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b01      	cmp	r3, #1
 8001444:	d104      	bne.n	8001450 <HAL_RCC_OscConfig+0x5ec>
 8001446:	4b01      	ldr	r3, [pc, #4]	; (800144c <HAL_RCC_OscConfig+0x5e8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	e015      	b.n	8001478 <HAL_RCC_OscConfig+0x614>
 800144c:	40021000 	.word	0x40021000
 8001450:	2302      	movs	r3, #2
 8001452:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001456:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800145a:	fa93 f3a3 	rbit	r3, r3
 800145e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001462:	2302      	movs	r3, #2
 8001464:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001468:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800146c:	fa93 f3a3 	rbit	r3, r3
 8001470:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001474:	4bc8      	ldr	r3, [pc, #800]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	2202      	movs	r2, #2
 800147a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800147e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001482:	fa92 f2a2 	rbit	r2, r2
 8001486:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800148a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800148e:	fab2 f282 	clz	r2, r2
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	f042 0220 	orr.w	r2, r2, #32
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	f002 021f 	and.w	r2, r2, #31
 800149e:	2101      	movs	r1, #1
 80014a0:	fa01 f202 	lsl.w	r2, r1, r2
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1ad      	bne.n	8001406 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8110 	beq.w	80016e0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d079      	beq.n	80015c4 <HAL_RCC_OscConfig+0x760>
 80014d0:	2301      	movs	r3, #1
 80014d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014da:	fa93 f3a3 	rbit	r3, r3
 80014de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80014e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e6:	fab3 f383 	clz	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	4bab      	ldr	r3, [pc, #684]	; (800179c <HAL_RCC_OscConfig+0x938>)
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	461a      	mov	r2, r3
 80014f6:	2301      	movs	r3, #1
 80014f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fa:	f7ff f911 	bl	8000720 <HAL_GetTick>
 80014fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	e00a      	b.n	800151a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001504:	f7ff f90c 	bl	8000720 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d902      	bls.n	800151a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	f000 bcdb 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>
 800151a:	2302      	movs	r3, #2
 800151c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001524:	fa93 f3a3 	rbit	r3, r3
 8001528:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800152c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001530:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001534:	2202      	movs	r2, #2
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	fa93 f2a3 	rbit	r2, r3
 8001546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001558:	2202      	movs	r2, #2
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	fa93 f2a3 	rbit	r2, r3
 800156a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001572:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001574:	4b88      	ldr	r3, [pc, #544]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 8001576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001580:	2102      	movs	r1, #2
 8001582:	6019      	str	r1, [r3, #0]
 8001584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001588:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	fa93 f1a3 	rbit	r1, r3
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800159a:	6019      	str	r1, [r3, #0]
  return result;
 800159c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	fab3 f383 	clz	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f003 031f 	and.w	r3, r3, #31
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	4013      	ands	r3, r2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0a0      	beq.n	8001504 <HAL_RCC_OscConfig+0x6a0>
 80015c2:	e08d      	b.n	80016e0 <HAL_RCC_OscConfig+0x87c>
 80015c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	fa93 f2a3 	rbit	r2, r3
 80015de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015e6:	601a      	str	r2, [r3, #0]
  return result;
 80015e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f2:	fab3 f383 	clz	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b68      	ldr	r3, [pc, #416]	; (800179c <HAL_RCC_OscConfig+0x938>)
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	461a      	mov	r2, r3
 8001602:	2300      	movs	r3, #0
 8001604:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001606:	f7ff f88b 	bl	8000720 <HAL_GetTick>
 800160a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160e:	e00a      	b.n	8001626 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001610:	f7ff f886 	bl	8000720 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d902      	bls.n	8001626 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	f000 bc55 	b.w	8001ed0 <HAL_RCC_OscConfig+0x106c>
 8001626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800162e:	2202      	movs	r2, #2
 8001630:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001636:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	fa93 f2a3 	rbit	r2, r3
 8001640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001644:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001652:	2202      	movs	r2, #2
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	fa93 f2a3 	rbit	r2, r3
 8001664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001668:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001672:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001676:	2202      	movs	r2, #2
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	fa93 f2a3 	rbit	r2, r3
 8001688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001690:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001692:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 8001694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800169e:	2102      	movs	r1, #2
 80016a0:	6019      	str	r1, [r3, #0]
 80016a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	fa93 f1a3 	rbit	r1, r3
 80016b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016b8:	6019      	str	r1, [r3, #0]
  return result;
 80016ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	fab3 f383 	clz	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	2101      	movs	r1, #1
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d197      	bne.n	8001610 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 81a1 	beq.w	8001a38 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fc:	4b26      	ldr	r3, [pc, #152]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d116      	bne.n	8001736 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	4a22      	ldr	r2, [pc, #136]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 800170e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001712:	61d3      	str	r3, [r2, #28]
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800171c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001720:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800172e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001730:	2301      	movs	r3, #1
 8001732:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <HAL_RCC_OscConfig+0x93c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173e:	2b00      	cmp	r3, #0
 8001740:	d11a      	bne.n	8001778 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <HAL_RCC_OscConfig+0x93c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a16      	ldr	r2, [pc, #88]	; (80017a0 <HAL_RCC_OscConfig+0x93c>)
 8001748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174e:	f7fe ffe7 	bl	8000720 <HAL_GetTick>
 8001752:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001756:	e009      	b.n	800176c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001758:	f7fe ffe2 	bl	8000720 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b64      	cmp	r3, #100	; 0x64
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e3b1      	b.n	8001ed0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_RCC_OscConfig+0x93c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0ef      	beq.n	8001758 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d10d      	bne.n	80017a4 <HAL_RCC_OscConfig+0x940>
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	4a02      	ldr	r2, [pc, #8]	; (8001798 <HAL_RCC_OscConfig+0x934>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6213      	str	r3, [r2, #32]
 8001794:	e03c      	b.n	8001810 <HAL_RCC_OscConfig+0x9ac>
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	10908120 	.word	0x10908120
 80017a0:	40007000 	.word	0x40007000
 80017a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10c      	bne.n	80017ce <HAL_RCC_OscConfig+0x96a>
 80017b4:	4bc1      	ldr	r3, [pc, #772]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4ac0      	ldr	r2, [pc, #768]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	6213      	str	r3, [r2, #32]
 80017c0:	4bbe      	ldr	r3, [pc, #760]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	4abd      	ldr	r2, [pc, #756]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017c6:	f023 0304 	bic.w	r3, r3, #4
 80017ca:	6213      	str	r3, [r2, #32]
 80017cc:	e020      	b.n	8001810 <HAL_RCC_OscConfig+0x9ac>
 80017ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x994>
 80017de:	4bb7      	ldr	r3, [pc, #732]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4ab6      	ldr	r2, [pc, #728]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6213      	str	r3, [r2, #32]
 80017ea:	4bb4      	ldr	r3, [pc, #720]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	4ab3      	ldr	r2, [pc, #716]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6213      	str	r3, [r2, #32]
 80017f6:	e00b      	b.n	8001810 <HAL_RCC_OscConfig+0x9ac>
 80017f8:	4bb0      	ldr	r3, [pc, #704]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4aaf      	ldr	r2, [pc, #700]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	6213      	str	r3, [r2, #32]
 8001804:	4bad      	ldr	r3, [pc, #692]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4aac      	ldr	r2, [pc, #688]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 800180a:	f023 0304 	bic.w	r3, r3, #4
 800180e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001814:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 8081 	beq.w	8001924 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001822:	f7fe ff7d 	bl	8000720 <HAL_GetTick>
 8001826:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182a:	e00b      	b.n	8001844 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7fe ff78 	bl	8000720 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f241 3288 	movw	r2, #5000	; 0x1388
 800183c:	4293      	cmp	r3, r2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e345      	b.n	8001ed0 <HAL_RCC_OscConfig+0x106c>
 8001844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001848:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800184c:	2202      	movs	r2, #2
 800184e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001854:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	fa93 f2a3 	rbit	r2, r3
 800185e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001862:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001870:	2202      	movs	r2, #2
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001878:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	fa93 f2a3 	rbit	r2, r3
 8001882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001886:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800188a:	601a      	str	r2, [r3, #0]
  return result;
 800188c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001890:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001894:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	095b      	lsrs	r3, r3, #5
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d102      	bne.n	80018b0 <HAL_RCC_OscConfig+0xa4c>
 80018aa:	4b84      	ldr	r3, [pc, #528]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	e013      	b.n	80018d8 <HAL_RCC_OscConfig+0xa74>
 80018b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018b8:	2202      	movs	r2, #2
 80018ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	fa93 f2a3 	rbit	r2, r3
 80018ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	4b79      	ldr	r3, [pc, #484]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018e0:	2102      	movs	r1, #2
 80018e2:	6011      	str	r1, [r2, #0]
 80018e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018e8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	fa92 f1a2 	rbit	r1, r2
 80018f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018fa:	6011      	str	r1, [r2, #0]
  return result;
 80018fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001900:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	fab2 f282 	clz	r2, r2
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	f002 021f 	and.w	r2, r2, #31
 8001916:	2101      	movs	r1, #1
 8001918:	fa01 f202 	lsl.w	r2, r1, r2
 800191c:	4013      	ands	r3, r2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d084      	beq.n	800182c <HAL_RCC_OscConfig+0x9c8>
 8001922:	e07f      	b.n	8001a24 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7fe fefc 	bl	8000720 <HAL_GetTick>
 8001928:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192c:	e00b      	b.n	8001946 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7fe fef7 	bl	8000720 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	; 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e2c4      	b.n	8001ed0 <HAL_RCC_OscConfig+0x106c>
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800194e:	2202      	movs	r2, #2
 8001950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001956:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	fa93 f2a3 	rbit	r2, r3
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001972:	2202      	movs	r2, #2
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	fa93 f2a3 	rbit	r2, r3
 8001984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001988:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800198c:	601a      	str	r2, [r3, #0]
  return result;
 800198e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001992:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001996:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d102      	bne.n	80019b2 <HAL_RCC_OscConfig+0xb4e>
 80019ac:	4b43      	ldr	r3, [pc, #268]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	e013      	b.n	80019da <HAL_RCC_OscConfig+0xb76>
 80019b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019ba:	2202      	movs	r2, #2
 80019bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fa93 f2a3 	rbit	r2, r3
 80019cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	4b39      	ldr	r3, [pc, #228]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019e2:	2102      	movs	r1, #2
 80019e4:	6011      	str	r1, [r2, #0]
 80019e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	fa92 f1a2 	rbit	r1, r2
 80019f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019f8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019fc:	6011      	str	r1, [r2, #0]
  return result;
 80019fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a02:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	fab2 f282 	clz	r2, r2
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	f002 021f 	and.w	r2, r2, #31
 8001a18:	2101      	movs	r1, #1
 8001a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d184      	bne.n	800192e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a24:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d105      	bne.n	8001a38 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2c:	4b23      	ldr	r3, [pc, #140]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	4a22      	ldr	r2, [pc, #136]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 8001a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a36:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 8242 	beq.w	8001ece <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_RCC_OscConfig+0xc58>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	f000 8213 	beq.w	8001e7e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	f040 8162 	bne.w	8001d2e <HAL_RCC_OscConfig+0xeca>
 8001a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	fa93 f2a3 	rbit	r2, r3
 8001a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a8e:	601a      	str	r2, [r3, #0]
  return result;
 8001a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a94:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a98:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aa4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	461a      	mov	r2, r3
 8001aac:	2300      	movs	r3, #0
 8001aae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7fe fe36 	bl	8000720 <HAL_GetTick>
 8001ab4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab8:	e00c      	b.n	8001ad4 <HAL_RCC_OscConfig+0xc70>
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7fe fe2e 	bl	8000720 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e1fd      	b.n	8001ed0 <HAL_RCC_OscConfig+0x106c>
 8001ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001adc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	fa93 f2a3 	rbit	r2, r3
 8001af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001af8:	601a      	str	r2, [r3, #0]
  return result;
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b04:	fab3 f383 	clz	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d102      	bne.n	8001b1e <HAL_RCC_OscConfig+0xcba>
 8001b18:	4bb0      	ldr	r3, [pc, #704]	; (8001ddc <HAL_RCC_OscConfig+0xf78>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	e027      	b.n	8001b6e <HAL_RCC_OscConfig+0xd0a>
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b30:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	fa93 f2a3 	rbit	r2, r3
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b56:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fa93 f2a3 	rbit	r2, r3
 8001b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b64:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	4b9c      	ldr	r3, [pc, #624]	; (8001ddc <HAL_RCC_OscConfig+0xf78>)
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b72:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b76:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b7a:	6011      	str	r1, [r2, #0]
 8001b7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b80:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	fa92 f1a2 	rbit	r1, r2
 8001b8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b8e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b92:	6011      	str	r1, [r2, #0]
  return result;
 8001b94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b98:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	fab2 f282 	clz	r2, r2
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	f042 0220 	orr.w	r2, r2, #32
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f002 021f 	and.w	r2, r2, #31
 8001bae:	2101      	movs	r1, #1
 8001bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d182      	bne.n	8001ac0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bba:	4b88      	ldr	r3, [pc, #544]	; (8001ddc <HAL_RCC_OscConfig+0xf78>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	497f      	ldr	r1, [pc, #508]	; (8001ddc <HAL_RCC_OscConfig+0xf78>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	fa93 f2a3 	rbit	r2, r3
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c06:	601a      	str	r2, [r3, #0]
  return result;
 8001c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c10:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	461a      	mov	r2, r3
 8001c24:	2301      	movs	r3, #1
 8001c26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7fe fd7a 	bl	8000720 <HAL_GetTick>
 8001c2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c30:	e009      	b.n	8001c46 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c32:	f7fe fd75 	bl	8000720 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e144      	b.n	8001ed0 <HAL_RCC_OscConfig+0x106c>
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c58:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	fa93 f2a3 	rbit	r2, r3
 8001c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c66:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c6a:	601a      	str	r2, [r3, #0]
  return result;
 8001c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c70:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c76:	fab3 f383 	clz	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	095b      	lsrs	r3, r3, #5
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d102      	bne.n	8001c90 <HAL_RCC_OscConfig+0xe2c>
 8001c8a:	4b54      	ldr	r3, [pc, #336]	; (8001ddc <HAL_RCC_OscConfig+0xf78>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	e027      	b.n	8001ce0 <HAL_RCC_OscConfig+0xe7c>
 8001c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c94:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	fa93 f2a3 	rbit	r2, r3
 8001cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001cbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	4b3f      	ldr	r3, [pc, #252]	; (8001ddc <HAL_RCC_OscConfig+0xf78>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ce4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ce8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cec:	6011      	str	r1, [r2, #0]
 8001cee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cf2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	fa92 f1a2 	rbit	r1, r2
 8001cfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d00:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d04:	6011      	str	r1, [r2, #0]
  return result;
 8001d06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d0a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	fab2 f282 	clz	r2, r2
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	f042 0220 	orr.w	r2, r2, #32
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	f002 021f 	and.w	r2, r2, #31
 8001d20:	2101      	movs	r1, #1
 8001d22:	fa01 f202 	lsl.w	r2, r1, r2
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d082      	beq.n	8001c32 <HAL_RCC_OscConfig+0xdce>
 8001d2c:	e0cf      	b.n	8001ece <HAL_RCC_OscConfig+0x106a>
 8001d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d32:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d40:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	fa93 f2a3 	rbit	r2, r3
 8001d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d52:	601a      	str	r2, [r3, #0]
  return result;
 8001d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d58:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d5c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5e:	fab3 f383 	clz	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	461a      	mov	r2, r3
 8001d70:	2300      	movs	r3, #0
 8001d72:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7fe fcd4 	bl	8000720 <HAL_GetTick>
 8001d78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7c:	e009      	b.n	8001d92 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7fe fccf 	bl	8000720 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e09e      	b.n	8001ed0 <HAL_RCC_OscConfig+0x106c>
 8001d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d96:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	fa93 f2a3 	rbit	r2, r3
 8001dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001db6:	601a      	str	r2, [r3, #0]
  return result;
 8001db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001dc0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	095b      	lsrs	r3, r3, #5
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d104      	bne.n	8001de0 <HAL_RCC_OscConfig+0xf7c>
 8001dd6:	4b01      	ldr	r3, [pc, #4]	; (8001ddc <HAL_RCC_OscConfig+0xf78>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	e029      	b.n	8001e30 <HAL_RCC_OscConfig+0xfcc>
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001de8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	fa93 f2a3 	rbit	r2, r3
 8001dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e00:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e18:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <HAL_RCC_OscConfig+0x1078>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e34:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e3c:	6011      	str	r1, [r2, #0]
 8001e3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e42:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	fa92 f1a2 	rbit	r1, r2
 8001e4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e50:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e54:	6011      	str	r1, [r2, #0]
  return result;
 8001e56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e5a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	fab2 f282 	clz	r2, r2
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	f042 0220 	orr.w	r2, r2, #32
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	f002 021f 	and.w	r2, r2, #31
 8001e70:	2101      	movs	r1, #1
 8001e72:	fa01 f202 	lsl.w	r2, r1, r2
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d180      	bne.n	8001d7e <HAL_RCC_OscConfig+0xf1a>
 8001e7c:	e027      	b.n	8001ece <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e01e      	b.n	8001ed0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_RCC_OscConfig+0x1078>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e9e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d10b      	bne.n	8001eca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001eb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001eb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000

08001ee0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b09e      	sub	sp, #120	; 0x78
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e162      	b.n	80021be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b90      	ldr	r3, [pc, #576]	; (800213c <HAL_RCC_ClockConfig+0x25c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d910      	bls.n	8001f28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b8d      	ldr	r3, [pc, #564]	; (800213c <HAL_RCC_ClockConfig+0x25c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 0207 	bic.w	r2, r3, #7
 8001f0e:	498b      	ldr	r1, [pc, #556]	; (800213c <HAL_RCC_ClockConfig+0x25c>)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b89      	ldr	r3, [pc, #548]	; (800213c <HAL_RCC_ClockConfig+0x25c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e14a      	b.n	80021be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f34:	4b82      	ldr	r3, [pc, #520]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	497f      	ldr	r1, [pc, #508]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80dc 	beq.w	800210c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d13c      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xf6>
 8001f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f60:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6c:	fab3 f383 	clz	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d102      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xa6>
 8001f80:	4b6f      	ldr	r3, [pc, #444]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	e00f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0xc6>
 8001f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	667b      	str	r3, [r7, #100]	; 0x64
 8001f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f98:	663b      	str	r3, [r7, #96]	; 0x60
 8001f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fa2:	4b67      	ldr	r3, [pc, #412]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001faa:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fae:	fa92 f2a2 	rbit	r2, r2
 8001fb2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001fb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fb6:	fab2 f282 	clz	r2, r2
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	f042 0220 	orr.w	r2, r2, #32
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	f002 021f 	and.w	r2, r2, #31
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d17b      	bne.n	80020ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e0f3      	b.n	80021be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d13c      	bne.n	8002058 <HAL_RCC_ClockConfig+0x178>
 8001fde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fe2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d102      	bne.n	8002008 <HAL_RCC_ClockConfig+0x128>
 8002002:	4b4f      	ldr	r3, [pc, #316]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	e00f      	b.n	8002028 <HAL_RCC_ClockConfig+0x148>
 8002008:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800200c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	647b      	str	r3, [r7, #68]	; 0x44
 8002016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800201a:	643b      	str	r3, [r7, #64]	; 0x40
 800201c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800201e:	fa93 f3a3 	rbit	r3, r3
 8002022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002024:	4b46      	ldr	r3, [pc, #280]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800202c:	63ba      	str	r2, [r7, #56]	; 0x38
 800202e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002030:	fa92 f2a2 	rbit	r2, r2
 8002034:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002038:	fab2 f282 	clz	r2, r2
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	f042 0220 	orr.w	r2, r2, #32
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	f002 021f 	and.w	r2, r2, #31
 8002048:	2101      	movs	r1, #1
 800204a:	fa01 f202 	lsl.w	r2, r1, r2
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d13a      	bne.n	80020ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0b2      	b.n	80021be <HAL_RCC_ClockConfig+0x2de>
 8002058:	2302      	movs	r3, #2
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002066:	fab3 f383 	clz	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	095b      	lsrs	r3, r3, #5
 800206e:	b2db      	uxtb	r3, r3
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d102      	bne.n	8002080 <HAL_RCC_ClockConfig+0x1a0>
 800207a:	4b31      	ldr	r3, [pc, #196]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	e00d      	b.n	800209c <HAL_RCC_ClockConfig+0x1bc>
 8002080:	2302      	movs	r3, #2
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
 800208c:	2302      	movs	r3, #2
 800208e:	623b      	str	r3, [r7, #32]
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	61fb      	str	r3, [r7, #28]
 8002098:	4b29      	ldr	r3, [pc, #164]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	2202      	movs	r2, #2
 800209e:	61ba      	str	r2, [r7, #24]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	fa92 f2a2 	rbit	r2, r2
 80020a6:	617a      	str	r2, [r7, #20]
  return result;
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	fab2 f282 	clz	r2, r2
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	f042 0220 	orr.w	r2, r2, #32
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	f002 021f 	and.w	r2, r2, #31
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f202 	lsl.w	r2, r1, r2
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e079      	b.n	80021be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f023 0203 	bic.w	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	491a      	ldr	r1, [pc, #104]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020dc:	f7fe fb20 	bl	8000720 <HAL_GetTick>
 80020e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e4:	f7fe fb1c 	bl	8000720 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e061      	b.n	80021be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <HAL_RCC_ClockConfig+0x260>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 020c 	and.w	r2, r3, #12
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	429a      	cmp	r2, r3
 800210a:	d1eb      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_ClockConfig+0x25c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d214      	bcs.n	8002144 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_RCC_ClockConfig+0x25c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 0207 	bic.w	r2, r3, #7
 8002122:	4906      	ldr	r1, [pc, #24]	; (800213c <HAL_RCC_ClockConfig+0x25c>)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <HAL_RCC_ClockConfig+0x25c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d005      	beq.n	8002144 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e040      	b.n	80021be <HAL_RCC_ClockConfig+0x2de>
 800213c:	40022000 	.word	0x40022000
 8002140:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	491a      	ldr	r1, [pc, #104]	; (80021c8 <HAL_RCC_ClockConfig+0x2e8>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4912      	ldr	r1, [pc, #72]	; (80021c8 <HAL_RCC_ClockConfig+0x2e8>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002182:	f000 f829 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002186:	4601      	mov	r1, r0
 8002188:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <HAL_RCC_ClockConfig+0x2e8>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002190:	22f0      	movs	r2, #240	; 0xf0
 8002192:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	fa92 f2a2 	rbit	r2, r2
 800219a:	60fa      	str	r2, [r7, #12]
  return result;
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	fab2 f282 	clz	r2, r2
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	40d3      	lsrs	r3, r2
 80021a6:	4a09      	ldr	r2, [pc, #36]	; (80021cc <HAL_RCC_ClockConfig+0x2ec>)
 80021a8:	5cd3      	ldrb	r3, [r2, r3]
 80021aa:	fa21 f303 	lsr.w	r3, r1, r3
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <HAL_RCC_ClockConfig+0x2f0>)
 80021b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_RCC_ClockConfig+0x2f4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fa6e 	bl	8000698 <HAL_InitTick>
  
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3778      	adds	r7, #120	; 0x78
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08002d48 	.word	0x08002d48
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20000004 	.word	0x20000004

080021d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b08b      	sub	sp, #44	; 0x2c
 80021dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021f2:	4b29      	ldr	r3, [pc, #164]	; (8002298 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d002      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x30>
 8002202:	2b08      	cmp	r3, #8
 8002204:	d003      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0x36>
 8002206:	e03c      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002208:	4b24      	ldr	r3, [pc, #144]	; (800229c <HAL_RCC_GetSysClockFreq+0xc4>)
 800220a:	623b      	str	r3, [r7, #32]
      break;
 800220c:	e03c      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002214:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002218:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	fa92 f2a2 	rbit	r2, r2
 8002220:	607a      	str	r2, [r7, #4]
  return result;
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	fab2 f282 	clz	r2, r2
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	40d3      	lsrs	r3, r2
 800222c:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800222e:	5cd3      	ldrb	r3, [r2, r3]
 8002230:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	220f      	movs	r2, #15
 800223c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	fa92 f2a2 	rbit	r2, r2
 8002244:	60fa      	str	r2, [r7, #12]
  return result;
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	fab2 f282 	clz	r2, r2
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	40d3      	lsrs	r3, r2
 8002250:	4a14      	ldr	r2, [pc, #80]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002260:	4a0e      	ldr	r2, [pc, #56]	; (800229c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	fbb2 f2f3 	udiv	r2, r2, r3
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
 8002270:	e004      	b.n	800227c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	4a0c      	ldr	r2, [pc, #48]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	623b      	str	r3, [r7, #32]
      break;
 8002280:	e002      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002284:	623b      	str	r3, [r7, #32]
      break;
 8002286:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002288:	6a3b      	ldr	r3, [r7, #32]
}
 800228a:	4618      	mov	r0, r3
 800228c:	372c      	adds	r7, #44	; 0x2c
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	007a1200 	.word	0x007a1200
 80022a0:	08002d60 	.word	0x08002d60
 80022a4:	08002d70 	.word	0x08002d70
 80022a8:	003d0900 	.word	0x003d0900

080022ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20000000 	.word	0x20000000

080022c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022ca:	f7ff ffef 	bl	80022ac <HAL_RCC_GetHCLKFreq>
 80022ce:	4601      	mov	r1, r0
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	fa92 f2a2 	rbit	r2, r2
 80022e4:	603a      	str	r2, [r7, #0]
  return result;
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	fab2 f282 	clz	r2, r2
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	40d3      	lsrs	r3, r2
 80022f0:	4a04      	ldr	r2, [pc, #16]	; (8002304 <HAL_RCC_GetPCLK1Freq+0x40>)
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40021000 	.word	0x40021000
 8002304:	08002d58 	.word	0x08002d58

08002308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800230e:	f7ff ffcd 	bl	80022ac <HAL_RCC_GetHCLKFreq>
 8002312:	4601      	mov	r1, r0
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800231c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002320:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	fa92 f2a2 	rbit	r2, r2
 8002328:	603a      	str	r2, [r7, #0]
  return result;
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	fab2 f282 	clz	r2, r2
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	40d3      	lsrs	r3, r2
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002336:	5cd3      	ldrb	r3, [r2, r3]
 8002338:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	08002d58 	.word	0x08002d58

0800234c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b092      	sub	sp, #72	; 0x48
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800235c:	2300      	movs	r3, #0
 800235e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 80d4 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002370:	4b4e      	ldr	r3, [pc, #312]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10e      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237c:	4b4b      	ldr	r3, [pc, #300]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	4a4a      	ldr	r2, [pc, #296]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002386:	61d3      	str	r3, [r2, #28]
 8002388:	4b48      	ldr	r3, [pc, #288]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002394:	2301      	movs	r3, #1
 8002396:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239a:	4b45      	ldr	r3, [pc, #276]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d118      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a6:	4b42      	ldr	r3, [pc, #264]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a41      	ldr	r2, [pc, #260]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b2:	f7fe f9b5 	bl	8000720 <HAL_GetTick>
 80023b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b8:	e008      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ba:	f7fe f9b1 	bl	8000720 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b64      	cmp	r3, #100	; 0x64
 80023c6:	d901      	bls.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e14b      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023cc:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023d8:	4b34      	ldr	r3, [pc, #208]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8084 	beq.w	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d07c      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023f8:	4b2c      	ldr	r3, [pc, #176]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	461a      	mov	r2, r3
 8002422:	2301      	movs	r3, #1
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	461a      	mov	r2, r3
 8002446:	2300      	movs	r3, #0
 8002448:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800244a:	4a18      	ldr	r2, [pc, #96]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800244c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d04b      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7fe f961 	bl	8000720 <HAL_GetTick>
 800245e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002460:	e00a      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe f95d 	bl	8000720 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0f5      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002478:	2302      	movs	r3, #2
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
 8002484:	2302      	movs	r3, #2
 8002486:	623b      	str	r3, [r7, #32]
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	61fb      	str	r3, [r7, #28]
  return result;
 8002490:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d108      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80024a6:	4b01      	ldr	r3, [pc, #4]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	e00d      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40007000 	.word	0x40007000
 80024b4:	10908100 	.word	0x10908100
 80024b8:	2302      	movs	r3, #2
 80024ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	4b69      	ldr	r3, [pc, #420]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	2202      	movs	r2, #2
 80024ca:	613a      	str	r2, [r7, #16]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	fa92 f2a2 	rbit	r2, r2
 80024d2:	60fa      	str	r2, [r7, #12]
  return result;
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	fab2 f282 	clz	r2, r2
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f002 021f 	and.w	r2, r2, #31
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0b7      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024f2:	4b5e      	ldr	r3, [pc, #376]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	495b      	ldr	r1, [pc, #364]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002500:	4313      	orrs	r3, r2
 8002502:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002504:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250c:	4b57      	ldr	r3, [pc, #348]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	4a56      	ldr	r2, [pc, #344]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002516:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002524:	4b51      	ldr	r3, [pc, #324]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	f023 0203 	bic.w	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	494e      	ldr	r1, [pc, #312]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002532:	4313      	orrs	r3, r2
 8002534:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002542:	4b4a      	ldr	r3, [pc, #296]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f023 0210 	bic.w	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4947      	ldr	r1, [pc, #284]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002550:	4313      	orrs	r3, r2
 8002552:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002560:	4b42      	ldr	r3, [pc, #264]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	493f      	ldr	r1, [pc, #252]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d008      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800257e:	4b3b      	ldr	r3, [pc, #236]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f023 0220 	bic.w	r2, r3, #32
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	4938      	ldr	r1, [pc, #224]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800258c:	4313      	orrs	r3, r2
 800258e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800259c:	4b33      	ldr	r3, [pc, #204]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	4930      	ldr	r1, [pc, #192]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025ba:	4b2c      	ldr	r3, [pc, #176]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4929      	ldr	r1, [pc, #164]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80025d8:	4b24      	ldr	r3, [pc, #144]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	4921      	ldr	r1, [pc, #132]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	491a      	ldr	r1, [pc, #104]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002604:	4313      	orrs	r3, r2
 8002606:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002614:	4b15      	ldr	r3, [pc, #84]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	4912      	ldr	r1, [pc, #72]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002622:	4313      	orrs	r3, r2
 8002624:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	490b      	ldr	r1, [pc, #44]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002640:	4313      	orrs	r3, r2
 8002642:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	4903      	ldr	r1, [pc, #12]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800265e:	4313      	orrs	r3, r2
 8002660:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3748      	adds	r7, #72	; 0x48
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000

08002670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e040      	b.n	8002704 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fd ff42 	bl	800051c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2224      	movs	r2, #36	; 0x24
 800269c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0201 	bic.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f82c 	bl	800270c <UART_SetConfig>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e022      	b.n	8002704 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f956 	bl	8002978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f9dd 	bl	8002abc <UART_CheckIdleState>
 8002702:	4603      	mov	r3, r0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4b8a      	ldr	r3, [pc, #552]	; (8002960 <UART_SetConfig+0x254>)
 8002738:	4013      	ands	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	6979      	ldr	r1, [r7, #20]
 8002740:	430b      	orrs	r3, r1
 8002742:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	430a      	orrs	r2, r1
 800277c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a78      	ldr	r2, [pc, #480]	; (8002964 <UART_SetConfig+0x258>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d120      	bne.n	80027ca <UART_SetConfig+0xbe>
 8002788:	4b77      	ldr	r3, [pc, #476]	; (8002968 <UART_SetConfig+0x25c>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b03      	cmp	r3, #3
 8002792:	d817      	bhi.n	80027c4 <UART_SetConfig+0xb8>
 8002794:	a201      	add	r2, pc, #4	; (adr r2, 800279c <UART_SetConfig+0x90>)
 8002796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279a:	bf00      	nop
 800279c:	080027ad 	.word	0x080027ad
 80027a0:	080027b9 	.word	0x080027b9
 80027a4:	080027bf 	.word	0x080027bf
 80027a8:	080027b3 	.word	0x080027b3
 80027ac:	2300      	movs	r3, #0
 80027ae:	77fb      	strb	r3, [r7, #31]
 80027b0:	e01d      	b.n	80027ee <UART_SetConfig+0xe2>
 80027b2:	2302      	movs	r3, #2
 80027b4:	77fb      	strb	r3, [r7, #31]
 80027b6:	e01a      	b.n	80027ee <UART_SetConfig+0xe2>
 80027b8:	2304      	movs	r3, #4
 80027ba:	77fb      	strb	r3, [r7, #31]
 80027bc:	e017      	b.n	80027ee <UART_SetConfig+0xe2>
 80027be:	2308      	movs	r3, #8
 80027c0:	77fb      	strb	r3, [r7, #31]
 80027c2:	e014      	b.n	80027ee <UART_SetConfig+0xe2>
 80027c4:	2310      	movs	r3, #16
 80027c6:	77fb      	strb	r3, [r7, #31]
 80027c8:	e011      	b.n	80027ee <UART_SetConfig+0xe2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a67      	ldr	r2, [pc, #412]	; (800296c <UART_SetConfig+0x260>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d102      	bne.n	80027da <UART_SetConfig+0xce>
 80027d4:	2300      	movs	r3, #0
 80027d6:	77fb      	strb	r3, [r7, #31]
 80027d8:	e009      	b.n	80027ee <UART_SetConfig+0xe2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a64      	ldr	r2, [pc, #400]	; (8002970 <UART_SetConfig+0x264>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d102      	bne.n	80027ea <UART_SetConfig+0xde>
 80027e4:	2300      	movs	r3, #0
 80027e6:	77fb      	strb	r3, [r7, #31]
 80027e8:	e001      	b.n	80027ee <UART_SetConfig+0xe2>
 80027ea:	2310      	movs	r3, #16
 80027ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027f6:	d15b      	bne.n	80028b0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80027f8:	7ffb      	ldrb	r3, [r7, #31]
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d827      	bhi.n	800284e <UART_SetConfig+0x142>
 80027fe:	a201      	add	r2, pc, #4	; (adr r2, 8002804 <UART_SetConfig+0xf8>)
 8002800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002804:	08002829 	.word	0x08002829
 8002808:	08002831 	.word	0x08002831
 800280c:	08002839 	.word	0x08002839
 8002810:	0800284f 	.word	0x0800284f
 8002814:	0800283f 	.word	0x0800283f
 8002818:	0800284f 	.word	0x0800284f
 800281c:	0800284f 	.word	0x0800284f
 8002820:	0800284f 	.word	0x0800284f
 8002824:	08002847 	.word	0x08002847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002828:	f7ff fd4c 	bl	80022c4 <HAL_RCC_GetPCLK1Freq>
 800282c:	61b8      	str	r0, [r7, #24]
        break;
 800282e:	e013      	b.n	8002858 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002830:	f7ff fd6a 	bl	8002308 <HAL_RCC_GetPCLK2Freq>
 8002834:	61b8      	str	r0, [r7, #24]
        break;
 8002836:	e00f      	b.n	8002858 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002838:	4b4e      	ldr	r3, [pc, #312]	; (8002974 <UART_SetConfig+0x268>)
 800283a:	61bb      	str	r3, [r7, #24]
        break;
 800283c:	e00c      	b.n	8002858 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800283e:	f7ff fccb 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002842:	61b8      	str	r0, [r7, #24]
        break;
 8002844:	e008      	b.n	8002858 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800284a:	61bb      	str	r3, [r7, #24]
        break;
 800284c:	e004      	b.n	8002858 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	77bb      	strb	r3, [r7, #30]
        break;
 8002856:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d074      	beq.n	8002948 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	005a      	lsls	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	441a      	add	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002872:	b29b      	uxth	r3, r3
 8002874:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	2b0f      	cmp	r3, #15
 800287a:	d916      	bls.n	80028aa <UART_SetConfig+0x19e>
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002882:	d212      	bcs.n	80028aa <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	b29b      	uxth	r3, r3
 8002888:	f023 030f 	bic.w	r3, r3, #15
 800288c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	b29b      	uxth	r3, r3
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	b29a      	uxth	r2, r3
 800289a:	89fb      	ldrh	r3, [r7, #14]
 800289c:	4313      	orrs	r3, r2
 800289e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	89fa      	ldrh	r2, [r7, #14]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	e04e      	b.n	8002948 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	77bb      	strb	r3, [r7, #30]
 80028ae:	e04b      	b.n	8002948 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028b0:	7ffb      	ldrb	r3, [r7, #31]
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d827      	bhi.n	8002906 <UART_SetConfig+0x1fa>
 80028b6:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <UART_SetConfig+0x1b0>)
 80028b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028bc:	080028e1 	.word	0x080028e1
 80028c0:	080028e9 	.word	0x080028e9
 80028c4:	080028f1 	.word	0x080028f1
 80028c8:	08002907 	.word	0x08002907
 80028cc:	080028f7 	.word	0x080028f7
 80028d0:	08002907 	.word	0x08002907
 80028d4:	08002907 	.word	0x08002907
 80028d8:	08002907 	.word	0x08002907
 80028dc:	080028ff 	.word	0x080028ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028e0:	f7ff fcf0 	bl	80022c4 <HAL_RCC_GetPCLK1Freq>
 80028e4:	61b8      	str	r0, [r7, #24]
        break;
 80028e6:	e013      	b.n	8002910 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028e8:	f7ff fd0e 	bl	8002308 <HAL_RCC_GetPCLK2Freq>
 80028ec:	61b8      	str	r0, [r7, #24]
        break;
 80028ee:	e00f      	b.n	8002910 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028f0:	4b20      	ldr	r3, [pc, #128]	; (8002974 <UART_SetConfig+0x268>)
 80028f2:	61bb      	str	r3, [r7, #24]
        break;
 80028f4:	e00c      	b.n	8002910 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028f6:	f7ff fc6f 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 80028fa:	61b8      	str	r0, [r7, #24]
        break;
 80028fc:	e008      	b.n	8002910 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002902:	61bb      	str	r3, [r7, #24]
        break;
 8002904:	e004      	b.n	8002910 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	77bb      	strb	r3, [r7, #30]
        break;
 800290e:	bf00      	nop
    }

    if (pclk != 0U)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d018      	beq.n	8002948 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	085a      	lsrs	r2, r3, #1
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	441a      	add	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	b29b      	uxth	r3, r3
 800292a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b0f      	cmp	r3, #15
 8002930:	d908      	bls.n	8002944 <UART_SetConfig+0x238>
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002938:	d204      	bcs.n	8002944 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	e001      	b.n	8002948 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002954:	7fbb      	ldrb	r3, [r7, #30]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3720      	adds	r7, #32
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	efff69f3 	.word	0xefff69f3
 8002964:	40013800 	.word	0x40013800
 8002968:	40021000 	.word	0x40021000
 800296c:	40004400 	.word	0x40004400
 8002970:	40004800 	.word	0x40004800
 8002974:	007a1200 	.word	0x007a1200

08002978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01a      	beq.n	8002a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a76:	d10a      	bne.n	8002a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	605a      	str	r2, [r3, #4]
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002acc:	f7fd fe28 	bl	8000720 <HAL_GetTick>
 8002ad0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d10e      	bne.n	8002afe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f82d 	bl	8002b4e <UART_WaitOnFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e023      	b.n	8002b46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d10e      	bne.n	8002b2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f817 	bl	8002b4e <UART_WaitOnFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e00d      	b.n	8002b46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2220      	movs	r2, #32
 8002b34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b09c      	sub	sp, #112	; 0x70
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b5e:	e0a5      	b.n	8002cac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b66:	f000 80a1 	beq.w	8002cac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6a:	f7fd fdd9 	bl	8000720 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d302      	bcc.n	8002b80 <UART_WaitOnFlagUntilTimeout+0x32>
 8002b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d13e      	bne.n	8002bfe <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b88:	e853 3f00 	ldrex	r3, [r3]
 8002b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b94:	667b      	str	r3, [r7, #100]	; 0x64
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ba0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002ba4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ba6:	e841 2300 	strex	r3, r2, [r1]
 8002baa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1e6      	bne.n	8002b80 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3308      	adds	r3, #8
 8002bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bbc:	e853 3f00 	ldrex	r3, [r3]
 8002bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	663b      	str	r3, [r7, #96]	; 0x60
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3308      	adds	r3, #8
 8002bd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8002bd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bda:	e841 2300 	strex	r3, r2, [r1]
 8002bde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1e5      	bne.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e067      	b.n	8002cce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d04f      	beq.n	8002cac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c1a:	d147      	bne.n	8002cac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c24:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2e:	e853 3f00 	ldrex	r3, [r3]
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
 8002c46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c4c:	e841 2300 	strex	r3, r2, [r1]
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1e6      	bne.n	8002c26 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	3308      	adds	r3, #8
 8002c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	e853 3f00 	ldrex	r3, [r3]
 8002c66:	613b      	str	r3, [r7, #16]
   return(result);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3308      	adds	r3, #8
 8002c76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c78:	623a      	str	r2, [r7, #32]
 8002c7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7c:	69f9      	ldr	r1, [r7, #28]
 8002c7e:	6a3a      	ldr	r2, [r7, #32]
 8002c80:	e841 2300 	strex	r3, r2, [r1]
 8002c84:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e5      	bne.n	8002c58 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e010      	b.n	8002cce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	f43f af4a 	beq.w	8002b60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3770      	adds	r7, #112	; 0x70
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <__libc_init_array>:
 8002cd8:	b570      	push	{r4, r5, r6, lr}
 8002cda:	4d0d      	ldr	r5, [pc, #52]	; (8002d10 <__libc_init_array+0x38>)
 8002cdc:	4c0d      	ldr	r4, [pc, #52]	; (8002d14 <__libc_init_array+0x3c>)
 8002cde:	1b64      	subs	r4, r4, r5
 8002ce0:	10a4      	asrs	r4, r4, #2
 8002ce2:	2600      	movs	r6, #0
 8002ce4:	42a6      	cmp	r6, r4
 8002ce6:	d109      	bne.n	8002cfc <__libc_init_array+0x24>
 8002ce8:	4d0b      	ldr	r5, [pc, #44]	; (8002d18 <__libc_init_array+0x40>)
 8002cea:	4c0c      	ldr	r4, [pc, #48]	; (8002d1c <__libc_init_array+0x44>)
 8002cec:	f000 f820 	bl	8002d30 <_init>
 8002cf0:	1b64      	subs	r4, r4, r5
 8002cf2:	10a4      	asrs	r4, r4, #2
 8002cf4:	2600      	movs	r6, #0
 8002cf6:	42a6      	cmp	r6, r4
 8002cf8:	d105      	bne.n	8002d06 <__libc_init_array+0x2e>
 8002cfa:	bd70      	pop	{r4, r5, r6, pc}
 8002cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d00:	4798      	blx	r3
 8002d02:	3601      	adds	r6, #1
 8002d04:	e7ee      	b.n	8002ce4 <__libc_init_array+0xc>
 8002d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d0a:	4798      	blx	r3
 8002d0c:	3601      	adds	r6, #1
 8002d0e:	e7f2      	b.n	8002cf6 <__libc_init_array+0x1e>
 8002d10:	08002d80 	.word	0x08002d80
 8002d14:	08002d80 	.word	0x08002d80
 8002d18:	08002d80 	.word	0x08002d80
 8002d1c:	08002d84 	.word	0x08002d84

08002d20 <memset>:
 8002d20:	4402      	add	r2, r0
 8002d22:	4603      	mov	r3, r0
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d100      	bne.n	8002d2a <memset+0xa>
 8002d28:	4770      	bx	lr
 8002d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d2e:	e7f9      	b.n	8002d24 <memset+0x4>

08002d30 <_init>:
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d32:	bf00      	nop
 8002d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d36:	bc08      	pop	{r3}
 8002d38:	469e      	mov	lr, r3
 8002d3a:	4770      	bx	lr

08002d3c <_fini>:
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3e:	bf00      	nop
 8002d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d42:	bc08      	pop	{r3}
 8002d44:	469e      	mov	lr, r3
 8002d46:	4770      	bx	lr
