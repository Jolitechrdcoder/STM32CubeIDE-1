
parcial2_jorgeLuis_2018_6244.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004018  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080041a0  080041a0  000141a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041d8  080041d8  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080041d8  080041d8  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041d8  080041d8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d8  080041d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041dc  080041dc  000141dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080041e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000020  08004200  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000044  20000214  08004200  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010451  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002095  00000000  00000000  000304a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00032538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00033390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf01  00000000  00000000  00034110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120e4  00000000  00000000  00050011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7b26  00000000  00000000  000620f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00109c1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c2c  00000000  00000000  00109c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004188 	.word	0x08004188

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08004188 	.word	0x08004188

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fbed 	bl	80009ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f87b 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f9e7 	bl	80005a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f9b5 	bl	8000548 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80001de:	f000 f8cf 	bl	8000380 <MX_SPI3_Init>
  MX_FATFS_Init();
 80001e2:	f003 fedf 	bl	8003fa4 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 80001e6:	f000 f97f 	bl	80004e8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80001ea:	f000 f907 	bl	80003fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001ee:	2104      	movs	r1, #4
 80001f0:	4835      	ldr	r0, [pc, #212]	; (80002c8 <main+0x100>)
 80001f2:	f002 fc3f 	bl	8002a74 <HAL_TIM_PWM_Start>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
      int x;
      for(x=10; x<50; x++)
 80001f6:	230a      	movs	r3, #10
 80001f8:	60fb      	str	r3, [r7, #12]
 80001fa:	e013      	b.n	8000224 <main+0x5c>
      {
        __HAL_TIM_SET_AUTORELOAD(&htim2, x*2);
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	005a      	lsls	r2, r3, #1
 8000200:	4b31      	ldr	r3, [pc, #196]	; (80002c8 <main+0x100>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	62da      	str	r2, [r3, #44]	; 0x2c
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	005b      	lsls	r3, r3, #1
 800020a:	461a      	mov	r2, r3
 800020c:	4b2e      	ldr	r3, [pc, #184]	; (80002c8 <main+0x100>)
 800020e:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, x);
 8000210:	4b2d      	ldr	r3, [pc, #180]	; (80002c8 <main+0x100>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	68fa      	ldr	r2, [r7, #12]
 8000216:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(100);
 8000218:	2064      	movs	r0, #100	; 0x64
 800021a:	f000 fc2d 	bl	8000a78 <HAL_Delay>
      for(x=10; x<50; x++)
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	3301      	adds	r3, #1
 8000222:	60fb      	str	r3, [r7, #12]
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	2b31      	cmp	r3, #49	; 0x31
 8000228:	dde8      	ble.n	80001fc <main+0x34>
      }
      int y;
            for(y=10; y<50; y--)
 800022a:	230a      	movs	r3, #10
 800022c:	60bb      	str	r3, [r7, #8]
 800022e:	e013      	b.n	8000258 <main+0x90>
            {
              __HAL_TIM_SET_AUTORELOAD(&htim2, y*2);
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	005a      	lsls	r2, r3, #1
 8000234:	4b24      	ldr	r3, [pc, #144]	; (80002c8 <main+0x100>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	62da      	str	r2, [r3, #44]	; 0x2c
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	005b      	lsls	r3, r3, #1
 800023e:	461a      	mov	r2, r3
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <main+0x100>)
 8000242:	60da      	str	r2, [r3, #12]
              __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, y);
 8000244:	4b20      	ldr	r3, [pc, #128]	; (80002c8 <main+0x100>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	68ba      	ldr	r2, [r7, #8]
 800024a:	639a      	str	r2, [r3, #56]	; 0x38
              HAL_Delay(100);
 800024c:	2064      	movs	r0, #100	; 0x64
 800024e:	f000 fc13 	bl	8000a78 <HAL_Delay>
            for(y=10; y<50; y--)
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	3b01      	subs	r3, #1
 8000256:	60bb      	str	r3, [r7, #8]
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	2b31      	cmp	r3, #49	; 0x31
 800025c:	dde8      	ble.n	8000230 <main+0x68>
            }
            int a;
                 for(a=10; a<80; a++)
 800025e:	230a      	movs	r3, #10
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	e013      	b.n	800028c <main+0xc4>
                 {
                   __HAL_TIM_SET_AUTORELOAD(&htim2, a*2);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	005a      	lsls	r2, r3, #1
 8000268:	4b17      	ldr	r3, [pc, #92]	; (80002c8 <main+0x100>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	62da      	str	r2, [r3, #44]	; 0x2c
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	461a      	mov	r2, r3
 8000274:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <main+0x100>)
 8000276:	60da      	str	r2, [r3, #12]
                   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, a);
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <main+0x100>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	639a      	str	r2, [r3, #56]	; 0x38
                   HAL_Delay(100);
 8000280:	2064      	movs	r0, #100	; 0x64
 8000282:	f000 fbf9 	bl	8000a78 <HAL_Delay>
                 for(a=10; a<80; a++)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	3301      	adds	r3, #1
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b4f      	cmp	r3, #79	; 0x4f
 8000290:	dde8      	ble.n	8000264 <main+0x9c>
                 }
                 int z;
                       for(z=10; z<100; z++)
 8000292:	230a      	movs	r3, #10
 8000294:	603b      	str	r3, [r7, #0]
 8000296:	e013      	b.n	80002c0 <main+0xf8>
                       {
                         __HAL_TIM_SET_AUTORELOAD(&htim2,z*2);
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	005a      	lsls	r2, r3, #1
 800029c:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <main+0x100>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	461a      	mov	r2, r3
 80002a8:	4b07      	ldr	r3, [pc, #28]	; (80002c8 <main+0x100>)
 80002aa:	60da      	str	r2, [r3, #12]
                         __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, z);
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <main+0x100>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	683a      	ldr	r2, [r7, #0]
 80002b2:	639a      	str	r2, [r3, #56]	; 0x38
                         HAL_Delay(100);
 80002b4:	2064      	movs	r0, #100	; 0x64
 80002b6:	f000 fbdf 	bl	8000a78 <HAL_Delay>
                       for(z=10; z<100; z++)
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	3301      	adds	r3, #1
 80002be:	603b      	str	r3, [r7, #0]
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2b63      	cmp	r3, #99	; 0x63
 80002c4:	dde8      	ble.n	8000298 <main+0xd0>
    {
 80002c6:	e796      	b.n	80001f6 <main+0x2e>
 80002c8:	200000a0 	.word	0x200000a0

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b09c      	sub	sp, #112	; 0x70
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002d6:	2228      	movs	r2, #40	; 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f003 ff4c 	bl	8004178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f0:	463b      	mov	r3, r7
 80002f2:	2234      	movs	r2, #52	; 0x34
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f003 ff3e 	bl	8004178 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002fc:	2301      	movs	r3, #1
 80002fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000300:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000304:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030a:	2301      	movs	r3, #1
 800030c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030e:	2302      	movs	r3, #2
 8000310:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000316:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000318:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800031c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000322:	4618      	mov	r0, r3
 8000324:	f000 fe3c 	bl	8000fa0 <HAL_RCC_OscConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800032e:	f000 f9a3 	bl	8000678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	230f      	movs	r3, #15
 8000334:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000336:	2302      	movs	r3, #2
 8000338:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000342:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000348:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800034c:	2102      	movs	r1, #2
 800034e:	4618      	mov	r0, r3
 8000350:	f001 fe64 	bl	800201c <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800035a:	f000 f98d 	bl	8000678 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800035e:	2301      	movs	r3, #1
 8000360:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000362:	2300      	movs	r3, #0
 8000364:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000366:	463b      	mov	r3, r7
 8000368:	4618      	mov	r0, r3
 800036a:	f002 f88d 	bl	8002488 <HAL_RCCEx_PeriphCLKConfig>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000374:	f000 f980 	bl	8000678 <Error_Handler>
  }
}
 8000378:	bf00      	nop
 800037a:	3770      	adds	r7, #112	; 0x70
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <MX_SPI3_Init+0x74>)
 8000386:	4a1c      	ldr	r2, [pc, #112]	; (80003f8 <MX_SPI3_Init+0x78>)
 8000388:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800038a:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <MX_SPI3_Init+0x74>)
 800038c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000390:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000392:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <MX_SPI3_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000398:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <MX_SPI3_Init+0x74>)
 800039a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800039e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <MX_SPI3_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003a6:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <MX_SPI3_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_SPI3_Init+0x74>)
 80003ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_SPI3_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_SPI3_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_SPI3_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_SPI3_Init+0x74>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_SPI3_Init+0x74>)
 80003ce:	2207      	movs	r2, #7
 80003d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_SPI3_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MX_SPI3_Init+0x74>)
 80003da:	2208      	movs	r2, #8
 80003dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80003de:	4805      	ldr	r0, [pc, #20]	; (80003f4 <MX_SPI3_Init+0x74>)
 80003e0:	f002 f9e4 	bl	80027ac <HAL_SPI_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80003ea:	f000 f945 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	2000003c 	.word	0x2000003c
 80003f8:	40003c00 	.word	0x40003c00

080003fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08e      	sub	sp, #56	; 0x38
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000410:	f107 031c 	add.w	r3, r7, #28
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800041c:	463b      	mov	r3, r7
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]
 800042a:	615a      	str	r2, [r3, #20]
 800042c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800042e:	4b2d      	ldr	r3, [pc, #180]	; (80004e4 <MX_TIM2_Init+0xe8>)
 8000430:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000434:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8000436:	4b2b      	ldr	r3, [pc, #172]	; (80004e4 <MX_TIM2_Init+0xe8>)
 8000438:	227f      	movs	r2, #127	; 0x7f
 800043a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800043c:	4b29      	ldr	r3, [pc, #164]	; (80004e4 <MX_TIM2_Init+0xe8>)
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 8000442:	4b28      	ldr	r3, [pc, #160]	; (80004e4 <MX_TIM2_Init+0xe8>)
 8000444:	2214      	movs	r2, #20
 8000446:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000448:	4b26      	ldr	r3, [pc, #152]	; (80004e4 <MX_TIM2_Init+0xe8>)
 800044a:	2200      	movs	r2, #0
 800044c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800044e:	4b25      	ldr	r3, [pc, #148]	; (80004e4 <MX_TIM2_Init+0xe8>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000454:	4823      	ldr	r0, [pc, #140]	; (80004e4 <MX_TIM2_Init+0xe8>)
 8000456:	f002 fa54 	bl	8002902 <HAL_TIM_Base_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000460:	f000 f90a 	bl	8000678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000468:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800046a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046e:	4619      	mov	r1, r3
 8000470:	481c      	ldr	r0, [pc, #112]	; (80004e4 <MX_TIM2_Init+0xe8>)
 8000472:	f002 fcf9 	bl	8002e68 <HAL_TIM_ConfigClockSource>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800047c:	f000 f8fc 	bl	8000678 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000480:	4818      	ldr	r0, [pc, #96]	; (80004e4 <MX_TIM2_Init+0xe8>)
 8000482:	f002 fa95 	bl	80029b0 <HAL_TIM_PWM_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800048c:	f000 f8f4 	bl	8000678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000490:	2300      	movs	r3, #0
 8000492:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000494:	2300      	movs	r3, #0
 8000496:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000498:	f107 031c 	add.w	r3, r7, #28
 800049c:	4619      	mov	r1, r3
 800049e:	4811      	ldr	r0, [pc, #68]	; (80004e4 <MX_TIM2_Init+0xe8>)
 80004a0:	f003 f980 	bl	80037a4 <HAL_TIMEx_MasterConfigSynchronization>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80004aa:	f000 f8e5 	bl	8000678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ae:	2360      	movs	r3, #96	; 0x60
 80004b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004be:	463b      	mov	r3, r7
 80004c0:	2204      	movs	r2, #4
 80004c2:	4619      	mov	r1, r3
 80004c4:	4807      	ldr	r0, [pc, #28]	; (80004e4 <MX_TIM2_Init+0xe8>)
 80004c6:	f002 fbbb 	bl	8002c40 <HAL_TIM_PWM_ConfigChannel>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80004d0:	f000 f8d2 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004d4:	4803      	ldr	r0, [pc, #12]	; (80004e4 <MX_TIM2_Init+0xe8>)
 80004d6:	f000 f95b 	bl	8000790 <HAL_TIM_MspPostInit>

}
 80004da:	bf00      	nop
 80004dc:	3738      	adds	r7, #56	; 0x38
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	200000a0 	.word	0x200000a0

080004e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <MX_USART1_UART_Init+0x58>)
 80004ee:	4a15      	ldr	r2, [pc, #84]	; (8000544 <MX_USART1_UART_Init+0x5c>)
 80004f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80004f2:	4b13      	ldr	r3, [pc, #76]	; (8000540 <MX_USART1_UART_Init+0x58>)
 80004f4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <MX_USART1_UART_Init+0x58>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <MX_USART1_UART_Init+0x58>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <MX_USART1_UART_Init+0x58>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <MX_USART1_UART_Init+0x58>)
 800050e:	220c      	movs	r2, #12
 8000510:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <MX_USART1_UART_Init+0x58>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_USART1_UART_Init+0x58>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_USART1_UART_Init+0x58>)
 8000520:	2200      	movs	r2, #0
 8000522:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <MX_USART1_UART_Init+0x58>)
 8000526:	2200      	movs	r2, #0
 8000528:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <MX_USART1_UART_Init+0x58>)
 800052c:	f003 f9a0 	bl	8003870 <HAL_UART_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000536:	f000 f89f 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	200000ec 	.word	0x200000ec
 8000544:	40013800 	.word	0x40013800

08000548 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800054c:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_USART2_UART_Init+0x58>)
 800054e:	4a15      	ldr	r2, [pc, #84]	; (80005a4 <MX_USART2_UART_Init+0x5c>)
 8000550:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000552:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <MX_USART2_UART_Init+0x58>)
 8000554:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000558:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_USART2_UART_Init+0x58>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <MX_USART2_UART_Init+0x58>)
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <MX_USART2_UART_Init+0x58>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <MX_USART2_UART_Init+0x58>)
 800056e:	220c      	movs	r2, #12
 8000570:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <MX_USART2_UART_Init+0x58>)
 8000574:	2200      	movs	r2, #0
 8000576:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_USART2_UART_Init+0x58>)
 800057a:	2200      	movs	r2, #0
 800057c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <MX_USART2_UART_Init+0x58>)
 8000580:	2200      	movs	r2, #0
 8000582:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <MX_USART2_UART_Init+0x58>)
 8000586:	2200      	movs	r2, #0
 8000588:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_USART2_UART_Init+0x58>)
 800058c:	f003 f970 	bl	8003870 <HAL_UART_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000596:	f000 f86f 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000174 	.word	0x20000174
 80005a4:	40004400 	.word	0x40004400

080005a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	4b2b      	ldr	r3, [pc, #172]	; (800066c <MX_GPIO_Init+0xc4>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a2a      	ldr	r2, [pc, #168]	; (800066c <MX_GPIO_Init+0xc4>)
 80005c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b28      	ldr	r3, [pc, #160]	; (800066c <MX_GPIO_Init+0xc4>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d6:	4b25      	ldr	r3, [pc, #148]	; (800066c <MX_GPIO_Init+0xc4>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a24      	ldr	r2, [pc, #144]	; (800066c <MX_GPIO_Init+0xc4>)
 80005dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005e0:	6153      	str	r3, [r2, #20]
 80005e2:	4b22      	ldr	r3, [pc, #136]	; (800066c <MX_GPIO_Init+0xc4>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b1f      	ldr	r3, [pc, #124]	; (800066c <MX_GPIO_Init+0xc4>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a1e      	ldr	r2, [pc, #120]	; (800066c <MX_GPIO_Init+0xc4>)
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	6153      	str	r3, [r2, #20]
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <MX_GPIO_Init+0xc4>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <MX_GPIO_Init+0xc4>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a18      	ldr	r2, [pc, #96]	; (800066c <MX_GPIO_Init+0xc4>)
 800060c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <MX_GPIO_Init+0xc4>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f242 0101 	movw	r1, #8193	; 0x2001
 8000624:	4812      	ldr	r0, [pc, #72]	; (8000670 <MX_GPIO_Init+0xc8>)
 8000626:	f000 fca3 	bl	8000f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800062a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000630:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <MX_GPIO_Init+0xcc>)
 8000642:	f000 fb23 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8000646:	f242 0301 	movw	r3, #8193	; 0x2001
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_GPIO_Init+0xc8>)
 8000660:	f000 fb14 	bl	8000c8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000664:	bf00      	nop
 8000666:	3728      	adds	r7, #40	; 0x28
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40021000 	.word	0x40021000
 8000670:	48000400 	.word	0x48000400
 8000674:	48000800 	.word	0x48000800

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	e7fe      	b.n	8000680 <Error_Handler+0x8>
	...

08000684 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_MspInit+0x44>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_MspInit+0x44>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6193      	str	r3, [r2, #24]
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_MspInit+0x44>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <HAL_MspInit+0x44>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <HAL_MspInit+0x44>)
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ac:	61d3      	str	r3, [r2, #28]
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_MspInit+0x44>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006ba:	2007      	movs	r0, #7
 80006bc:	f000 fab2 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000

080006cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a17      	ldr	r2, [pc, #92]	; (8000748 <HAL_SPI_MspInit+0x7c>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d128      	bne.n	8000740 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <HAL_SPI_MspInit+0x80>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a16      	ldr	r2, [pc, #88]	; (800074c <HAL_SPI_MspInit+0x80>)
 80006f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <HAL_SPI_MspInit+0x80>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <HAL_SPI_MspInit+0x80>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a10      	ldr	r2, [pc, #64]	; (800074c <HAL_SPI_MspInit+0x80>)
 800070c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <HAL_SPI_MspInit+0x80>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800071e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000730:	2306      	movs	r3, #6
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <HAL_SPI_MspInit+0x84>)
 800073c:	f000 faa6 	bl	8000c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000740:	bf00      	nop
 8000742:	3728      	adds	r7, #40	; 0x28
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40003c00 	.word	0x40003c00
 800074c:	40021000 	.word	0x40021000
 8000750:	48000800 	.word	0x48000800

08000754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000764:	d10b      	bne.n	800077e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_TIM_Base_MspInit+0x38>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <HAL_TIM_Base_MspInit+0x38>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_TIM_Base_MspInit+0x38>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007b0:	d11c      	bne.n	80007ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <HAL_TIM_MspPostInit+0x64>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <HAL_TIM_MspPostInit+0x64>)
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <HAL_TIM_MspPostInit+0x64>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007ca:	2302      	movs	r3, #2
 80007cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007da:	2301      	movs	r3, #1
 80007dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	4619      	mov	r1, r3
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e8:	f000 fa50 	bl	8000c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000

080007f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	; 0x30
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a2e      	ldr	r2, [pc, #184]	; (80008d0 <HAL_UART_MspInit+0xd8>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d128      	bne.n	800086c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800081a:	4b2e      	ldr	r3, [pc, #184]	; (80008d4 <HAL_UART_MspInit+0xdc>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	4a2d      	ldr	r2, [pc, #180]	; (80008d4 <HAL_UART_MspInit+0xdc>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000824:	6193      	str	r3, [r2, #24]
 8000826:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <HAL_UART_MspInit+0xdc>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <HAL_UART_MspInit+0xdc>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a27      	ldr	r2, [pc, #156]	; (80008d4 <HAL_UART_MspInit+0xdc>)
 8000838:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800083c:	6153      	str	r3, [r2, #20]
 800083e:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <HAL_UART_MspInit+0xdc>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800084a:	2330      	movs	r3, #48	; 0x30
 800084c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800085a:	2307      	movs	r3, #7
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	481c      	ldr	r0, [pc, #112]	; (80008d8 <HAL_UART_MspInit+0xe0>)
 8000866:	f000 fa11 	bl	8000c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800086a:	e02d      	b.n	80008c8 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a1a      	ldr	r2, [pc, #104]	; (80008dc <HAL_UART_MspInit+0xe4>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d128      	bne.n	80008c8 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <HAL_UART_MspInit+0xdc>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4a16      	ldr	r2, [pc, #88]	; (80008d4 <HAL_UART_MspInit+0xdc>)
 800087c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000880:	61d3      	str	r3, [r2, #28]
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <HAL_UART_MspInit+0xdc>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <HAL_UART_MspInit+0xdc>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	4a10      	ldr	r2, [pc, #64]	; (80008d4 <HAL_UART_MspInit+0xdc>)
 8000894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000898:	6153      	str	r3, [r2, #20]
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <HAL_UART_MspInit+0xdc>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008a6:	230c      	movs	r3, #12
 80008a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b6:	2307      	movs	r3, #7
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c4:	f000 f9e2 	bl	8000c8c <HAL_GPIO_Init>
}
 80008c8:	bf00      	nop
 80008ca:	3730      	adds	r7, #48	; 0x30
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40013800 	.word	0x40013800
 80008d4:	40021000 	.word	0x40021000
 80008d8:	48000800 	.word	0x48000800
 80008dc:	40004400 	.word	0x40004400

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092c:	f000 f884 	bl	8000a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000990 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800095c:	f7ff ffea 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <LoopForever+0x6>)
  ldr r1, =_edata
 8000962:	490d      	ldr	r1, [pc, #52]	; (8000998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000964:	4a0d      	ldr	r2, [pc, #52]	; (800099c <LoopForever+0xe>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000978:	4c0a      	ldr	r4, [pc, #40]	; (80009a4 <LoopForever+0x16>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000986:	f003 fbd3 	bl	8004130 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800098a:	f7ff fc1d 	bl	80001c8 <main>

0800098e <LoopForever>:

LoopForever:
    b LoopForever
 800098e:	e7fe      	b.n	800098e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000990:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800099c:	080041e0 	.word	0x080041e0
  ldr r2, =_sbss
 80009a0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80009a4:	20000214 	.word	0x20000214

080009a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_IRQHandler>
	...

080009ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_Init+0x28>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <HAL_Init+0x28>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009bc:	2003      	movs	r0, #3
 80009be:	f000 f931 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 f808 	bl	80009d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c8:	f7ff fe5c 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40022000 	.word	0x40022000

080009d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_InitTick+0x54>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_InitTick+0x58>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	4619      	mov	r1, r3
 80009ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 f93b 	bl	8000c72 <HAL_SYSTICK_Config>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e00e      	b.n	8000a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b0f      	cmp	r3, #15
 8000a0a:	d80a      	bhi.n	8000a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295
 8000a14:	f000 f911 	bl	8000c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a18:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <HAL_InitTick+0x5c>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e000      	b.n	8000a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000004 	.word	0x20000004

08000a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_IncTick+0x20>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_IncTick+0x24>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4413      	add	r3, r2
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_IncTick+0x24>)
 8000a4a:	6013      	str	r3, [r2, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	200001fc 	.word	0x200001fc

08000a60 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <HAL_GetTick+0x14>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	200001fc 	.word	0x200001fc

08000a78 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a80:	f7ff ffee 	bl	8000a60 <HAL_GetTick>
 8000a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a90:	d005      	beq.n	8000a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_Delay+0x44>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a9e:	bf00      	nop
 8000aa0:	f7ff ffde 	bl	8000a60 <HAL_GetTick>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d8f7      	bhi.n	8000aa0 <HAL_Delay+0x28>
  {
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000008 	.word	0x20000008

08000ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <__NVIC_GetPriorityGrouping+0x18>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	f003 0307 	and.w	r3, r3, #7
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f7ff ff8e 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff47 	bl	8000ac0 <__NVIC_SetPriorityGrouping>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c4c:	f7ff ff5c 	bl	8000b08 <__NVIC_GetPriorityGrouping>
 8000c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	6978      	ldr	r0, [r7, #20]
 8000c58:	f7ff ff8e 	bl	8000b78 <NVIC_EncodePriority>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff5d 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ffb0 	bl	8000be0 <SysTick_Config>
 8000c80:	4603      	mov	r3, r0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9a:	e14e      	b.n	8000f3a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 8140 	beq.w	8000f34 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d005      	beq.n	8000ccc <HAL_GPIO_Init+0x40>
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d130      	bne.n	8000d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d02:	2201      	movs	r2, #1
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	091b      	lsrs	r3, r3, #4
 8000d18:	f003 0201 	and.w	r2, r3, #1
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d017      	beq.n	8000d6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d123      	bne.n	8000dbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	08da      	lsrs	r2, r3, #3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3208      	adds	r2, #8
 8000d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	691a      	ldr	r2, [r3, #16]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	08da      	lsrs	r2, r3, #3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3208      	adds	r2, #8
 8000db8:	6939      	ldr	r1, [r7, #16]
 8000dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0203 	and.w	r2, r3, #3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 809a 	beq.w	8000f34 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e00:	4b55      	ldr	r3, [pc, #340]	; (8000f58 <HAL_GPIO_Init+0x2cc>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a54      	ldr	r2, [pc, #336]	; (8000f58 <HAL_GPIO_Init+0x2cc>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b52      	ldr	r3, [pc, #328]	; (8000f58 <HAL_GPIO_Init+0x2cc>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e18:	4a50      	ldr	r2, [pc, #320]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	3302      	adds	r3, #2
 8000e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e42:	d013      	beq.n	8000e6c <HAL_GPIO_Init+0x1e0>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a46      	ldr	r2, [pc, #280]	; (8000f60 <HAL_GPIO_Init+0x2d4>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d00d      	beq.n	8000e68 <HAL_GPIO_Init+0x1dc>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a45      	ldr	r2, [pc, #276]	; (8000f64 <HAL_GPIO_Init+0x2d8>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d007      	beq.n	8000e64 <HAL_GPIO_Init+0x1d8>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a44      	ldr	r2, [pc, #272]	; (8000f68 <HAL_GPIO_Init+0x2dc>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d101      	bne.n	8000e60 <HAL_GPIO_Init+0x1d4>
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e006      	b.n	8000e6e <HAL_GPIO_Init+0x1e2>
 8000e60:	2305      	movs	r3, #5
 8000e62:	e004      	b.n	8000e6e <HAL_GPIO_Init+0x1e2>
 8000e64:	2302      	movs	r3, #2
 8000e66:	e002      	b.n	8000e6e <HAL_GPIO_Init+0x1e2>
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e000      	b.n	8000e6e <HAL_GPIO_Init+0x1e2>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	f002 0203 	and.w	r2, r2, #3
 8000e74:	0092      	lsls	r2, r2, #2
 8000e76:	4093      	lsls	r3, r2
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e7e:	4937      	ldr	r1, [pc, #220]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	3302      	adds	r3, #2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8c:	4b37      	ldr	r3, [pc, #220]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eb0:	4a2e      	ldr	r2, [pc, #184]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb6:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eda:	4a24      	ldr	r2, [pc, #144]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ee0:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f04:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f2e:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	3301      	adds	r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	fa22 f303 	lsr.w	r3, r2, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f47f aea9 	bne.w	8000c9c <HAL_GPIO_Init+0x10>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	371c      	adds	r7, #28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010000 	.word	0x40010000
 8000f60:	48000400 	.word	0x48000400
 8000f64:	48000800 	.word	0x48000800
 8000f68:	48000c00 	.word	0x48000c00
 8000f6c:	40010400 	.word	0x40010400

08000f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f80:	787b      	ldrb	r3, [r7, #1]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f8c:	e002      	b.n	8000f94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fb0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	f001 b823 	b.w	800200c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 817d 	beq.w	80012d6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fdc:	4bbc      	ldr	r3, [pc, #752]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 030c 	and.w	r3, r3, #12
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d00c      	beq.n	8001002 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe8:	4bb9      	ldr	r3, [pc, #740]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 030c 	and.w	r3, r3, #12
 8000ff0:	2b08      	cmp	r3, #8
 8000ff2:	d15c      	bne.n	80010ae <HAL_RCC_OscConfig+0x10e>
 8000ff4:	4bb6      	ldr	r3, [pc, #728]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001000:	d155      	bne.n	80010ae <HAL_RCC_OscConfig+0x10e>
 8001002:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001006:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800100e:	fa93 f3a3 	rbit	r3, r3
 8001012:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001016:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101a:	fab3 f383 	clz	r3, r3
 800101e:	b2db      	uxtb	r3, r3
 8001020:	095b      	lsrs	r3, r3, #5
 8001022:	b2db      	uxtb	r3, r3
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b01      	cmp	r3, #1
 800102c:	d102      	bne.n	8001034 <HAL_RCC_OscConfig+0x94>
 800102e:	4ba8      	ldr	r3, [pc, #672]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	e015      	b.n	8001060 <HAL_RCC_OscConfig+0xc0>
 8001034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001038:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001040:	fa93 f3a3 	rbit	r3, r3
 8001044:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800104c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001050:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001054:	fa93 f3a3 	rbit	r3, r3
 8001058:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800105c:	4b9c      	ldr	r3, [pc, #624]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001064:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001068:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800106c:	fa92 f2a2 	rbit	r2, r2
 8001070:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001074:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001078:	fab2 f282 	clz	r2, r2
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	f042 0220 	orr.w	r2, r2, #32
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	f002 021f 	and.w	r2, r2, #31
 8001088:	2101      	movs	r1, #1
 800108a:	fa01 f202 	lsl.w	r2, r1, r2
 800108e:	4013      	ands	r3, r2
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 811f 	beq.w	80012d4 <HAL_RCC_OscConfig+0x334>
 8001096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800109a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f040 8116 	bne.w	80012d4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	f000 bfaf 	b.w	800200c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x12e>
 80010c0:	4b83      	ldr	r3, [pc, #524]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a82      	ldr	r2, [pc, #520]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 80010c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e036      	b.n	800113c <HAL_RCC_OscConfig+0x19c>
 80010ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x158>
 80010de:	4b7c      	ldr	r3, [pc, #496]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a7b      	ldr	r2, [pc, #492]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 80010e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b79      	ldr	r3, [pc, #484]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a78      	ldr	r2, [pc, #480]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 80010f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e021      	b.n	800113c <HAL_RCC_OscConfig+0x19c>
 80010f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001108:	d10c      	bne.n	8001124 <HAL_RCC_OscConfig+0x184>
 800110a:	4b71      	ldr	r3, [pc, #452]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a70      	ldr	r2, [pc, #448]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	4b6e      	ldr	r3, [pc, #440]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a6d      	ldr	r2, [pc, #436]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 800111c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e00b      	b.n	800113c <HAL_RCC_OscConfig+0x19c>
 8001124:	4b6a      	ldr	r3, [pc, #424]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a69      	ldr	r2, [pc, #420]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 800112a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b67      	ldr	r3, [pc, #412]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a66      	ldr	r2, [pc, #408]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800113c:	4b64      	ldr	r3, [pc, #400]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 800113e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001140:	f023 020f 	bic.w	r2, r3, #15
 8001144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001148:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	495f      	ldr	r1, [pc, #380]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001152:	4313      	orrs	r3, r2
 8001154:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d059      	beq.n	800121a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001166:	f7ff fc7b 	bl	8000a60 <HAL_GetTick>
 800116a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	e00a      	b.n	8001186 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fc76 	bl	8000a60 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b64      	cmp	r3, #100	; 0x64
 800117e:	d902      	bls.n	8001186 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	f000 bf43 	b.w	800200c <HAL_RCC_OscConfig+0x106c>
 8001186:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800118a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001192:	fa93 f3a3 	rbit	r3, r3
 8001196:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800119a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	fab3 f383 	clz	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	095b      	lsrs	r3, r3, #5
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d102      	bne.n	80011b8 <HAL_RCC_OscConfig+0x218>
 80011b2:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	e015      	b.n	80011e4 <HAL_RCC_OscConfig+0x244>
 80011b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011bc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80011c4:	fa93 f3a3 	rbit	r3, r3
 80011c8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80011d4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80011d8:	fa93 f3a3 	rbit	r3, r3
 80011dc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80011e0:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011e8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80011ec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80011f0:	fa92 f2a2 	rbit	r2, r2
 80011f4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80011f8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80011fc:	fab2 f282 	clz	r2, r2
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	f042 0220 	orr.w	r2, r2, #32
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	f002 021f 	and.w	r2, r2, #31
 800120c:	2101      	movs	r1, #1
 800120e:	fa01 f202 	lsl.w	r2, r1, r2
 8001212:	4013      	ands	r3, r2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0ab      	beq.n	8001170 <HAL_RCC_OscConfig+0x1d0>
 8001218:	e05d      	b.n	80012d6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121a:	f7ff fc21 	bl	8000a60 <HAL_GetTick>
 800121e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001222:	e00a      	b.n	800123a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001224:	f7ff fc1c 	bl	8000a60 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b64      	cmp	r3, #100	; 0x64
 8001232:	d902      	bls.n	800123a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	f000 bee9 	b.w	800200c <HAL_RCC_OscConfig+0x106c>
 800123a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800123e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001242:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001246:	fa93 f3a3 	rbit	r3, r3
 800124a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800124e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	fab3 f383 	clz	r3, r3
 8001256:	b2db      	uxtb	r3, r3
 8001258:	095b      	lsrs	r3, r3, #5
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b01      	cmp	r3, #1
 8001264:	d102      	bne.n	800126c <HAL_RCC_OscConfig+0x2cc>
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	e015      	b.n	8001298 <HAL_RCC_OscConfig+0x2f8>
 800126c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001270:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001274:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001278:	fa93 f3a3 	rbit	r3, r3
 800127c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001284:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001288:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800128c:	fa93 f3a3 	rbit	r3, r3
 8001290:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800129c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80012a0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012a4:	fa92 f2a2 	rbit	r2, r2
 80012a8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80012ac:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80012b0:	fab2 f282 	clz	r2, r2
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	f042 0220 	orr.w	r2, r2, #32
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	f002 021f 	and.w	r2, r2, #31
 80012c0:	2101      	movs	r1, #1
 80012c2:	fa01 f202 	lsl.w	r2, r1, r2
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1ab      	bne.n	8001224 <HAL_RCC_OscConfig+0x284>
 80012cc:	e003      	b.n	80012d6 <HAL_RCC_OscConfig+0x336>
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 817d 	beq.w	80015e6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012ec:	4ba6      	ldr	r3, [pc, #664]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00b      	beq.n	8001310 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012f8:	4ba3      	ldr	r3, [pc, #652]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	2b08      	cmp	r3, #8
 8001302:	d172      	bne.n	80013ea <HAL_RCC_OscConfig+0x44a>
 8001304:	4ba0      	ldr	r3, [pc, #640]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d16c      	bne.n	80013ea <HAL_RCC_OscConfig+0x44a>
 8001310:	2302      	movs	r3, #2
 8001312:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001316:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800131a:	fa93 f3a3 	rbit	r3, r3
 800131e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001322:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001326:	fab3 f383 	clz	r3, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	095b      	lsrs	r3, r3, #5
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b01      	cmp	r3, #1
 8001338:	d102      	bne.n	8001340 <HAL_RCC_OscConfig+0x3a0>
 800133a:	4b93      	ldr	r3, [pc, #588]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	e013      	b.n	8001368 <HAL_RCC_OscConfig+0x3c8>
 8001340:	2302      	movs	r3, #2
 8001342:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001358:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001364:	4b88      	ldr	r3, [pc, #544]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	2202      	movs	r2, #2
 800136a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800136e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001372:	fa92 f2a2 	rbit	r2, r2
 8001376:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800137a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800137e:	fab2 f282 	clz	r2, r2
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	f042 0220 	orr.w	r2, r2, #32
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	f002 021f 	and.w	r2, r2, #31
 800138e:	2101      	movs	r1, #1
 8001390:	fa01 f202 	lsl.w	r2, r1, r2
 8001394:	4013      	ands	r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00a      	beq.n	80013b0 <HAL_RCC_OscConfig+0x410>
 800139a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800139e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d002      	beq.n	80013b0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	f000 be2e 	b.w	800200c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4b75      	ldr	r3, [pc, #468]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	21f8      	movs	r1, #248	; 0xf8
 80013c6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ca:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80013ce:	fa91 f1a1 	rbit	r1, r1
 80013d2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80013d6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80013da:	fab1 f181 	clz	r1, r1
 80013de:	b2c9      	uxtb	r1, r1
 80013e0:	408b      	lsls	r3, r1
 80013e2:	4969      	ldr	r1, [pc, #420]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e8:	e0fd      	b.n	80015e6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8088 	beq.w	800150c <HAL_RCC_OscConfig+0x56c>
 80013fc:	2301      	movs	r3, #1
 80013fe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800140e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001412:	fab3 f383 	clz	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800141c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	461a      	mov	r2, r3
 8001424:	2301      	movs	r3, #1
 8001426:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fb1a 	bl	8000a60 <HAL_GetTick>
 800142c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001430:	e00a      	b.n	8001448 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fb15 	bl	8000a60 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d902      	bls.n	8001448 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	f000 bde2 	b.w	800200c <HAL_RCC_OscConfig+0x106c>
 8001448:	2302      	movs	r3, #2
 800144a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800145a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145e:	fab3 f383 	clz	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	095b      	lsrs	r3, r3, #5
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b01      	cmp	r3, #1
 8001470:	d102      	bne.n	8001478 <HAL_RCC_OscConfig+0x4d8>
 8001472:	4b45      	ldr	r3, [pc, #276]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	e013      	b.n	80014a0 <HAL_RCC_OscConfig+0x500>
 8001478:	2302      	movs	r3, #2
 800147a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001482:	fa93 f3a3 	rbit	r3, r3
 8001486:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001490:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001494:	fa93 f3a3 	rbit	r3, r3
 8001498:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800149c:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	2202      	movs	r2, #2
 80014a2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80014a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014aa:	fa92 f2a2 	rbit	r2, r2
 80014ae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80014b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80014b6:	fab2 f282 	clz	r2, r2
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	f042 0220 	orr.w	r2, r2, #32
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	f002 021f 	and.w	r2, r2, #31
 80014c6:	2101      	movs	r1, #1
 80014c8:	fa01 f202 	lsl.w	r2, r1, r2
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0af      	beq.n	8001432 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	21f8      	movs	r1, #248	; 0xf8
 80014e8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80014f0:	fa91 f1a1 	rbit	r1, r1
 80014f4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80014f8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80014fc:	fab1 f181 	clz	r1, r1
 8001500:	b2c9      	uxtb	r1, r1
 8001502:	408b      	lsls	r3, r1
 8001504:	4920      	ldr	r1, [pc, #128]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
 800150a:	e06c      	b.n	80015e6 <HAL_RCC_OscConfig+0x646>
 800150c:	2301      	movs	r3, #1
 800150e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001516:	fa93 f3a3 	rbit	r3, r3
 800151a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800151e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800152c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	461a      	mov	r2, r3
 8001534:	2300      	movs	r3, #0
 8001536:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fa92 	bl	8000a60 <HAL_GetTick>
 800153c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001540:	e00a      	b.n	8001558 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001542:	f7ff fa8d 	bl	8000a60 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d902      	bls.n	8001558 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	f000 bd5a 	b.w	800200c <HAL_RCC_OscConfig+0x106c>
 8001558:	2302      	movs	r3, #2
 800155a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001562:	fa93 f3a3 	rbit	r3, r3
 8001566:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800156a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	fab3 f383 	clz	r3, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	095b      	lsrs	r3, r3, #5
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b01      	cmp	r3, #1
 8001580:	d104      	bne.n	800158c <HAL_RCC_OscConfig+0x5ec>
 8001582:	4b01      	ldr	r3, [pc, #4]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	e015      	b.n	80015b4 <HAL_RCC_OscConfig+0x614>
 8001588:	40021000 	.word	0x40021000
 800158c:	2302      	movs	r3, #2
 800158e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800159e:	2302      	movs	r3, #2
 80015a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015a8:	fa93 f3a3 	rbit	r3, r3
 80015ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80015b0:	4bc8      	ldr	r3, [pc, #800]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	2202      	movs	r2, #2
 80015b6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80015ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015be:	fa92 f2a2 	rbit	r2, r2
 80015c2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80015c6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015ca:	fab2 f282 	clz	r2, r2
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	f042 0220 	orr.w	r2, r2, #32
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	f002 021f 	and.w	r2, r2, #31
 80015da:	2101      	movs	r1, #1
 80015dc:	fa01 f202 	lsl.w	r2, r1, r2
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1ad      	bne.n	8001542 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8110 	beq.w	800181c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001600:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d079      	beq.n	8001700 <HAL_RCC_OscConfig+0x760>
 800160c:	2301      	movs	r3, #1
 800160e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001612:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001616:	fa93 f3a3 	rbit	r3, r3
 800161a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800161e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001622:	fab3 f383 	clz	r3, r3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	4bab      	ldr	r3, [pc, #684]	; (80018d8 <HAL_RCC_OscConfig+0x938>)
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	461a      	mov	r2, r3
 8001632:	2301      	movs	r3, #1
 8001634:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001636:	f7ff fa13 	bl	8000a60 <HAL_GetTick>
 800163a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	e00a      	b.n	8001656 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff fa0e 	bl	8000a60 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d902      	bls.n	8001656 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	f000 bcdb 	b.w	800200c <HAL_RCC_OscConfig+0x106c>
 8001656:	2302      	movs	r3, #2
 8001658:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001660:	fa93 f3a3 	rbit	r3, r3
 8001664:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001670:	2202      	movs	r2, #2
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001678:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	fa93 f2a3 	rbit	r2, r3
 8001682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001686:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001694:	2202      	movs	r2, #2
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	fa93 f2a3 	rbit	r2, r3
 80016a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b0:	4b88      	ldr	r3, [pc, #544]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 80016b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016bc:	2102      	movs	r1, #2
 80016be:	6019      	str	r1, [r3, #0]
 80016c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	fa93 f1a3 	rbit	r1, r3
 80016ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016d6:	6019      	str	r1, [r3, #0]
  return result;
 80016d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	fab3 f383 	clz	r3, r3
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	2101      	movs	r1, #1
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0a0      	beq.n	8001640 <HAL_RCC_OscConfig+0x6a0>
 80016fe:	e08d      	b.n	800181c <HAL_RCC_OscConfig+0x87c>
 8001700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001704:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001708:	2201      	movs	r2, #1
 800170a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001710:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fa93 f2a3 	rbit	r2, r3
 800171a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001722:	601a      	str	r2, [r3, #0]
  return result;
 8001724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001728:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800172c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800172e:	fab3 f383 	clz	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	4b68      	ldr	r3, [pc, #416]	; (80018d8 <HAL_RCC_OscConfig+0x938>)
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	461a      	mov	r2, r3
 800173e:	2300      	movs	r3, #0
 8001740:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff f98d 	bl	8000a60 <HAL_GetTick>
 8001746:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174a:	e00a      	b.n	8001762 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800174c:	f7ff f988 	bl	8000a60 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d902      	bls.n	8001762 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	f000 bc55 	b.w	800200c <HAL_RCC_OscConfig+0x106c>
 8001762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001766:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800176a:	2202      	movs	r2, #2
 800176c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	fa93 f2a3 	rbit	r2, r3
 800177c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001780:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800178e:	2202      	movs	r2, #2
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	fa93 f2a3 	rbit	r2, r3
 80017a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017b2:	2202      	movs	r2, #2
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	fa93 f2a3 	rbit	r2, r3
 80017c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ce:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 80017d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017da:	2102      	movs	r1, #2
 80017dc:	6019      	str	r1, [r3, #0]
 80017de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	fa93 f1a3 	rbit	r1, r3
 80017ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017f4:	6019      	str	r1, [r3, #0]
  return result;
 80017f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	fab3 f383 	clz	r3, r3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800180a:	b2db      	uxtb	r3, r3
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	2101      	movs	r1, #1
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d197      	bne.n	800174c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001820:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 81a1 	beq.w	8001b74 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001838:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d116      	bne.n	8001872 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001844:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 800184a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184e:	61d3      	str	r3, [r2, #28]
 8001850:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001866:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800186a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800186c:	2301      	movs	r3, #1
 800186e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <HAL_RCC_OscConfig+0x93c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d11a      	bne.n	80018b4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_RCC_OscConfig+0x93c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a16      	ldr	r2, [pc, #88]	; (80018dc <HAL_RCC_OscConfig+0x93c>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001888:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188a:	f7ff f8e9 	bl	8000a60 <HAL_GetTick>
 800188e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001892:	e009      	b.n	80018a8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001894:	f7ff f8e4 	bl	8000a60 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b64      	cmp	r3, #100	; 0x64
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e3b1      	b.n	800200c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_RCC_OscConfig+0x93c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0ef      	beq.n	8001894 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d10d      	bne.n	80018e0 <HAL_RCC_OscConfig+0x940>
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4a02      	ldr	r2, [pc, #8]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6213      	str	r3, [r2, #32]
 80018d0:	e03c      	b.n	800194c <HAL_RCC_OscConfig+0x9ac>
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000
 80018d8:	10908120 	.word	0x10908120
 80018dc:	40007000 	.word	0x40007000
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10c      	bne.n	800190a <HAL_RCC_OscConfig+0x96a>
 80018f0:	4bc1      	ldr	r3, [pc, #772]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4ac0      	ldr	r2, [pc, #768]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	6213      	str	r3, [r2, #32]
 80018fc:	4bbe      	ldr	r3, [pc, #760]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4abd      	ldr	r2, [pc, #756]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001902:	f023 0304 	bic.w	r3, r3, #4
 8001906:	6213      	str	r3, [r2, #32]
 8001908:	e020      	b.n	800194c <HAL_RCC_OscConfig+0x9ac>
 800190a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b05      	cmp	r3, #5
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0x994>
 800191a:	4bb7      	ldr	r3, [pc, #732]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4ab6      	ldr	r2, [pc, #728]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6213      	str	r3, [r2, #32]
 8001926:	4bb4      	ldr	r3, [pc, #720]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4ab3      	ldr	r2, [pc, #716]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6213      	str	r3, [r2, #32]
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0x9ac>
 8001934:	4bb0      	ldr	r3, [pc, #704]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	4aaf      	ldr	r2, [pc, #700]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	6213      	str	r3, [r2, #32]
 8001940:	4bad      	ldr	r3, [pc, #692]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4aac      	ldr	r2, [pc, #688]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001946:	f023 0304 	bic.w	r3, r3, #4
 800194a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800194c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001950:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 8081 	beq.w	8001a60 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195e:	f7ff f87f 	bl	8000a60 <HAL_GetTick>
 8001962:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001966:	e00b      	b.n	8001980 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001968:	f7ff f87a 	bl	8000a60 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f241 3288 	movw	r2, #5000	; 0x1388
 8001978:	4293      	cmp	r3, r2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e345      	b.n	800200c <HAL_RCC_OscConfig+0x106c>
 8001980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001984:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001988:	2202      	movs	r2, #2
 800198a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fa93 f2a3 	rbit	r2, r3
 800199a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019ac:	2202      	movs	r2, #2
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	fa93 f2a3 	rbit	r2, r3
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019c6:	601a      	str	r2, [r3, #0]
  return result;
 80019c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019cc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d2:	fab3 f383 	clz	r3, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	095b      	lsrs	r3, r3, #5
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d102      	bne.n	80019ec <HAL_RCC_OscConfig+0xa4c>
 80019e6:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	e013      	b.n	8001a14 <HAL_RCC_OscConfig+0xa74>
 80019ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80019f4:	2202      	movs	r2, #2
 80019f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	fa93 f2a3 	rbit	r2, r3
 8001a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	4b79      	ldr	r3, [pc, #484]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a18:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	6011      	str	r1, [r2, #0]
 8001a20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a24:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	fa92 f1a2 	rbit	r1, r2
 8001a2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a32:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a36:	6011      	str	r1, [r2, #0]
  return result;
 8001a38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a3c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	fab2 f282 	clz	r2, r2
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	f002 021f 	and.w	r2, r2, #31
 8001a52:	2101      	movs	r1, #1
 8001a54:	fa01 f202 	lsl.w	r2, r1, r2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d084      	beq.n	8001968 <HAL_RCC_OscConfig+0x9c8>
 8001a5e:	e07f      	b.n	8001b60 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a60:	f7fe fffe 	bl	8000a60 <HAL_GetTick>
 8001a64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	e00b      	b.n	8001a82 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7fe fff9 	bl	8000a60 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e2c4      	b.n	800200c <HAL_RCC_OscConfig+0x106c>
 8001a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a86:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fa93 f2a3 	rbit	r2, r3
 8001a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001aae:	2202      	movs	r2, #2
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	fa93 f2a3 	rbit	r2, r3
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ac8:	601a      	str	r2, [r3, #0]
  return result;
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ad2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad4:	fab3 f383 	clz	r3, r3
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	f043 0302 	orr.w	r3, r3, #2
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d102      	bne.n	8001aee <HAL_RCC_OscConfig+0xb4e>
 8001ae8:	4b43      	ldr	r3, [pc, #268]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	e013      	b.n	8001b16 <HAL_RCC_OscConfig+0xb76>
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001af6:	2202      	movs	r2, #2
 8001af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	fa93 f2a3 	rbit	r2, r3
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b1a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b1e:	2102      	movs	r1, #2
 8001b20:	6011      	str	r1, [r2, #0]
 8001b22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b26:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	fa92 f1a2 	rbit	r1, r2
 8001b30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b34:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b38:	6011      	str	r1, [r2, #0]
  return result;
 8001b3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b3e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	fab2 f282 	clz	r2, r2
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	f002 021f 	and.w	r2, r2, #31
 8001b54:	2101      	movs	r1, #1
 8001b56:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d184      	bne.n	8001a6a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b60:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b68:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b72:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 8242 	beq.w	800200a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	f000 8213 	beq.w	8001fba <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	f040 8162 	bne.w	8001e6a <HAL_RCC_OscConfig+0xeca>
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	fa93 f2a3 	rbit	r2, r3
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bca:	601a      	str	r2, [r3, #0]
  return result;
 8001bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bd4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001be0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	461a      	mov	r2, r3
 8001be8:	2300      	movs	r3, #0
 8001bea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7fe ff38 	bl	8000a60 <HAL_GetTick>
 8001bf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf4:	e00c      	b.n	8001c10 <HAL_RCC_OscConfig+0xc70>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7fe ff30 	bl	8000a60 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e1fd      	b.n	800200c <HAL_RCC_OscConfig+0x106c>
 8001c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c14:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c22:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	fa93 f2a3 	rbit	r2, r3
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c34:	601a      	str	r2, [r3, #0]
  return result;
 8001c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c3e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d102      	bne.n	8001c5a <HAL_RCC_OscConfig+0xcba>
 8001c54:	4bb0      	ldr	r3, [pc, #704]	; (8001f18 <HAL_RCC_OscConfig+0xf78>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	e027      	b.n	8001caa <HAL_RCC_OscConfig+0xd0a>
 8001c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	fa93 f2a3 	rbit	r2, r3
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	fa93 f2a3 	rbit	r2, r3
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	4b9c      	ldr	r3, [pc, #624]	; (8001f18 <HAL_RCC_OscConfig+0xf78>)
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cae:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001cb2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cb6:	6011      	str	r1, [r2, #0]
 8001cb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cbc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	fa92 f1a2 	rbit	r1, r2
 8001cc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cca:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cce:	6011      	str	r1, [r2, #0]
  return result;
 8001cd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cd4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	fab2 f282 	clz	r2, r2
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	f042 0220 	orr.w	r2, r2, #32
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	f002 021f 	and.w	r2, r2, #31
 8001cea:	2101      	movs	r1, #1
 8001cec:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d182      	bne.n	8001bfc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf6:	4b88      	ldr	r3, [pc, #544]	; (8001f18 <HAL_RCC_OscConfig+0xf78>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	430b      	orrs	r3, r1
 8001d18:	497f      	ldr	r1, [pc, #508]	; (8001f18 <HAL_RCC_OscConfig+0xf78>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]
 8001d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d22:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	fa93 f2a3 	rbit	r2, r3
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d42:	601a      	str	r2, [r3, #0]
  return result;
 8001d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d48:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d4c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	461a      	mov	r2, r3
 8001d60:	2301      	movs	r3, #1
 8001d62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7fe fe7c 	bl	8000a60 <HAL_GetTick>
 8001d68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d6c:	e009      	b.n	8001d82 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7fe fe77 	bl	8000a60 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e144      	b.n	800200c <HAL_RCC_OscConfig+0x106c>
 8001d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d86:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d94:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	fa93 f2a3 	rbit	r2, r3
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001da6:	601a      	str	r2, [r3, #0]
  return result;
 8001da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001db0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d102      	bne.n	8001dcc <HAL_RCC_OscConfig+0xe2c>
 8001dc6:	4b54      	ldr	r3, [pc, #336]	; (8001f18 <HAL_RCC_OscConfig+0xf78>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	e027      	b.n	8001e1c <HAL_RCC_OscConfig+0xe7c>
 8001dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001dd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dde:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	fa93 f2a3 	rbit	r2, r3
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001dfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e04:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	fa93 f2a3 	rbit	r2, r3
 8001e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e12:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	4b3f      	ldr	r3, [pc, #252]	; (8001f18 <HAL_RCC_OscConfig+0xf78>)
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e20:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e28:	6011      	str	r1, [r2, #0]
 8001e2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e2e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	fa92 f1a2 	rbit	r1, r2
 8001e38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e3c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e40:	6011      	str	r1, [r2, #0]
  return result;
 8001e42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e46:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	fab2 f282 	clz	r2, r2
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	f042 0220 	orr.w	r2, r2, #32
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	f002 021f 	and.w	r2, r2, #31
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d082      	beq.n	8001d6e <HAL_RCC_OscConfig+0xdce>
 8001e68:	e0cf      	b.n	800200a <HAL_RCC_OscConfig+0x106a>
 8001e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fa93 f2a3 	rbit	r2, r3
 8001e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e8e:	601a      	str	r2, [r3, #0]
  return result;
 8001e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e94:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e98:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ea4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2300      	movs	r3, #0
 8001eae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7fe fdd6 	bl	8000a60 <HAL_GetTick>
 8001eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb8:	e009      	b.n	8001ece <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eba:	f7fe fdd1 	bl	8000a60 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e09e      	b.n	800200c <HAL_RCC_OscConfig+0x106c>
 8001ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ed6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	fa93 f2a3 	rbit	r2, r3
 8001eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ef2:	601a      	str	r2, [r3, #0]
  return result;
 8001ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001efc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d104      	bne.n	8001f1c <HAL_RCC_OscConfig+0xf7c>
 8001f12:	4b01      	ldr	r3, [pc, #4]	; (8001f18 <HAL_RCC_OscConfig+0xf78>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	e029      	b.n	8001f6c <HAL_RCC_OscConfig+0xfcc>
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f20:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	fa93 f2a3 	rbit	r2, r3
 8001f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f46:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f54:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	fa93 f2a3 	rbit	r2, r3
 8001f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f62:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <HAL_RCC_OscConfig+0x1078>)
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f70:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f78:	6011      	str	r1, [r2, #0]
 8001f7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f7e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	fa92 f1a2 	rbit	r1, r2
 8001f88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f8c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f90:	6011      	str	r1, [r2, #0]
  return result;
 8001f92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f96:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	fab2 f282 	clz	r2, r2
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	f042 0220 	orr.w	r2, r2, #32
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	f002 021f 	and.w	r2, r2, #31
 8001fac:	2101      	movs	r1, #1
 8001fae:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d180      	bne.n	8001eba <HAL_RCC_OscConfig+0xf1a>
 8001fb8:	e027      	b.n	800200a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e01e      	b.n	800200c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_RCC_OscConfig+0x1078>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fda:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d10b      	bne.n	8002006 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001fee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ff2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002002:	429a      	cmp	r2, r3
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000

0800201c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b09e      	sub	sp, #120	; 0x78
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e162      	b.n	80022fa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002034:	4b90      	ldr	r3, [pc, #576]	; (8002278 <HAL_RCC_ClockConfig+0x25c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d910      	bls.n	8002064 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b8d      	ldr	r3, [pc, #564]	; (8002278 <HAL_RCC_ClockConfig+0x25c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 0207 	bic.w	r2, r3, #7
 800204a:	498b      	ldr	r1, [pc, #556]	; (8002278 <HAL_RCC_ClockConfig+0x25c>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b89      	ldr	r3, [pc, #548]	; (8002278 <HAL_RCC_ClockConfig+0x25c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e14a      	b.n	80022fa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002070:	4b82      	ldr	r3, [pc, #520]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	497f      	ldr	r1, [pc, #508]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80dc 	beq.w	8002248 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d13c      	bne.n	8002112 <HAL_RCC_ClockConfig+0xf6>
 8002098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800209c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d102      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xa6>
 80020bc:	4b6f      	ldr	r3, [pc, #444]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	e00f      	b.n	80020e2 <HAL_RCC_ClockConfig+0xc6>
 80020c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	667b      	str	r3, [r7, #100]	; 0x64
 80020d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020d4:	663b      	str	r3, [r7, #96]	; 0x60
 80020d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020de:	4b67      	ldr	r3, [pc, #412]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80020e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020ea:	fa92 f2a2 	rbit	r2, r2
 80020ee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80020f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020f2:	fab2 f282 	clz	r2, r2
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	f042 0220 	orr.w	r2, r2, #32
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	f002 021f 	and.w	r2, r2, #31
 8002102:	2101      	movs	r1, #1
 8002104:	fa01 f202 	lsl.w	r2, r1, r2
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d17b      	bne.n	8002206 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0f3      	b.n	80022fa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d13c      	bne.n	8002194 <HAL_RCC_ClockConfig+0x178>
 800211a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800211e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b01      	cmp	r3, #1
 800213c:	d102      	bne.n	8002144 <HAL_RCC_ClockConfig+0x128>
 800213e:	4b4f      	ldr	r3, [pc, #316]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	e00f      	b.n	8002164 <HAL_RCC_ClockConfig+0x148>
 8002144:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002148:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	647b      	str	r3, [r7, #68]	; 0x44
 8002152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002156:	643b      	str	r3, [r7, #64]	; 0x40
 8002158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002160:	4b46      	ldr	r3, [pc, #280]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002168:	63ba      	str	r2, [r7, #56]	; 0x38
 800216a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800216c:	fa92 f2a2 	rbit	r2, r2
 8002170:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002174:	fab2 f282 	clz	r2, r2
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	f042 0220 	orr.w	r2, r2, #32
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	f002 021f 	and.w	r2, r2, #31
 8002184:	2101      	movs	r1, #1
 8002186:	fa01 f202 	lsl.w	r2, r1, r2
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d13a      	bne.n	8002206 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0b2      	b.n	80022fa <HAL_RCC_ClockConfig+0x2de>
 8002194:	2302      	movs	r3, #2
 8002196:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d102      	bne.n	80021bc <HAL_RCC_ClockConfig+0x1a0>
 80021b6:	4b31      	ldr	r3, [pc, #196]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	e00d      	b.n	80021d8 <HAL_RCC_ClockConfig+0x1bc>
 80021bc:	2302      	movs	r3, #2
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
 80021c8:	2302      	movs	r3, #2
 80021ca:	623b      	str	r3, [r7, #32]
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	4b29      	ldr	r3, [pc, #164]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	2202      	movs	r2, #2
 80021da:	61ba      	str	r2, [r7, #24]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	fa92 f2a2 	rbit	r2, r2
 80021e2:	617a      	str	r2, [r7, #20]
  return result;
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	fab2 f282 	clz	r2, r2
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	f042 0220 	orr.w	r2, r2, #32
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f002 021f 	and.w	r2, r2, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e079      	b.n	80022fa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f023 0203 	bic.w	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	491a      	ldr	r1, [pc, #104]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002218:	f7fe fc22 	bl	8000a60 <HAL_GetTick>
 800221c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	e00a      	b.n	8002236 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002220:	f7fe fc1e 	bl	8000a60 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	; 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e061      	b.n	80022fa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 020c 	and.w	r2, r3, #12
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	429a      	cmp	r2, r3
 8002246:	d1eb      	bne.n	8002220 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_ClockConfig+0x25c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d214      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <HAL_RCC_ClockConfig+0x25c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 0207 	bic.w	r2, r3, #7
 800225e:	4906      	ldr	r1, [pc, #24]	; (8002278 <HAL_RCC_ClockConfig+0x25c>)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <HAL_RCC_ClockConfig+0x25c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d005      	beq.n	8002280 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e040      	b.n	80022fa <HAL_RCC_ClockConfig+0x2de>
 8002278:	40022000 	.word	0x40022000
 800227c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228c:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <HAL_RCC_ClockConfig+0x2e8>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	491a      	ldr	r1, [pc, #104]	; (8002304 <HAL_RCC_ClockConfig+0x2e8>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_RCC_ClockConfig+0x2e8>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4912      	ldr	r1, [pc, #72]	; (8002304 <HAL_RCC_ClockConfig+0x2e8>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022be:	f000 f829 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 80022c2:	4601      	mov	r1, r0
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_RCC_ClockConfig+0x2e8>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022cc:	22f0      	movs	r2, #240	; 0xf0
 80022ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	fa92 f2a2 	rbit	r2, r2
 80022d6:	60fa      	str	r2, [r7, #12]
  return result;
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	fab2 f282 	clz	r2, r2
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	40d3      	lsrs	r3, r2
 80022e2:	4a09      	ldr	r2, [pc, #36]	; (8002308 <HAL_RCC_ClockConfig+0x2ec>)
 80022e4:	5cd3      	ldrb	r3, [r2, r3]
 80022e6:	fa21 f303 	lsr.w	r3, r1, r3
 80022ea:	4a08      	ldr	r2, [pc, #32]	; (800230c <HAL_RCC_ClockConfig+0x2f0>)
 80022ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <HAL_RCC_ClockConfig+0x2f4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe fb70 	bl	80009d8 <HAL_InitTick>
  
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3778      	adds	r7, #120	; 0x78
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	080041a0 	.word	0x080041a0
 800230c:	20000000 	.word	0x20000000
 8002310:	20000004 	.word	0x20000004

08002314 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	b08b      	sub	sp, #44	; 0x2c
 8002318:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800232e:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b04      	cmp	r3, #4
 800233c:	d002      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x30>
 800233e:	2b08      	cmp	r3, #8
 8002340:	d003      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x36>
 8002342:	e03c      	b.n	80023be <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002344:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002346:	623b      	str	r3, [r7, #32]
      break;
 8002348:	e03c      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002350:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002354:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	fa92 f2a2 	rbit	r2, r2
 800235c:	607a      	str	r2, [r7, #4]
  return result;
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	fab2 f282 	clz	r2, r2
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	40d3      	lsrs	r3, r2
 8002368:	4a1c      	ldr	r2, [pc, #112]	; (80023dc <HAL_RCC_GetSysClockFreq+0xc8>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	220f      	movs	r2, #15
 8002378:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	fa92 f2a2 	rbit	r2, r2
 8002380:	60fa      	str	r2, [r7, #12]
  return result;
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	fab2 f282 	clz	r2, r2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	40d3      	lsrs	r3, r2
 800238c:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800239c:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
 80023ac:	e004      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	4a0c      	ldr	r2, [pc, #48]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80023b2:	fb02 f303 	mul.w	r3, r2, r3
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	623b      	str	r3, [r7, #32]
      break;
 80023bc:	e002      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023c0:	623b      	str	r3, [r7, #32]
      break;
 80023c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c4:	6a3b      	ldr	r3, [r7, #32]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	372c      	adds	r7, #44	; 0x2c
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	007a1200 	.word	0x007a1200
 80023dc:	080041b8 	.word	0x080041b8
 80023e0:	080041c8 	.word	0x080041c8
 80023e4:	003d0900 	.word	0x003d0900

080023e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20000000 	.word	0x20000000

08002400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002406:	f7ff ffef 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 800240a:	4601      	mov	r1, r0
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002414:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002418:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	fa92 f2a2 	rbit	r2, r2
 8002420:	603a      	str	r2, [r7, #0]
  return result;
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	fab2 f282 	clz	r2, r2
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	40d3      	lsrs	r3, r2
 800242c:	4a04      	ldr	r2, [pc, #16]	; (8002440 <HAL_RCC_GetPCLK1Freq+0x40>)
 800242e:	5cd3      	ldrb	r3, [r2, r3]
 8002430:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	080041b0 	.word	0x080041b0

08002444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800244a:	f7ff ffcd 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 800244e:	4601      	mov	r1, r0
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002458:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800245c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	fa92 f2a2 	rbit	r2, r2
 8002464:	603a      	str	r2, [r7, #0]
  return result;
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	fab2 f282 	clz	r2, r2
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	40d3      	lsrs	r3, r2
 8002470:	4a04      	ldr	r2, [pc, #16]	; (8002484 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000
 8002484:	080041b0 	.word	0x080041b0

08002488 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b092      	sub	sp, #72	; 0x48
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80d4 	beq.w	8002654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ac:	4b4e      	ldr	r3, [pc, #312]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10e      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b8:	4b4b      	ldr	r3, [pc, #300]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	4a4a      	ldr	r2, [pc, #296]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c2:	61d3      	str	r3, [r2, #28]
 80024c4:	4b48      	ldr	r3, [pc, #288]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d0:	2301      	movs	r3, #1
 80024d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d6:	4b45      	ldr	r3, [pc, #276]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d118      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e2:	4b42      	ldr	r3, [pc, #264]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a41      	ldr	r2, [pc, #260]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ee:	f7fe fab7 	bl	8000a60 <HAL_GetTick>
 80024f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f4:	e008      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f6:	f7fe fab3 	bl	8000a60 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b64      	cmp	r3, #100	; 0x64
 8002502:	d901      	bls.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e14b      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002508:	4b38      	ldr	r3, [pc, #224]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002514:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800251c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800251e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8084 	beq.w	800262e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002530:	429a      	cmp	r2, r3
 8002532:	d07c      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002534:	4b2c      	ldr	r3, [pc, #176]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800253c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800253e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	4b26      	ldr	r3, [pc, #152]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	461a      	mov	r2, r3
 800255e:	2301      	movs	r3, #1
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002566:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	461a      	mov	r2, r3
 8002582:	2300      	movs	r3, #0
 8002584:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002586:	4a18      	ldr	r2, [pc, #96]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800258c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d04b      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7fe fa63 	bl	8000a60 <HAL_GetTick>
 800259a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259c:	e00a      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259e:	f7fe fa5f 	bl	8000a60 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e0f5      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80025b4:	2302      	movs	r3, #2
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
 80025c0:	2302      	movs	r3, #2
 80025c2:	623b      	str	r3, [r7, #32]
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	61fb      	str	r3, [r7, #28]
  return result;
 80025cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d108      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80025e2:	4b01      	ldr	r3, [pc, #4]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	e00d      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40007000 	.word	0x40007000
 80025f0:	10908100 	.word	0x10908100
 80025f4:	2302      	movs	r3, #2
 80025f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	4b69      	ldr	r3, [pc, #420]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	2202      	movs	r2, #2
 8002606:	613a      	str	r2, [r7, #16]
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	fa92 f2a2 	rbit	r2, r2
 800260e:	60fa      	str	r2, [r7, #12]
  return result;
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	fab2 f282 	clz	r2, r2
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	f002 021f 	and.w	r2, r2, #31
 8002622:	2101      	movs	r1, #1
 8002624:	fa01 f202 	lsl.w	r2, r1, r2
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0b7      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800262e:	4b5e      	ldr	r3, [pc, #376]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	495b      	ldr	r1, [pc, #364]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800263c:	4313      	orrs	r3, r2
 800263e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002640:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002644:	2b01      	cmp	r3, #1
 8002646:	d105      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002648:	4b57      	ldr	r3, [pc, #348]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	4a56      	ldr	r2, [pc, #344]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800264e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002652:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002660:	4b51      	ldr	r3, [pc, #324]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	f023 0203 	bic.w	r2, r3, #3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	494e      	ldr	r1, [pc, #312]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800266e:	4313      	orrs	r3, r2
 8002670:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800267e:	4b4a      	ldr	r3, [pc, #296]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f023 0210 	bic.w	r2, r3, #16
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	4947      	ldr	r1, [pc, #284]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800268c:	4313      	orrs	r3, r2
 800268e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800269c:	4b42      	ldr	r3, [pc, #264]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	493f      	ldr	r1, [pc, #252]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d008      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026ba:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	f023 0220 	bic.w	r2, r3, #32
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	4938      	ldr	r1, [pc, #224]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026d8:	4b33      	ldr	r3, [pc, #204]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	4930      	ldr	r1, [pc, #192]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026f6:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	4929      	ldr	r1, [pc, #164]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002714:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	4921      	ldr	r1, [pc, #132]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002722:	4313      	orrs	r3, r2
 8002724:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d008      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	491a      	ldr	r1, [pc, #104]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002740:	4313      	orrs	r3, r2
 8002742:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002750:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	4912      	ldr	r1, [pc, #72]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800275e:	4313      	orrs	r3, r2
 8002760:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d008      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	490b      	ldr	r1, [pc, #44]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800277c:	4313      	orrs	r3, r2
 800277e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	4903      	ldr	r1, [pc, #12]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800279a:	4313      	orrs	r3, r2
 800279c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3748      	adds	r7, #72	; 0x48
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021000 	.word	0x40021000

080027ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e09d      	b.n	80028fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d108      	bne.n	80027d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ce:	d009      	beq.n	80027e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	61da      	str	r2, [r3, #28]
 80027d6:	e005      	b.n	80027e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fd ff64 	bl	80006cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800281a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002824:	d902      	bls.n	800282c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	e002      	b.n	8002832 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800282c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002830:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800283a:	d007      	beq.n	800284c <HAL_SPI_Init+0xa0>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002844:	d002      	beq.n	800284c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288e:	ea42 0103 	orr.w	r1, r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	0c1b      	lsrs	r3, r3, #16
 80028a8:	f003 0204 	and.w	r2, r3, #4
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80028c8:	ea42 0103 	orr.w	r1, r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69da      	ldr	r2, [r3, #28]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e049      	b.n	80029a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d106      	bne.n	800292e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7fd ff13 	bl	8000754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2202      	movs	r2, #2
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3304      	adds	r3, #4
 800293e:	4619      	mov	r1, r3
 8002940:	4610      	mov	r0, r2
 8002942:	f000 fb5b 	bl	8002ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e049      	b.n	8002a56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f841 	bl	8002a5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3304      	adds	r3, #4
 80029ec:	4619      	mov	r1, r3
 80029ee:	4610      	mov	r0, r2
 80029f0:	f000 fb04 	bl	8002ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <HAL_TIM_PWM_Start+0x24>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	bf14      	ite	ne
 8002a90:	2301      	movne	r3, #1
 8002a92:	2300      	moveq	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	e03c      	b.n	8002b12 <HAL_TIM_PWM_Start+0x9e>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d109      	bne.n	8002ab2 <HAL_TIM_PWM_Start+0x3e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	e02f      	b.n	8002b12 <HAL_TIM_PWM_Start+0x9e>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d109      	bne.n	8002acc <HAL_TIM_PWM_Start+0x58>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	bf14      	ite	ne
 8002ac4:	2301      	movne	r3, #1
 8002ac6:	2300      	moveq	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	e022      	b.n	8002b12 <HAL_TIM_PWM_Start+0x9e>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	d109      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0x72>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	bf14      	ite	ne
 8002ade:	2301      	movne	r3, #1
 8002ae0:	2300      	moveq	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	e015      	b.n	8002b12 <HAL_TIM_PWM_Start+0x9e>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b10      	cmp	r3, #16
 8002aea:	d109      	bne.n	8002b00 <HAL_TIM_PWM_Start+0x8c>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	bf14      	ite	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	2300      	moveq	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	e008      	b.n	8002b12 <HAL_TIM_PWM_Start+0x9e>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	bf14      	ite	ne
 8002b0c:	2301      	movne	r3, #1
 8002b0e:	2300      	moveq	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e083      	b.n	8002c22 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d104      	bne.n	8002b2a <HAL_TIM_PWM_Start+0xb6>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b28:	e023      	b.n	8002b72 <HAL_TIM_PWM_Start+0xfe>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d104      	bne.n	8002b3a <HAL_TIM_PWM_Start+0xc6>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b38:	e01b      	b.n	8002b72 <HAL_TIM_PWM_Start+0xfe>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d104      	bne.n	8002b4a <HAL_TIM_PWM_Start+0xd6>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b48:	e013      	b.n	8002b72 <HAL_TIM_PWM_Start+0xfe>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b0c      	cmp	r3, #12
 8002b4e:	d104      	bne.n	8002b5a <HAL_TIM_PWM_Start+0xe6>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b58:	e00b      	b.n	8002b72 <HAL_TIM_PWM_Start+0xfe>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b10      	cmp	r3, #16
 8002b5e:	d104      	bne.n	8002b6a <HAL_TIM_PWM_Start+0xf6>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b68:	e003      	b.n	8002b72 <HAL_TIM_PWM_Start+0xfe>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2201      	movs	r2, #1
 8002b78:	6839      	ldr	r1, [r7, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fdec 	bl	8003758 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a29      	ldr	r2, [pc, #164]	; (8002c2c <HAL_TIM_PWM_Start+0x1b8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00e      	beq.n	8002ba8 <HAL_TIM_PWM_Start+0x134>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a28      	ldr	r2, [pc, #160]	; (8002c30 <HAL_TIM_PWM_Start+0x1bc>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d009      	beq.n	8002ba8 <HAL_TIM_PWM_Start+0x134>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a26      	ldr	r2, [pc, #152]	; (8002c34 <HAL_TIM_PWM_Start+0x1c0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <HAL_TIM_PWM_Start+0x134>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a25      	ldr	r2, [pc, #148]	; (8002c38 <HAL_TIM_PWM_Start+0x1c4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d101      	bne.n	8002bac <HAL_TIM_PWM_Start+0x138>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_TIM_PWM_Start+0x13a>
 8002bac:	2300      	movs	r3, #0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <HAL_TIM_PWM_Start+0x1b8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d009      	beq.n	8002be0 <HAL_TIM_PWM_Start+0x16c>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d004      	beq.n	8002be0 <HAL_TIM_PWM_Start+0x16c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <HAL_TIM_PWM_Start+0x1bc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d115      	bne.n	8002c0c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <HAL_TIM_PWM_Start+0x1c8>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d015      	beq.n	8002c1e <HAL_TIM_PWM_Start+0x1aa>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf8:	d011      	beq.n	8002c1e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0201 	orr.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0a:	e008      	b.n	8002c1e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	e000      	b.n	8002c20 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40014000 	.word	0x40014000
 8002c34:	40014400 	.word	0x40014400
 8002c38:	40014800 	.word	0x40014800
 8002c3c:	00010007 	.word	0x00010007

08002c40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e0ff      	b.n	8002e5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b14      	cmp	r3, #20
 8002c6a:	f200 80f0 	bhi.w	8002e4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002c6e:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c74:	08002cc9 	.word	0x08002cc9
 8002c78:	08002e4f 	.word	0x08002e4f
 8002c7c:	08002e4f 	.word	0x08002e4f
 8002c80:	08002e4f 	.word	0x08002e4f
 8002c84:	08002d09 	.word	0x08002d09
 8002c88:	08002e4f 	.word	0x08002e4f
 8002c8c:	08002e4f 	.word	0x08002e4f
 8002c90:	08002e4f 	.word	0x08002e4f
 8002c94:	08002d4b 	.word	0x08002d4b
 8002c98:	08002e4f 	.word	0x08002e4f
 8002c9c:	08002e4f 	.word	0x08002e4f
 8002ca0:	08002e4f 	.word	0x08002e4f
 8002ca4:	08002d8b 	.word	0x08002d8b
 8002ca8:	08002e4f 	.word	0x08002e4f
 8002cac:	08002e4f 	.word	0x08002e4f
 8002cb0:	08002e4f 	.word	0x08002e4f
 8002cb4:	08002dcd 	.word	0x08002dcd
 8002cb8:	08002e4f 	.word	0x08002e4f
 8002cbc:	08002e4f 	.word	0x08002e4f
 8002cc0:	08002e4f 	.word	0x08002e4f
 8002cc4:	08002e0d 	.word	0x08002e0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fa02 	bl	80030d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0208 	orr.w	r2, r2, #8
 8002ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0204 	bic.w	r2, r2, #4
 8002cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6999      	ldr	r1, [r3, #24]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	619a      	str	r2, [r3, #24]
      break;
 8002d06:	e0a5      	b.n	8002e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fa68 	bl	80031e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6999      	ldr	r1, [r3, #24]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	021a      	lsls	r2, r3, #8
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	619a      	str	r2, [r3, #24]
      break;
 8002d48:	e084      	b.n	8002e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fac7 	bl	80032e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0208 	orr.w	r2, r2, #8
 8002d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69da      	ldr	r2, [r3, #28]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0204 	bic.w	r2, r2, #4
 8002d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69d9      	ldr	r1, [r3, #28]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	61da      	str	r2, [r3, #28]
      break;
 8002d88:	e064      	b.n	8002e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68b9      	ldr	r1, [r7, #8]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fb25 	bl	80033e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69da      	ldr	r2, [r3, #28]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69d9      	ldr	r1, [r3, #28]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	021a      	lsls	r2, r3, #8
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	61da      	str	r2, [r3, #28]
      break;
 8002dca:	e043      	b.n	8002e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fb68 	bl	80034a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0208 	orr.w	r2, r2, #8
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0204 	bic.w	r2, r2, #4
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e0a:	e023      	b.n	8002e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fba6 	bl	8003564 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	021a      	lsls	r2, r3, #8
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e4c:	e002      	b.n	8002e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	75fb      	strb	r3, [r7, #23]
      break;
 8002e52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop

08002e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_TIM_ConfigClockSource+0x1c>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e0b6      	b.n	8002ff2 <HAL_TIM_ConfigClockSource+0x18a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec0:	d03e      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0xd8>
 8002ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec6:	f200 8087 	bhi.w	8002fd8 <HAL_TIM_ConfigClockSource+0x170>
 8002eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ece:	f000 8086 	beq.w	8002fde <HAL_TIM_ConfigClockSource+0x176>
 8002ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed6:	d87f      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x170>
 8002ed8:	2b70      	cmp	r3, #112	; 0x70
 8002eda:	d01a      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0xaa>
 8002edc:	2b70      	cmp	r3, #112	; 0x70
 8002ede:	d87b      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x170>
 8002ee0:	2b60      	cmp	r3, #96	; 0x60
 8002ee2:	d050      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x11e>
 8002ee4:	2b60      	cmp	r3, #96	; 0x60
 8002ee6:	d877      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x170>
 8002ee8:	2b50      	cmp	r3, #80	; 0x50
 8002eea:	d03c      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0xfe>
 8002eec:	2b50      	cmp	r3, #80	; 0x50
 8002eee:	d873      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x170>
 8002ef0:	2b40      	cmp	r3, #64	; 0x40
 8002ef2:	d058      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x13e>
 8002ef4:	2b40      	cmp	r3, #64	; 0x40
 8002ef6:	d86f      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x170>
 8002ef8:	2b30      	cmp	r3, #48	; 0x30
 8002efa:	d064      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x15e>
 8002efc:	2b30      	cmp	r3, #48	; 0x30
 8002efe:	d86b      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x170>
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d060      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x15e>
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d867      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x170>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d05c      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x15e>
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d05a      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x15e>
 8002f10:	e062      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6899      	ldr	r1, [r3, #8]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f000 fbf9 	bl	8003718 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	609a      	str	r2, [r3, #8]
      break;
 8002f3e:	e04f      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6899      	ldr	r1, [r3, #8]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f000 fbe2 	bl	8003718 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f62:	609a      	str	r2, [r3, #8]
      break;
 8002f64:	e03c      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f000 fb56 	bl	8003624 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2150      	movs	r1, #80	; 0x50
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fbaf 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8002f84:	e02c      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6859      	ldr	r1, [r3, #4]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	461a      	mov	r2, r3
 8002f94:	f000 fb75 	bl	8003682 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2160      	movs	r1, #96	; 0x60
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fb9f 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8002fa4:	e01c      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6859      	ldr	r1, [r3, #4]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f000 fb36 	bl	8003624 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2140      	movs	r1, #64	; 0x40
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fb8f 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8002fc4:	e00c      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	f000 fb86 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8002fd6:	e003      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
      break;
 8002fdc:	e000      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002fde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a2e      	ldr	r2, [pc, #184]	; (80030c8 <TIM_Base_SetConfig+0xcc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d003      	beq.n	800301c <TIM_Base_SetConfig+0x20>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301a:	d108      	bne.n	800302e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a25      	ldr	r2, [pc, #148]	; (80030c8 <TIM_Base_SetConfig+0xcc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00f      	beq.n	8003056 <TIM_Base_SetConfig+0x5a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303c:	d00b      	beq.n	8003056 <TIM_Base_SetConfig+0x5a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a22      	ldr	r2, [pc, #136]	; (80030cc <TIM_Base_SetConfig+0xd0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d007      	beq.n	8003056 <TIM_Base_SetConfig+0x5a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a21      	ldr	r2, [pc, #132]	; (80030d0 <TIM_Base_SetConfig+0xd4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d003      	beq.n	8003056 <TIM_Base_SetConfig+0x5a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a20      	ldr	r2, [pc, #128]	; (80030d4 <TIM_Base_SetConfig+0xd8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d108      	bne.n	8003068 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a0e      	ldr	r2, [pc, #56]	; (80030c8 <TIM_Base_SetConfig+0xcc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00b      	beq.n	80030ac <TIM_Base_SetConfig+0xb0>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a0d      	ldr	r2, [pc, #52]	; (80030cc <TIM_Base_SetConfig+0xd0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d007      	beq.n	80030ac <TIM_Base_SetConfig+0xb0>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a0c      	ldr	r2, [pc, #48]	; (80030d0 <TIM_Base_SetConfig+0xd4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d003      	beq.n	80030ac <TIM_Base_SetConfig+0xb0>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <TIM_Base_SetConfig+0xd8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d103      	bne.n	80030b4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	615a      	str	r2, [r3, #20]
}
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40014000 	.word	0x40014000
 80030d0:	40014400 	.word	0x40014400
 80030d4:	40014800 	.word	0x40014800

080030d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	f023 0201 	bic.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0303 	bic.w	r3, r3, #3
 8003112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f023 0302 	bic.w	r3, r3, #2
 8003124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a28      	ldr	r2, [pc, #160]	; (80031d4 <TIM_OC1_SetConfig+0xfc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00b      	beq.n	8003150 <TIM_OC1_SetConfig+0x78>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a27      	ldr	r2, [pc, #156]	; (80031d8 <TIM_OC1_SetConfig+0x100>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d007      	beq.n	8003150 <TIM_OC1_SetConfig+0x78>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a26      	ldr	r2, [pc, #152]	; (80031dc <TIM_OC1_SetConfig+0x104>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d003      	beq.n	8003150 <TIM_OC1_SetConfig+0x78>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a25      	ldr	r2, [pc, #148]	; (80031e0 <TIM_OC1_SetConfig+0x108>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d10c      	bne.n	800316a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f023 0308 	bic.w	r3, r3, #8
 8003156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f023 0304 	bic.w	r3, r3, #4
 8003168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a19      	ldr	r2, [pc, #100]	; (80031d4 <TIM_OC1_SetConfig+0xfc>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00b      	beq.n	800318a <TIM_OC1_SetConfig+0xb2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <TIM_OC1_SetConfig+0x100>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d007      	beq.n	800318a <TIM_OC1_SetConfig+0xb2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a17      	ldr	r2, [pc, #92]	; (80031dc <TIM_OC1_SetConfig+0x104>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d003      	beq.n	800318a <TIM_OC1_SetConfig+0xb2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a16      	ldr	r2, [pc, #88]	; (80031e0 <TIM_OC1_SetConfig+0x108>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d111      	bne.n	80031ae <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	621a      	str	r2, [r3, #32]
}
 80031c8:	bf00      	nop
 80031ca:	371c      	adds	r7, #28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	40012c00 	.word	0x40012c00
 80031d8:	40014000 	.word	0x40014000
 80031dc:	40014400 	.word	0x40014400
 80031e0:	40014800 	.word	0x40014800

080031e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	f023 0210 	bic.w	r2, r3, #16
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	021b      	lsls	r3, r3, #8
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f023 0320 	bic.w	r3, r3, #32
 8003232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a24      	ldr	r2, [pc, #144]	; (80032d4 <TIM_OC2_SetConfig+0xf0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d10d      	bne.n	8003264 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800324e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003262:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a1b      	ldr	r2, [pc, #108]	; (80032d4 <TIM_OC2_SetConfig+0xf0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00b      	beq.n	8003284 <TIM_OC2_SetConfig+0xa0>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a1a      	ldr	r2, [pc, #104]	; (80032d8 <TIM_OC2_SetConfig+0xf4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d007      	beq.n	8003284 <TIM_OC2_SetConfig+0xa0>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a19      	ldr	r2, [pc, #100]	; (80032dc <TIM_OC2_SetConfig+0xf8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d003      	beq.n	8003284 <TIM_OC2_SetConfig+0xa0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a18      	ldr	r2, [pc, #96]	; (80032e0 <TIM_OC2_SetConfig+0xfc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d113      	bne.n	80032ac <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800328a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003292:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	621a      	str	r2, [r3, #32]
}
 80032c6:	bf00      	nop
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40012c00 	.word	0x40012c00
 80032d8:	40014000 	.word	0x40014000
 80032dc:	40014400 	.word	0x40014400
 80032e0:	40014800 	.word	0x40014800

080032e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0303 	bic.w	r3, r3, #3
 800331e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a23      	ldr	r2, [pc, #140]	; (80033d0 <TIM_OC3_SetConfig+0xec>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10d      	bne.n	8003362 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800334c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003360:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a1a      	ldr	r2, [pc, #104]	; (80033d0 <TIM_OC3_SetConfig+0xec>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00b      	beq.n	8003382 <TIM_OC3_SetConfig+0x9e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a19      	ldr	r2, [pc, #100]	; (80033d4 <TIM_OC3_SetConfig+0xf0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d007      	beq.n	8003382 <TIM_OC3_SetConfig+0x9e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a18      	ldr	r2, [pc, #96]	; (80033d8 <TIM_OC3_SetConfig+0xf4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d003      	beq.n	8003382 <TIM_OC3_SetConfig+0x9e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a17      	ldr	r2, [pc, #92]	; (80033dc <TIM_OC3_SetConfig+0xf8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d113      	bne.n	80033aa <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	621a      	str	r2, [r3, #32]
}
 80033c4:	bf00      	nop
 80033c6:	371c      	adds	r7, #28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40012c00 	.word	0x40012c00
 80033d4:	40014000 	.word	0x40014000
 80033d8:	40014400 	.word	0x40014400
 80033dc:	40014800 	.word	0x40014800

080033e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800340e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800341a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800342e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	031b      	lsls	r3, r3, #12
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a16      	ldr	r2, [pc, #88]	; (8003498 <TIM_OC4_SetConfig+0xb8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00b      	beq.n	800345c <TIM_OC4_SetConfig+0x7c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a15      	ldr	r2, [pc, #84]	; (800349c <TIM_OC4_SetConfig+0xbc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d007      	beq.n	800345c <TIM_OC4_SetConfig+0x7c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <TIM_OC4_SetConfig+0xc0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d003      	beq.n	800345c <TIM_OC4_SetConfig+0x7c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a13      	ldr	r2, [pc, #76]	; (80034a4 <TIM_OC4_SetConfig+0xc4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d109      	bne.n	8003470 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003462:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	019b      	lsls	r3, r3, #6
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	621a      	str	r2, [r3, #32]
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40012c00 	.word	0x40012c00
 800349c:	40014000 	.word	0x40014000
 80034a0:	40014400 	.word	0x40014400
 80034a4:	40014800 	.word	0x40014800

080034a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80034ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	041b      	lsls	r3, r3, #16
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a15      	ldr	r2, [pc, #84]	; (8003554 <TIM_OC5_SetConfig+0xac>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00b      	beq.n	800351a <TIM_OC5_SetConfig+0x72>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a14      	ldr	r2, [pc, #80]	; (8003558 <TIM_OC5_SetConfig+0xb0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d007      	beq.n	800351a <TIM_OC5_SetConfig+0x72>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a13      	ldr	r2, [pc, #76]	; (800355c <TIM_OC5_SetConfig+0xb4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d003      	beq.n	800351a <TIM_OC5_SetConfig+0x72>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a12      	ldr	r2, [pc, #72]	; (8003560 <TIM_OC5_SetConfig+0xb8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d109      	bne.n	800352e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003520:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	621a      	str	r2, [r3, #32]
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40014000 	.word	0x40014000
 800355c:	40014400 	.word	0x40014400
 8003560:	40014800 	.word	0x40014800

08003564 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	051b      	lsls	r3, r3, #20
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a16      	ldr	r2, [pc, #88]	; (8003614 <TIM_OC6_SetConfig+0xb0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00b      	beq.n	80035d8 <TIM_OC6_SetConfig+0x74>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a15      	ldr	r2, [pc, #84]	; (8003618 <TIM_OC6_SetConfig+0xb4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d007      	beq.n	80035d8 <TIM_OC6_SetConfig+0x74>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a14      	ldr	r2, [pc, #80]	; (800361c <TIM_OC6_SetConfig+0xb8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d003      	beq.n	80035d8 <TIM_OC6_SetConfig+0x74>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a13      	ldr	r2, [pc, #76]	; (8003620 <TIM_OC6_SetConfig+0xbc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d109      	bne.n	80035ec <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	029b      	lsls	r3, r3, #10
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40014000 	.word	0x40014000
 800361c:	40014400 	.word	0x40014400
 8003620:	40014800 	.word	0x40014800

08003624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f023 0201 	bic.w	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800364e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f023 030a 	bic.w	r3, r3, #10
 8003660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003682:	b480      	push	{r7}
 8003684:	b087      	sub	sp, #28
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f023 0210 	bic.w	r2, r3, #16
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	031b      	lsls	r3, r3, #12
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	621a      	str	r2, [r3, #32]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b085      	sub	sp, #20
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	f043 0307 	orr.w	r3, r3, #7
 8003704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	609a      	str	r2, [r3, #8]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	021a      	lsls	r2, r3, #8
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	431a      	orrs	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4313      	orrs	r3, r2
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	2201      	movs	r2, #1
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a1a      	ldr	r2, [r3, #32]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	43db      	mvns	r3, r3
 800377a:	401a      	ands	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a1a      	ldr	r2, [r3, #32]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	fa01 f303 	lsl.w	r3, r1, r3
 8003790:	431a      	orrs	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	621a      	str	r2, [r3, #32]
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e04f      	b.n	800385c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a21      	ldr	r2, [pc, #132]	; (8003868 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d108      	bne.n	80037f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a14      	ldr	r2, [pc, #80]	; (8003868 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d009      	beq.n	8003830 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003824:	d004      	beq.n	8003830 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a10      	ldr	r2, [pc, #64]	; (800386c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d10c      	bne.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003836:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	4313      	orrs	r3, r2
 8003840:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	40012c00 	.word	0x40012c00
 800386c:	40014000 	.word	0x40014000

08003870 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e040      	b.n	8003904 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fc ffb0 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2224      	movs	r2, #36	; 0x24
 800389c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f82c 	bl	800390c <UART_SetConfig>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e022      	b.n	8003904 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f956 	bl	8003b78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f9dd 	bl	8003cbc <UART_CheckIdleState>
 8003902:	4603      	mov	r3, r0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	4313      	orrs	r3, r2
 800392e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4b8a      	ldr	r3, [pc, #552]	; (8003b60 <UART_SetConfig+0x254>)
 8003938:	4013      	ands	r3, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	6979      	ldr	r1, [r7, #20]
 8003940:	430b      	orrs	r3, r1
 8003942:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	430a      	orrs	r2, r1
 800397c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a78      	ldr	r2, [pc, #480]	; (8003b64 <UART_SetConfig+0x258>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d120      	bne.n	80039ca <UART_SetConfig+0xbe>
 8003988:	4b77      	ldr	r3, [pc, #476]	; (8003b68 <UART_SetConfig+0x25c>)
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b03      	cmp	r3, #3
 8003992:	d817      	bhi.n	80039c4 <UART_SetConfig+0xb8>
 8003994:	a201      	add	r2, pc, #4	; (adr r2, 800399c <UART_SetConfig+0x90>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	080039ad 	.word	0x080039ad
 80039a0:	080039b9 	.word	0x080039b9
 80039a4:	080039bf 	.word	0x080039bf
 80039a8:	080039b3 	.word	0x080039b3
 80039ac:	2300      	movs	r3, #0
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	e01d      	b.n	80039ee <UART_SetConfig+0xe2>
 80039b2:	2302      	movs	r3, #2
 80039b4:	77fb      	strb	r3, [r7, #31]
 80039b6:	e01a      	b.n	80039ee <UART_SetConfig+0xe2>
 80039b8:	2304      	movs	r3, #4
 80039ba:	77fb      	strb	r3, [r7, #31]
 80039bc:	e017      	b.n	80039ee <UART_SetConfig+0xe2>
 80039be:	2308      	movs	r3, #8
 80039c0:	77fb      	strb	r3, [r7, #31]
 80039c2:	e014      	b.n	80039ee <UART_SetConfig+0xe2>
 80039c4:	2310      	movs	r3, #16
 80039c6:	77fb      	strb	r3, [r7, #31]
 80039c8:	e011      	b.n	80039ee <UART_SetConfig+0xe2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a67      	ldr	r2, [pc, #412]	; (8003b6c <UART_SetConfig+0x260>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d102      	bne.n	80039da <UART_SetConfig+0xce>
 80039d4:	2300      	movs	r3, #0
 80039d6:	77fb      	strb	r3, [r7, #31]
 80039d8:	e009      	b.n	80039ee <UART_SetConfig+0xe2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a64      	ldr	r2, [pc, #400]	; (8003b70 <UART_SetConfig+0x264>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d102      	bne.n	80039ea <UART_SetConfig+0xde>
 80039e4:	2300      	movs	r3, #0
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	e001      	b.n	80039ee <UART_SetConfig+0xe2>
 80039ea:	2310      	movs	r3, #16
 80039ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f6:	d15a      	bne.n	8003aae <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80039f8:	7ffb      	ldrb	r3, [r7, #31]
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d827      	bhi.n	8003a4e <UART_SetConfig+0x142>
 80039fe:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <UART_SetConfig+0xf8>)
 8003a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a04:	08003a29 	.word	0x08003a29
 8003a08:	08003a31 	.word	0x08003a31
 8003a0c:	08003a39 	.word	0x08003a39
 8003a10:	08003a4f 	.word	0x08003a4f
 8003a14:	08003a3f 	.word	0x08003a3f
 8003a18:	08003a4f 	.word	0x08003a4f
 8003a1c:	08003a4f 	.word	0x08003a4f
 8003a20:	08003a4f 	.word	0x08003a4f
 8003a24:	08003a47 	.word	0x08003a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a28:	f7fe fcea 	bl	8002400 <HAL_RCC_GetPCLK1Freq>
 8003a2c:	61b8      	str	r0, [r7, #24]
        break;
 8003a2e:	e013      	b.n	8003a58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a30:	f7fe fd08 	bl	8002444 <HAL_RCC_GetPCLK2Freq>
 8003a34:	61b8      	str	r0, [r7, #24]
        break;
 8003a36:	e00f      	b.n	8003a58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a38:	4b4e      	ldr	r3, [pc, #312]	; (8003b74 <UART_SetConfig+0x268>)
 8003a3a:	61bb      	str	r3, [r7, #24]
        break;
 8003a3c:	e00c      	b.n	8003a58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3e:	f7fe fc69 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 8003a42:	61b8      	str	r0, [r7, #24]
        break;
 8003a44:	e008      	b.n	8003a58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a4a:	61bb      	str	r3, [r7, #24]
        break;
 8003a4c:	e004      	b.n	8003a58 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	77bb      	strb	r3, [r7, #30]
        break;
 8003a56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d074      	beq.n	8003b48 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	005a      	lsls	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	441a      	add	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	2b0f      	cmp	r3, #15
 8003a78:	d916      	bls.n	8003aa8 <UART_SetConfig+0x19c>
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a80:	d212      	bcs.n	8003aa8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f023 030f 	bic.w	r3, r3, #15
 8003a8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	085b      	lsrs	r3, r3, #1
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	89fb      	ldrh	r3, [r7, #14]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	89fa      	ldrh	r2, [r7, #14]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	e04f      	b.n	8003b48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	77bb      	strb	r3, [r7, #30]
 8003aac:	e04c      	b.n	8003b48 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aae:	7ffb      	ldrb	r3, [r7, #31]
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d828      	bhi.n	8003b06 <UART_SetConfig+0x1fa>
 8003ab4:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <UART_SetConfig+0x1b0>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003ae1 	.word	0x08003ae1
 8003ac0:	08003ae9 	.word	0x08003ae9
 8003ac4:	08003af1 	.word	0x08003af1
 8003ac8:	08003b07 	.word	0x08003b07
 8003acc:	08003af7 	.word	0x08003af7
 8003ad0:	08003b07 	.word	0x08003b07
 8003ad4:	08003b07 	.word	0x08003b07
 8003ad8:	08003b07 	.word	0x08003b07
 8003adc:	08003aff 	.word	0x08003aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae0:	f7fe fc8e 	bl	8002400 <HAL_RCC_GetPCLK1Freq>
 8003ae4:	61b8      	str	r0, [r7, #24]
        break;
 8003ae6:	e013      	b.n	8003b10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ae8:	f7fe fcac 	bl	8002444 <HAL_RCC_GetPCLK2Freq>
 8003aec:	61b8      	str	r0, [r7, #24]
        break;
 8003aee:	e00f      	b.n	8003b10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003af0:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <UART_SetConfig+0x268>)
 8003af2:	61bb      	str	r3, [r7, #24]
        break;
 8003af4:	e00c      	b.n	8003b10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af6:	f7fe fc0d 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 8003afa:	61b8      	str	r0, [r7, #24]
        break;
 8003afc:	e008      	b.n	8003b10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b02:	61bb      	str	r3, [r7, #24]
        break;
 8003b04:	e004      	b.n	8003b10 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b0e:	bf00      	nop
    }

    if (pclk != 0U)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d018      	beq.n	8003b48 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	085a      	lsrs	r2, r3, #1
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	441a      	add	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b0f      	cmp	r3, #15
 8003b2e:	d909      	bls.n	8003b44 <UART_SetConfig+0x238>
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b36:	d205      	bcs.n	8003b44 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	e001      	b.n	8003b48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b54:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3720      	adds	r7, #32
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	efff69f3 	.word	0xefff69f3
 8003b64:	40013800 	.word	0x40013800
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	40004400 	.word	0x40004400
 8003b70:	40004800 	.word	0x40004800
 8003b74:	007a1200 	.word	0x007a1200

08003b78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01a      	beq.n	8003c8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c76:	d10a      	bne.n	8003c8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	605a      	str	r2, [r3, #4]
  }
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b098      	sub	sp, #96	; 0x60
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ccc:	f7fc fec8 	bl	8000a60 <HAL_GetTick>
 8003cd0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d12e      	bne.n	8003d3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f88c 	bl	8003e0c <UART_WaitOnFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d021      	beq.n	8003d3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d0e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d18:	647b      	str	r3, [r7, #68]	; 0x44
 8003d1a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e6      	bne.n	8003cfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e062      	b.n	8003e04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d149      	bne.n	8003de0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d54:	2200      	movs	r2, #0
 8003d56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f856 	bl	8003e0c <UART_WaitOnFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d03c      	beq.n	8003de0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	623b      	str	r3, [r7, #32]
   return(result);
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d84:	633b      	str	r3, [r7, #48]	; 0x30
 8003d86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e6      	bne.n	8003d66 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	e853 3f00 	ldrex	r3, [r3]
 8003da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3308      	adds	r3, #8
 8003db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003db8:	61fa      	str	r2, [r7, #28]
 8003dba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	69b9      	ldr	r1, [r7, #24]
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e5      	bne.n	8003d98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e011      	b.n	8003e04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3758      	adds	r7, #88	; 0x58
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1c:	e049      	b.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d045      	beq.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e26:	f7fc fe1b 	bl	8000a60 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e048      	b.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d031      	beq.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d110      	bne.n	8003e7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2208      	movs	r2, #8
 8003e62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f838 	bl	8003eda <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2208      	movs	r2, #8
 8003e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e029      	b.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e8c:	d111      	bne.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f81e 	bl	8003eda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e00f      	b.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	bf0c      	ite	eq
 8003ec2:	2301      	moveq	r3, #1
 8003ec4:	2300      	movne	r3, #0
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d0a6      	beq.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b095      	sub	sp, #84	; 0x54
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eea:	e853 3f00 	ldrex	r3, [r3]
 8003eee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f00:	643b      	str	r3, [r7, #64]	; 0x40
 8003f02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f08:	e841 2300 	strex	r3, r2, [r1]
 8003f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1e6      	bne.n	8003ee2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3308      	adds	r3, #8
 8003f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	e853 3f00 	ldrex	r3, [r3]
 8003f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f023 0301 	bic.w	r3, r3, #1
 8003f2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3308      	adds	r3, #8
 8003f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f3c:	e841 2300 	strex	r3, r2, [r1]
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e5      	bne.n	8003f14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d118      	bne.n	8003f82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f023 0310 	bic.w	r3, r3, #16
 8003f64:	647b      	str	r3, [r7, #68]	; 0x44
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f6e:	61bb      	str	r3, [r7, #24]
 8003f70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	6979      	ldr	r1, [r7, #20]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e6      	bne.n	8003f50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f96:	bf00      	nop
 8003f98:	3754      	adds	r7, #84	; 0x54
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003fa8:	4904      	ldr	r1, [pc, #16]	; (8003fbc <MX_FATFS_Init+0x18>)
 8003faa:	4805      	ldr	r0, [pc, #20]	; (8003fc0 <MX_FATFS_Init+0x1c>)
 8003fac:	f000 f8b0 	bl	8004110 <FATFS_LinkDriver>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <MX_FATFS_Init+0x20>)
 8003fb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20000204 	.word	0x20000204
 8003fc0:	2000000c 	.word	0x2000000c
 8003fc4:	20000200 	.word	0x20000200

08003fc8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8003fd2:	4b06      	ldr	r3, [pc, #24]	; (8003fec <USER_initialize+0x24>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003fd8:	4b04      	ldr	r3, [pc, #16]	; (8003fec <USER_initialize+0x24>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	b2db      	uxtb	r3, r3

  /* USER CODE END INIT */
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000009 	.word	0x20000009

08003ff0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <USER_status+0x24>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004000:	4b04      	ldr	r3, [pc, #16]	; (8004014 <USER_status+0x24>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	b2db      	uxtb	r3, r3

  /* USER CODE END STATUS */
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20000009 	.word	0x20000009

08004018 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	4603      	mov	r3, r0
 8004026:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004028:	2300      	movs	r3, #0

  /* USER CODE END READ */
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
 8004042:	4603      	mov	r3, r0
 8004044:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004046:	2300      	movs	r3, #0

  /* USER CODE END WRITE */
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	603a      	str	r2, [r7, #0]
 800405e:	71fb      	strb	r3, [r7, #7]
 8004060:	460b      	mov	r3, r1
 8004062:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
    return res;
 8004068:	7bfb      	ldrb	r3, [r7, #15]

  /* USER CODE END IOCTL */
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
	...

08004078 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004086:	2301      	movs	r3, #1
 8004088:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800408e:	4b1f      	ldr	r3, [pc, #124]	; (800410c <FATFS_LinkDriverEx+0x94>)
 8004090:	7a5b      	ldrb	r3, [r3, #9]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b01      	cmp	r3, #1
 8004096:	d831      	bhi.n	80040fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004098:	4b1c      	ldr	r3, [pc, #112]	; (800410c <FATFS_LinkDriverEx+0x94>)
 800409a:	7a5b      	ldrb	r3, [r3, #9]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	4b1a      	ldr	r3, [pc, #104]	; (800410c <FATFS_LinkDriverEx+0x94>)
 80040a2:	2100      	movs	r1, #0
 80040a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80040a6:	4b19      	ldr	r3, [pc, #100]	; (800410c <FATFS_LinkDriverEx+0x94>)
 80040a8:	7a5b      	ldrb	r3, [r3, #9]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	4a17      	ldr	r2, [pc, #92]	; (800410c <FATFS_LinkDriverEx+0x94>)
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80040b6:	4b15      	ldr	r3, [pc, #84]	; (800410c <FATFS_LinkDriverEx+0x94>)
 80040b8:	7a5b      	ldrb	r3, [r3, #9]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	4b13      	ldr	r3, [pc, #76]	; (800410c <FATFS_LinkDriverEx+0x94>)
 80040c0:	4413      	add	r3, r2
 80040c2:	79fa      	ldrb	r2, [r7, #7]
 80040c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80040c6:	4b11      	ldr	r3, [pc, #68]	; (800410c <FATFS_LinkDriverEx+0x94>)
 80040c8:	7a5b      	ldrb	r3, [r3, #9]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	b2d1      	uxtb	r1, r2
 80040d0:	4a0e      	ldr	r2, [pc, #56]	; (800410c <FATFS_LinkDriverEx+0x94>)
 80040d2:	7251      	strb	r1, [r2, #9]
 80040d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80040d6:	7dbb      	ldrb	r3, [r7, #22]
 80040d8:	3330      	adds	r3, #48	; 0x30
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	3301      	adds	r3, #1
 80040e4:	223a      	movs	r2, #58	; 0x3a
 80040e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	3302      	adds	r3, #2
 80040ec:	222f      	movs	r2, #47	; 0x2f
 80040ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	3303      	adds	r3, #3
 80040f4:	2200      	movs	r2, #0
 80040f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	20000208 	.word	0x20000208

08004110 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800411a:	2200      	movs	r2, #0
 800411c:	6839      	ldr	r1, [r7, #0]
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff ffaa 	bl	8004078 <FATFS_LinkDriverEx>
 8004124:	4603      	mov	r3, r0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <__libc_init_array>:
 8004130:	b570      	push	{r4, r5, r6, lr}
 8004132:	4d0d      	ldr	r5, [pc, #52]	; (8004168 <__libc_init_array+0x38>)
 8004134:	4c0d      	ldr	r4, [pc, #52]	; (800416c <__libc_init_array+0x3c>)
 8004136:	1b64      	subs	r4, r4, r5
 8004138:	10a4      	asrs	r4, r4, #2
 800413a:	2600      	movs	r6, #0
 800413c:	42a6      	cmp	r6, r4
 800413e:	d109      	bne.n	8004154 <__libc_init_array+0x24>
 8004140:	4d0b      	ldr	r5, [pc, #44]	; (8004170 <__libc_init_array+0x40>)
 8004142:	4c0c      	ldr	r4, [pc, #48]	; (8004174 <__libc_init_array+0x44>)
 8004144:	f000 f820 	bl	8004188 <_init>
 8004148:	1b64      	subs	r4, r4, r5
 800414a:	10a4      	asrs	r4, r4, #2
 800414c:	2600      	movs	r6, #0
 800414e:	42a6      	cmp	r6, r4
 8004150:	d105      	bne.n	800415e <__libc_init_array+0x2e>
 8004152:	bd70      	pop	{r4, r5, r6, pc}
 8004154:	f855 3b04 	ldr.w	r3, [r5], #4
 8004158:	4798      	blx	r3
 800415a:	3601      	adds	r6, #1
 800415c:	e7ee      	b.n	800413c <__libc_init_array+0xc>
 800415e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004162:	4798      	blx	r3
 8004164:	3601      	adds	r6, #1
 8004166:	e7f2      	b.n	800414e <__libc_init_array+0x1e>
 8004168:	080041d8 	.word	0x080041d8
 800416c:	080041d8 	.word	0x080041d8
 8004170:	080041d8 	.word	0x080041d8
 8004174:	080041dc 	.word	0x080041dc

08004178 <memset>:
 8004178:	4402      	add	r2, r0
 800417a:	4603      	mov	r3, r0
 800417c:	4293      	cmp	r3, r2
 800417e:	d100      	bne.n	8004182 <memset+0xa>
 8004180:	4770      	bx	lr
 8004182:	f803 1b01 	strb.w	r1, [r3], #1
 8004186:	e7f9      	b.n	800417c <memset+0x4>

08004188 <_init>:
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	bf00      	nop
 800418c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418e:	bc08      	pop	{r3}
 8004190:	469e      	mov	lr, r3
 8004192:	4770      	bx	lr

08004194 <_fini>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	bf00      	nop
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr
