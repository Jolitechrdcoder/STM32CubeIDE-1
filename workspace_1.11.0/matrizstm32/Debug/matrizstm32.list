
matrizstm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002d48  08002d48  00012d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d98  08002d98  00020404  2**0
                  CONTENTS
  4 .ARM          00000000  08002d98  08002d98  00020404  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d98  08002d98  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d98  08002d98  00012d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d9c  08002d9c  00012d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  08002da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000404  080031a4  00020404  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  080031a4  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cf5  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013f8  00000000  00000000  00029129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  0002a528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000608  00000000  00000000  0002aba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ede  00000000  00000000  0002b1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008bd1  00000000  00000000  0004508e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000982e3  00000000  00000000  0004dc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5f42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001930  00000000  00000000  000e5f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000404 	.word	0x20000404
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d30 	.word	0x08002d30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000408 	.word	0x20000408
 80001c4:	08002d30 	.word	0x08002d30

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fc7c 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f834 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8a8 	bl	8000328 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f876 	bl	80002c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  max_init(0x03);
 80001dc:	2003      	movs	r0, #3
 80001de:	f000 fb87 	bl	80008f0 <max_init>

  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	write_char(4, 1);
 80001e2:	2101      	movs	r1, #1
 80001e4:	2004      	movs	r0, #4
 80001e6:	f000 fa3f 	bl	8000668 <write_char>
		HAL_Delay(1000);
 80001ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ee:	f000 fcd1 	bl	8000b94 <HAL_Delay>

	scroll_string("Julio de la Rosa Perez",50, left);
 80001f2:	224c      	movs	r2, #76	; 0x4c
 80001f4:	2132      	movs	r1, #50	; 0x32
 80001f6:	4810      	ldr	r0, [pc, #64]	; (8000238 <main+0x70>)
 80001f8:	f000 fac2 	bl	8000780 <scroll_string>
		max_clear();
 80001fc:	f000 fadc 	bl	80007b8 <max_clear>

	write_char(30, 1);
 8000200:	2101      	movs	r1, #1
 8000202:	201e      	movs	r0, #30
 8000204:	f000 fa30 	bl	8000668 <write_char>
		HAL_Delay(1000);
 8000208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020c:	f000 fcc2 	bl	8000b94 <HAL_Delay>

	write_char(31, 1);
 8000210:	2101      	movs	r1, #1
 8000212:	201f      	movs	r0, #31
 8000214:	f000 fa28 	bl	8000668 <write_char>
		HAL_Delay(1000);
 8000218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800021c:	f000 fcba 	bl	8000b94 <HAL_Delay>

	write_char(2, 1);
 8000220:	2101      	movs	r1, #1
 8000222:	2002      	movs	r0, #2
 8000224:	f000 fa20 	bl	8000668 <write_char>
		HAL_Delay(1000);
 8000228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022c:	f000 fcb2 	bl	8000b94 <HAL_Delay>
		max_clear();
 8000230:	f000 fac2 	bl	80007b8 <max_clear>
	write_char(4, 1);
 8000234:	e7d5      	b.n	80001e2 <main+0x1a>
 8000236:	bf00      	nop
 8000238:	08002d48 	.word	0x08002d48

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b090      	sub	sp, #64	; 0x40
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	2228      	movs	r2, #40	; 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f002 fd68 	bl	8002d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800025e:	2301      	movs	r3, #1
 8000260:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000266:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	2301      	movs	r3, #1
 800026e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000270:	2302      	movs	r3, #2
 8000272:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800027e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000280:	f107 0318 	add.w	r3, r7, #24
 8000284:	4618      	mov	r0, r3
 8000286:	f000 ff19 	bl	80010bc <HAL_RCC_OscConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000290:	f000 f8c8 	bl	8000424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	230f      	movs	r3, #15
 8000296:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000298:	2302      	movs	r3, #2
 800029a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2102      	movs	r1, #2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 ff42 	bl	8002138 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ba:	f000 f8b3 	bl	8000424 <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3740      	adds	r7, #64	; 0x40
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002cc:	4b14      	ldr	r3, [pc, #80]	; (8000320 <MX_USART2_UART_Init+0x58>)
 80002ce:	4a15      	ldr	r2, [pc, #84]	; (8000324 <MX_USART2_UART_Init+0x5c>)
 80002d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002d2:	4b13      	ldr	r3, [pc, #76]	; (8000320 <MX_USART2_UART_Init+0x58>)
 80002d4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80002d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_USART2_UART_Init+0x58>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_USART2_UART_Init+0x58>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <MX_USART2_UART_Init+0x58>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <MX_USART2_UART_Init+0x58>)
 80002ee:	220c      	movs	r2, #12
 80002f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <MX_USART2_UART_Init+0x58>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_USART2_UART_Init+0x58>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <MX_USART2_UART_Init+0x58>)
 8000300:	2200      	movs	r2, #0
 8000302:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <MX_USART2_UART_Init+0x58>)
 8000306:	2200      	movs	r2, #0
 8000308:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <MX_USART2_UART_Init+0x58>)
 800030c:	f002 f94a 	bl	80025a4 <HAL_UART_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000316:	f000 f885 	bl	8000424 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000420 	.word	0x20000420
 8000324:	40004400 	.word	0x40004400

08000328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b08a      	sub	sp, #40	; 0x28
 800032c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033e:	4b36      	ldr	r3, [pc, #216]	; (8000418 <MX_GPIO_Init+0xf0>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	4a35      	ldr	r2, [pc, #212]	; (8000418 <MX_GPIO_Init+0xf0>)
 8000344:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000348:	6153      	str	r3, [r2, #20]
 800034a:	4b33      	ldr	r3, [pc, #204]	; (8000418 <MX_GPIO_Init+0xf0>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000352:	613b      	str	r3, [r7, #16]
 8000354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000356:	4b30      	ldr	r3, [pc, #192]	; (8000418 <MX_GPIO_Init+0xf0>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a2f      	ldr	r2, [pc, #188]	; (8000418 <MX_GPIO_Init+0xf0>)
 800035c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000360:	6153      	str	r3, [r2, #20]
 8000362:	4b2d      	ldr	r3, [pc, #180]	; (8000418 <MX_GPIO_Init+0xf0>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	4b2a      	ldr	r3, [pc, #168]	; (8000418 <MX_GPIO_Init+0xf0>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a29      	ldr	r2, [pc, #164]	; (8000418 <MX_GPIO_Init+0xf0>)
 8000374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000378:	6153      	str	r3, [r2, #20]
 800037a:	4b27      	ldr	r3, [pc, #156]	; (8000418 <MX_GPIO_Init+0xf0>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000386:	4b24      	ldr	r3, [pc, #144]	; (8000418 <MX_GPIO_Init+0xf0>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a23      	ldr	r2, [pc, #140]	; (8000418 <MX_GPIO_Init+0xf0>)
 800038c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b21      	ldr	r3, [pc, #132]	; (8000418 <MX_GPIO_Init+0xf0>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a4:	481d      	ldr	r0, [pc, #116]	; (800041c <MX_GPIO_Init+0xf4>)
 80003a6:	f000 fe71 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	f44f 7160 	mov.w	r1, #896	; 0x380
 80003b0:	481b      	ldr	r0, [pc, #108]	; (8000420 <MX_GPIO_Init+0xf8>)
 80003b2:	f000 fe6b 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	4619      	mov	r1, r3
 80003cc:	4814      	ldr	r0, [pc, #80]	; (8000420 <MX_GPIO_Init+0xf8>)
 80003ce:	f000 fceb 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d8:	2301      	movs	r3, #1
 80003da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003dc:	2300      	movs	r3, #0
 80003de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e0:	2300      	movs	r3, #0
 80003e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003e4:	f107 0314 	add.w	r3, r7, #20
 80003e8:	4619      	mov	r1, r3
 80003ea:	480c      	ldr	r0, [pc, #48]	; (800041c <MX_GPIO_Init+0xf4>)
 80003ec:	f000 fcdc 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80003f0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80003f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f6:	2301      	movs	r3, #1
 80003f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fe:	2300      	movs	r3, #0
 8000400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000402:	f107 0314 	add.w	r3, r7, #20
 8000406:	4619      	mov	r1, r3
 8000408:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_GPIO_Init+0xf8>)
 800040a:	f000 fccd 	bl	8000da8 <HAL_GPIO_Init>

}
 800040e:	bf00      	nop
 8000410:	3728      	adds	r7, #40	; 0x28
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000
 800041c:	48000400 	.word	0x48000400
 8000420:	48000800 	.word	0x48000800

08000424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000428:	b672      	cpsid	i
}
 800042a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800042c:	e7fe      	b.n	800042c <Error_Handler+0x8>
	...

08000430 <write_byte>:
};



void write_byte (uint8_t byte)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	e019      	b.n	8000474 <write_byte+0x44>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8000440:	2200      	movs	r2, #0
 8000442:	2180      	movs	r1, #128	; 0x80
 8000444:	480f      	ldr	r0, [pc, #60]	; (8000484 <write_byte+0x54>)
 8000446:	f000 fe21 	bl	800108c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000450:	b2db      	uxtb	r3, r3
 8000452:	461a      	mov	r2, r3
 8000454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000458:	480a      	ldr	r0, [pc, #40]	; (8000484 <write_byte+0x54>)
 800045a:	f000 fe17 	bl	800108c <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 8000464:	2201      	movs	r2, #1
 8000466:	2180      	movs	r1, #128	; 0x80
 8000468:	4806      	ldr	r0, [pc, #24]	; (8000484 <write_byte+0x54>)
 800046a:	f000 fe0f 	bl	800108c <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	3301      	adds	r3, #1
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	2b07      	cmp	r3, #7
 8000478:	dde2      	ble.n	8000440 <write_byte+0x10>
	}
}
 800047a:	bf00      	nop
 800047c:	bf00      	nop
 800047e:	3710      	adds	r7, #16
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	48000800 	.word	0x48000800

08000488 <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	460a      	mov	r2, r1
 8000492:	71fb      	strb	r3, [r7, #7]
 8000494:	4613      	mov	r3, r2
 8000496:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049e:	4812      	ldr	r0, [pc, #72]	; (80004e8 <write_max_cmd+0x60>)
 80004a0:	f000 fdf4 	bl	800108c <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	e00a      	b.n	80004c0 <write_max_cmd+0x38>
	{
		write_byte (address);
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff ffbf 	bl	8000430 <write_byte>
		write_byte (cmd); 
 80004b2:	79bb      	ldrb	r3, [r7, #6]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff ffbb 	bl	8000430 <write_byte>
	for (int i=0;i<num; i++)
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	3301      	adds	r3, #1
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	ddf1      	ble.n	80004aa <write_max_cmd+0x22>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004cc:	4806      	ldr	r0, [pc, #24]	; (80004e8 <write_max_cmd+0x60>)
 80004ce:	f000 fddd 	bl	800108c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d8:	4803      	ldr	r0, [pc, #12]	; (80004e8 <write_max_cmd+0x60>)
 80004da:	f000 fdd7 	bl	800108c <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	48000800 	.word	0x48000800

080004ec <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
 80004f6:	460b      	mov	r3, r1
 80004f8:	71bb      	strb	r3, [r7, #6]
 80004fa:	4613      	mov	r3, r2
 80004fc:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 80004fe:	797b      	ldrb	r3, [r7, #5]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d00d      	beq.n	8000520 <setled+0x34>
 8000504:	79bb      	ldrb	r3, [r7, #6]
 8000506:	4a2e      	ldr	r2, [pc, #184]	; (80005c0 <setled+0xd4>)
 8000508:	5cd1      	ldrb	r1, [r2, r3]
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	2201      	movs	r2, #1
 800050e:	fa02 f303 	lsl.w	r3, r2, r3
 8000512:	b2da      	uxtb	r2, r3
 8000514:	79bb      	ldrb	r3, [r7, #6]
 8000516:	430a      	orrs	r2, r1
 8000518:	b2d1      	uxtb	r1, r2
 800051a:	4a29      	ldr	r2, [pc, #164]	; (80005c0 <setled+0xd4>)
 800051c:	54d1      	strb	r1, [r2, r3]
 800051e:	e00e      	b.n	800053e <setled+0x52>
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <setled+0xd4>)
 8000524:	5cd1      	ldrb	r1, [r2, r3]
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2201      	movs	r2, #1
 800052a:	fa02 f303 	lsl.w	r3, r2, r3
 800052e:	b2db      	uxtb	r3, r3
 8000530:	43db      	mvns	r3, r3
 8000532:	b2da      	uxtb	r2, r3
 8000534:	79bb      	ldrb	r3, [r7, #6]
 8000536:	400a      	ands	r2, r1
 8000538:	b2d1      	uxtb	r1, r2
 800053a:	4a21      	ldr	r2, [pc, #132]	; (80005c0 <setled+0xd4>)
 800053c:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 800053e:	79bb      	ldrb	r3, [r7, #6]
 8000540:	08db      	lsrs	r3, r3, #3
 8000542:	b2db      	uxtb	r3, r3
 8000544:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8000546:	79bb      	ldrb	r3, [r7, #6]
 8000548:	f003 0307 	and.w	r3, r3, #7
 800054c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000554:	481b      	ldr	r0, [pc, #108]	; (80005c4 <setled+0xd8>)
 8000556:	f000 fd99 	bl	800108c <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	e01b      	b.n	8000598 <setled+0xac>
	{
		if (i == (num-(n+1)))
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	425b      	negs	r3, r3
 8000564:	697a      	ldr	r2, [r7, #20]
 8000566:	429a      	cmp	r2, r3
 8000568:	d10d      	bne.n	8000586 <setled+0x9a>
		{
			write_byte (((c+1)));
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	3301      	adds	r3, #1
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ff5c 	bl	8000430 <write_byte>
			write_byte (buffer[col]);
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <setled+0xd4>)
 800057c:	5cd3      	ldrb	r3, [r2, r3]
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff ff56 	bl	8000430 <write_byte>
 8000584:	e005      	b.n	8000592 <setled+0xa6>
		}
		else
		{
			write_byte (0);
 8000586:	2000      	movs	r0, #0
 8000588:	f7ff ff52 	bl	8000430 <write_byte>
			write_byte (0);
 800058c:	2000      	movs	r0, #0
 800058e:	f7ff ff4f 	bl	8000430 <write_byte>
	for (int i=0; i<num; i++) 
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	3301      	adds	r3, #1
 8000596:	617b      	str	r3, [r7, #20]
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	2b00      	cmp	r3, #0
 800059c:	dde0      	ble.n	8000560 <setled+0x74>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a4:	4807      	ldr	r0, [pc, #28]	; (80005c4 <setled+0xd8>)
 80005a6:	f000 fd71 	bl	800108c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 80005aa:	2201      	movs	r2, #1
 80005ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <setled+0xd8>)
 80005b2:	f000 fd6b 	bl	800108c <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200004a8 	.word	0x200004a8
 80005c4:	48000800 	.word	0x48000800

080005c8 <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	460a      	mov	r2, r1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	4613      	mov	r3, r2
 80005d6:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	08db      	lsrs	r3, r3, #3
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	f003 0307 	and.w	r3, r3, #7
 80005e6:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 80005e8:	79bb      	ldrb	r3, [r7, #6]
 80005ea:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
 80005f0:	e02d      	b.n	800064e <setrow+0x86>
	{
		if (i == ((n)))
 80005f2:	69fa      	ldr	r2, [r7, #28]
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d120      	bne.n	800063c <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	3307      	adds	r3, #7
 8000600:	61bb      	str	r3, [r7, #24]
 8000602:	e015      	b.n	8000630 <setrow+0x68>
			{
				bool b = value&0x80;
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060a:	2b00      	cmp	r3, #0
 800060c:	bf14      	ite	ne
 800060e:	2301      	movne	r3, #1
 8000610:	2300      	moveq	r3, #0
 8000612:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	69ba      	ldr	r2, [r7, #24]
 800061a:	b2d1      	uxtb	r1, r2
 800061c:	7bba      	ldrb	r2, [r7, #14]
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ff64 	bl	80004ec <setled>
				value<<=1;
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	3b01      	subs	r3, #1
 800062e:	61bb      	str	r3, [r7, #24]
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	69ba      	ldr	r2, [r7, #24]
 8000636:	429a      	cmp	r2, r3
 8000638:	dae4      	bge.n	8000604 <setrow+0x3c>
 800063a:	e005      	b.n	8000648 <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 800063c:	2000      	movs	r0, #0
 800063e:	f7ff fef7 	bl	8000430 <write_byte>
			write_byte (0);
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff fef4 	bl	8000430 <write_byte>
	for (int i=0; i<num; i++) 
 8000648:	69fb      	ldr	r3, [r7, #28]
 800064a:	3301      	adds	r3, #1
 800064c:	61fb      	str	r3, [r7, #28]
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	2b00      	cmp	r3, #0
 8000652:	ddce      	ble.n	80005f2 <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	4903      	ldr	r1, [pc, #12]	; (8000664 <setrow+0x9c>)
 8000658:	7bfa      	ldrb	r2, [r7, #15]
 800065a:	54ca      	strb	r2, [r1, r3]
}
 800065c:	bf00      	nop
 800065e:	3720      	adds	r7, #32
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200004f8 	.word	0x200004f8

08000668 <write_char>:
		


void write_char (char c, uint8_t max)  
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	460a      	mov	r2, r1
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	4613      	mov	r3, r2
 8000676:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <write_char+0x70>)
 800067e:	5cd3      	ldrb	r3, [r2, r3]
 8000680:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	3301      	adds	r3, #1
 8000688:	60bb      	str	r3, [r7, #8]
	int row =6;
 800068a:	2306      	movs	r3, #6
 800068c:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	e016      	b.n	80006c2 <write_char+0x5a>
//	for (int j=start+7; j>=(start); j--)  // uncomment this if the character looks inverted about Y axis
	{
		setrow (row+(8*(max-1)), CH[j]);
 8000694:	79bb      	ldrb	r3, [r7, #6]
 8000696:	3b01      	subs	r3, #1
 8000698:	b2db      	uxtb	r3, r3
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	b2da      	uxtb	r2, r3
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	4413      	add	r3, r2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	490c      	ldr	r1, [pc, #48]	; (80006d8 <write_char+0x70>)
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	440b      	add	r3, r1
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4619      	mov	r1, r3
 80006b0:	4610      	mov	r0, r2
 80006b2:	f7ff ff89 	bl	80005c8 <setrow>
		row--;
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	3301      	adds	r3, #1
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	693a      	ldr	r2, [r7, #16]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	dbe2      	blt.n	8000694 <write_char+0x2c>
	}
}
 80006ce:	bf00      	nop
 80006d0:	bf00      	nop
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000000 	.word	0x20000000

080006dc <shift_char>:
					break;
			}			
}	
		
void shift_char (char c, uint32_t speed, char direction)  
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	4a22      	ldr	r2, [pc, #136]	; (800077c <shift_char+0xa0>)
 80006f2:	5cd3      	ldrb	r3, [r2, r3]
 80006f4:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	3301      	adds	r3, #1
 80006fc:	60bb      	str	r3, [r7, #8]

		switch (direction)
 80006fe:	79bb      	ldrb	r3, [r7, #6]
 8000700:	2b4c      	cmp	r3, #76	; 0x4c
 8000702:	d002      	beq.n	800070a <shift_char+0x2e>
 8000704:	2b52      	cmp	r3, #82	; 0x52
 8000706:	d01a      	beq.n	800073e <shift_char+0x62>
						HAL_Delay (speed);
					}
					break;
			
				default :
					break;
 8000708:	e034      	b.n	8000774 <shift_char+0x98>
					for (int j=start; j<(start+width+1); j++)
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	e00f      	b.n	8000730 <shift_char+0x54>
						setrow (0, CH[j]);
 8000710:	4a1a      	ldr	r2, [pc, #104]	; (800077c <shift_char+0xa0>)
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	2000      	movs	r0, #0
 800071c:	f7ff ff54 	bl	80005c8 <setrow>
						shiftleft();
 8000720:	f000 f878 	bl	8000814 <shiftleft>
						HAL_Delay (speed);
 8000724:	6838      	ldr	r0, [r7, #0]
 8000726:	f000 fa35 	bl	8000b94 <HAL_Delay>
					for (int j=start; j<(start+width+1); j++)
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	3301      	adds	r3, #1
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	4413      	add	r3, r2
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	429a      	cmp	r2, r3
 800073a:	dde9      	ble.n	8000710 <shift_char+0x34>
						break;
 800073c:	e01a      	b.n	8000774 <shift_char+0x98>
					for (int j=start+width+1; j>=(start); j--)
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	4413      	add	r3, r2
 8000744:	3301      	adds	r3, #1
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	e00f      	b.n	800076a <shift_char+0x8e>
						setrow ((num*8)-1, CH[j]);
 800074a:	4a0c      	ldr	r2, [pc, #48]	; (800077c <shift_char+0xa0>)
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	4413      	add	r3, r2
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	4619      	mov	r1, r3
 8000754:	2007      	movs	r0, #7
 8000756:	f7ff ff37 	bl	80005c8 <setrow>
						shiftright();
 800075a:	f000 f893 	bl	8000884 <shiftright>
						HAL_Delay (speed);
 800075e:	6838      	ldr	r0, [r7, #0]
 8000760:	f000 fa18 	bl	8000b94 <HAL_Delay>
					for (int j=start+width+1; j>=(start); j--)
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	3b01      	subs	r3, #1
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	429a      	cmp	r2, r3
 8000770:	daeb      	bge.n	800074a <shift_char+0x6e>
					break;
 8000772:	bf00      	nop
			}
}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000000 	.word	0x20000000

08000780 <scroll_string>:



void scroll_string (uint8_t *string, uint32_t speed, char direction)
{	
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	4613      	mov	r3, r2
 800078c:	71fb      	strb	r3, [r7, #7]
	while (*string != 0) 
 800078e:	e009      	b.n	80007a4 <scroll_string+0x24>
	{	
		shift_char (*string, speed, direction);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	79fa      	ldrb	r2, [r7, #7]
 8000796:	68b9      	ldr	r1, [r7, #8]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff9f 	bl	80006dc <shift_char>
		string++;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
	while (*string != 0) 
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1f1      	bne.n	8000790 <scroll_string+0x10>
  }
}
 80007ac:	bf00      	nop
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <max_clear>:



void max_clear(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	e008      	b.n	80007d6 <max_clear+0x1e>
		setrow(i,0);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fefc 	bl	80005c8 <setrow>
	for (int i=0; i<num*8; i++) 
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3301      	adds	r3, #1
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b07      	cmp	r3, #7
 80007da:	ddf3      	ble.n	80007c4 <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 80007dc:	2300      	movs	r3, #0
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	e00c      	b.n	80007fc <max_clear+0x44>
	{
		buffer[i] = 0;
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <max_clear+0x54>)
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <max_clear+0x58>)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	4413      	add	r3, r2
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	2b4f      	cmp	r3, #79	; 0x4f
 8000800:	ddef      	ble.n	80007e2 <max_clear+0x2a>
	}
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200004a8 	.word	0x200004a8
 8000810:	200004f8 	.word	0x200004f8

08000814 <shiftleft>:



void shiftleft(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
	int last = num*8-1;
 800081a:	2307      	movs	r3, #7
 800081c:	60bb      	str	r3, [r7, #8]
	uint8_t old = buffer_row[last];
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <shiftleft+0x6c>)
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4413      	add	r3, r2
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
	int i;
	for (i=0; i<num*8; i++)
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	e00c      	b.n	8000848 <shiftleft+0x34>
	{
		setrow(i, buffer_row[i]);
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4913      	ldr	r1, [pc, #76]	; (8000880 <shiftleft+0x6c>)
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	440b      	add	r3, r1
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	4619      	mov	r1, r3
 800083c:	4610      	mov	r0, r2
 800083e:	f7ff fec3 	bl	80005c8 <setrow>
	for (i=0; i<num*8; i++)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	3301      	adds	r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b07      	cmp	r3, #7
 800084c:	ddef      	ble.n	800082e <shiftleft+0x1a>
	}
	for (i=79; i>0; i--)
 800084e:	234f      	movs	r3, #79	; 0x4f
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	e00b      	b.n	800086c <shiftleft+0x58>
	{
 		buffer_row[i] = buffer_row[i-1];
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	3b01      	subs	r3, #1
 8000858:	4a09      	ldr	r2, [pc, #36]	; (8000880 <shiftleft+0x6c>)
 800085a:	5cd1      	ldrb	r1, [r2, r3]
 800085c:	4a08      	ldr	r2, [pc, #32]	; (8000880 <shiftleft+0x6c>)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	4413      	add	r3, r2
 8000862:	460a      	mov	r2, r1
 8000864:	701a      	strb	r2, [r3, #0]
	for (i=79; i>0; i--)
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3b01      	subs	r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2b00      	cmp	r3, #0
 8000870:	dcf0      	bgt.n	8000854 <shiftleft+0x40>
	}
	
	buffer_row[0] = old;
 8000872:	4a03      	ldr	r2, [pc, #12]	; (8000880 <shiftleft+0x6c>)
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	7013      	strb	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200004f8 	.word	0x200004f8

08000884 <shiftright>:


void shiftright(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
	int last = num*8-1;	
 800088a:	2307      	movs	r3, #7
 800088c:	607b      	str	r3, [r7, #4]
	uint8_t old = buffer_row[0];
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <shiftright+0x68>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	70fb      	strb	r3, [r7, #3]
	
	for (int i=last; i>=0; i--)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	e00c      	b.n	80008b4 <shiftright+0x30>
	{
		setrow (i, buffer_row[i]);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4913      	ldr	r1, [pc, #76]	; (80008ec <shiftright+0x68>)
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	440b      	add	r3, r1
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	4619      	mov	r1, r3
 80008a8:	4610      	mov	r0, r2
 80008aa:	f7ff fe8d 	bl	80005c8 <setrow>
	for (int i=last; i>=0; i--)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	daef      	bge.n	800089a <shiftright+0x16>
	}
	
	for (int i=0; i<80; i++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	e00b      	b.n	80008d8 <shiftright+0x54>
	{
		buffer_row[i] = buffer_row[i+1];
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a09      	ldr	r2, [pc, #36]	; (80008ec <shiftright+0x68>)
 80008c6:	5cd1      	ldrb	r1, [r2, r3]
 80008c8:	4a08      	ldr	r2, [pc, #32]	; (80008ec <shiftright+0x68>)
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	4413      	add	r3, r2
 80008ce:	460a      	mov	r2, r1
 80008d0:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	3301      	adds	r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	2b4f      	cmp	r3, #79	; 0x4f
 80008dc:	ddf0      	ble.n	80008c0 <shiftright+0x3c>
	}
	
	buffer_row[num*8-1] = old;
 80008de:	4a03      	ldr	r2, [pc, #12]	; (80008ec <shiftright+0x68>)
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	71d3      	strb	r3, [r2, #7]
}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200004f8 	.word	0x200004f8

080008f0 <max_init>:



void max_init (uint8_t brightness)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 80008fa:	2100      	movs	r1, #0
 80008fc:	2009      	movs	r0, #9
 80008fe:	f7ff fdc3 	bl	8000488 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8000902:	2107      	movs	r1, #7
 8000904:	200b      	movs	r0, #11
 8000906:	f7ff fdbf 	bl	8000488 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 800090a:	2101      	movs	r1, #1
 800090c:	200c      	movs	r0, #12
 800090e:	f7ff fdbb 	bl	8000488 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8000912:	2100      	movs	r1, #0
 8000914:	200f      	movs	r0, #15
 8000916:	f7ff fdb7 	bl	8000488 <write_max_cmd>
	
	max_clear ();
 800091a:	f7ff ff4d 	bl	80007b8 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	4619      	mov	r1, r3
 8000922:	200a      	movs	r0, #10
 8000924:	f7ff fdb0 	bl	8000488 <write_max_cmd>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_MspInit+0x44>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_MspInit+0x44>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6193      	str	r3, [r2, #24]
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_MspInit+0x44>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x44>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x44>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	61d3      	str	r3, [r2, #28]
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x44>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000966:	2007      	movs	r0, #7
 8000968:	f000 f9ea 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <HAL_UART_MspInit+0x7c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d128      	bne.n	80009ec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_UART_MspInit+0x80>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	4a16      	ldr	r2, [pc, #88]	; (80009f8 <HAL_UART_MspInit+0x80>)
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	61d3      	str	r3, [r2, #28]
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_UART_MspInit+0x80>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_UART_MspInit+0x80>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <HAL_UART_MspInit+0x80>)
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009bc:	6153      	str	r3, [r2, #20]
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_UART_MspInit+0x80>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ca:	230c      	movs	r3, #12
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009da:	2307      	movs	r3, #7
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f000 f9de 	bl	8000da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	; 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40004400 	.word	0x40004400
 80009f8:	40021000 	.word	0x40021000

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a48:	f000 f884 	bl	8000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <SystemInit+0x20>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <SystemInit+0x20>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
 ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a78:	f7ff ffea 	bl	8000a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	; (8000ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <LoopForever+0xe>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	; (8000ac0 <LoopForever+0x16>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f002 f919 	bl	8002cd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aa6:	f7ff fb8f 	bl	80001c8 <main>

08000aaa <LoopForever>:

LoopForever:
    b LoopForever
 8000aaa:	e7fe      	b.n	8000aaa <LoopForever>
 ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aac:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 8000ab8:	08002da0 	.word	0x08002da0
  ldr r2, =_sbss
 8000abc:	20000404 	.word	0x20000404
  ldr r4, =_ebss
 8000ac0:	2000054c 	.word	0x2000054c

08000ac4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC1_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_Init+0x28>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <HAL_Init+0x28>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 f931 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 f808 	bl	8000af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae4:	f7ff ff24 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40022000 	.word	0x40022000

08000af4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x54>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_InitTick+0x58>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f93b 	bl	8000d8e <HAL_SYSTICK_Config>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00e      	b.n	8000b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d80a      	bhi.n	8000b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f000 f911 	bl	8000d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <HAL_InitTick+0x5c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e000      	b.n	8000b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200003f8 	.word	0x200003f8
 8000b4c:	20000400 	.word	0x20000400
 8000b50:	200003fc 	.word	0x200003fc

08000b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <HAL_IncTick+0x24>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000400 	.word	0x20000400
 8000b78:	20000548 	.word	0x20000548

08000b7c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000548 	.word	0x20000548

08000b94 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b9c:	f7ff ffee 	bl	8000b7c <HAL_GetTick>
 8000ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bac:	d005      	beq.n	8000bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_Delay+0x44>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bba:	bf00      	nop
 8000bbc:	f7ff ffde 	bl	8000b7c <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d8f7      	bhi.n	8000bbc <HAL_Delay+0x28>
  {
  }
}
 8000bcc:	bf00      	nop
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000400 	.word	0x20000400

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	; (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f7ff ff8e 	bl	8000c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff47 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff5c 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ff8e 	bl	8000c94 <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff5d 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ffb0 	bl	8000cfc <SysTick_Config>
 8000d9c:	4603      	mov	r3, r0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db6:	e14e      	b.n	8001056 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 8140 	beq.w	8001050 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d005      	beq.n	8000de8 <HAL_GPIO_Init+0x40>
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d130      	bne.n	8000e4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e1e:	2201      	movs	r2, #1
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	091b      	lsrs	r3, r3, #4
 8000e34:	f003 0201 	and.w	r2, r3, #1
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d017      	beq.n	8000e86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d123      	bne.n	8000eda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	08da      	lsrs	r2, r3, #3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3208      	adds	r2, #8
 8000e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	691a      	ldr	r2, [r3, #16]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f003 0307 	and.w	r3, r3, #7
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	08da      	lsrs	r2, r3, #3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3208      	adds	r2, #8
 8000ed4:	6939      	ldr	r1, [r7, #16]
 8000ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0203 	and.w	r2, r3, #3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 809a 	beq.w	8001050 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1c:	4b55      	ldr	r3, [pc, #340]	; (8001074 <HAL_GPIO_Init+0x2cc>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a54      	ldr	r2, [pc, #336]	; (8001074 <HAL_GPIO_Init+0x2cc>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b52      	ldr	r3, [pc, #328]	; (8001074 <HAL_GPIO_Init+0x2cc>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f34:	4a50      	ldr	r2, [pc, #320]	; (8001078 <HAL_GPIO_Init+0x2d0>)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f5e:	d013      	beq.n	8000f88 <HAL_GPIO_Init+0x1e0>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a46      	ldr	r2, [pc, #280]	; (800107c <HAL_GPIO_Init+0x2d4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d00d      	beq.n	8000f84 <HAL_GPIO_Init+0x1dc>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a45      	ldr	r2, [pc, #276]	; (8001080 <HAL_GPIO_Init+0x2d8>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d007      	beq.n	8000f80 <HAL_GPIO_Init+0x1d8>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a44      	ldr	r2, [pc, #272]	; (8001084 <HAL_GPIO_Init+0x2dc>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d101      	bne.n	8000f7c <HAL_GPIO_Init+0x1d4>
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e006      	b.n	8000f8a <HAL_GPIO_Init+0x1e2>
 8000f7c:	2305      	movs	r3, #5
 8000f7e:	e004      	b.n	8000f8a <HAL_GPIO_Init+0x1e2>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e002      	b.n	8000f8a <HAL_GPIO_Init+0x1e2>
 8000f84:	2301      	movs	r3, #1
 8000f86:	e000      	b.n	8000f8a <HAL_GPIO_Init+0x1e2>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	f002 0203 	and.w	r2, r2, #3
 8000f90:	0092      	lsls	r2, r2, #2
 8000f92:	4093      	lsls	r3, r2
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f9a:	4937      	ldr	r1, [pc, #220]	; (8001078 <HAL_GPIO_Init+0x2d0>)
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa8:	4b37      	ldr	r3, [pc, #220]	; (8001088 <HAL_GPIO_Init+0x2e0>)
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fcc:	4a2e      	ldr	r2, [pc, #184]	; (8001088 <HAL_GPIO_Init+0x2e0>)
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <HAL_GPIO_Init+0x2e0>)
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ff6:	4a24      	ldr	r2, [pc, #144]	; (8001088 <HAL_GPIO_Init+0x2e0>)
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <HAL_GPIO_Init+0x2e0>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001020:	4a19      	ldr	r2, [pc, #100]	; (8001088 <HAL_GPIO_Init+0x2e0>)
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_GPIO_Init+0x2e0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800104a:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <HAL_GPIO_Init+0x2e0>)
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	fa22 f303 	lsr.w	r3, r2, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	f47f aea9 	bne.w	8000db8 <HAL_GPIO_Init+0x10>
  }
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	371c      	adds	r7, #28
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000
 800107c:	48000400 	.word	0x48000400
 8001080:	48000800 	.word	0x48000800
 8001084:	48000c00 	.word	0x48000c00
 8001088:	40010400 	.word	0x40010400

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010aa:	887a      	ldrh	r2, [r7, #2]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	f001 b823 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 817d 	beq.w	80013f2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010f8:	4bbc      	ldr	r3, [pc, #752]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b04      	cmp	r3, #4
 8001102:	d00c      	beq.n	800111e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001104:	4bb9      	ldr	r3, [pc, #740]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b08      	cmp	r3, #8
 800110e:	d15c      	bne.n	80011ca <HAL_RCC_OscConfig+0x10e>
 8001110:	4bb6      	ldr	r3, [pc, #728]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111c:	d155      	bne.n	80011ca <HAL_RCC_OscConfig+0x10e>
 800111e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001122:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001132:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	095b      	lsrs	r3, r3, #5
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d102      	bne.n	8001150 <HAL_RCC_OscConfig+0x94>
 800114a:	4ba8      	ldr	r3, [pc, #672]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	e015      	b.n	800117c <HAL_RCC_OscConfig+0xc0>
 8001150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001154:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001158:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001168:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800116c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001170:	fa93 f3a3 	rbit	r3, r3
 8001174:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001178:	4b9c      	ldr	r3, [pc, #624]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 800117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001180:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001184:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001188:	fa92 f2a2 	rbit	r2, r2
 800118c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001190:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001194:	fab2 f282 	clz	r2, r2
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	f042 0220 	orr.w	r2, r2, #32
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	f002 021f 	and.w	r2, r2, #31
 80011a4:	2101      	movs	r1, #1
 80011a6:	fa01 f202 	lsl.w	r2, r1, r2
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 811f 	beq.w	80013f0 <HAL_RCC_OscConfig+0x334>
 80011b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f040 8116 	bne.w	80013f0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f000 bfaf 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011da:	d106      	bne.n	80011ea <HAL_RCC_OscConfig+0x12e>
 80011dc:	4b83      	ldr	r3, [pc, #524]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a82      	ldr	r2, [pc, #520]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e036      	b.n	8001258 <HAL_RCC_OscConfig+0x19c>
 80011ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10c      	bne.n	8001214 <HAL_RCC_OscConfig+0x158>
 80011fa:	4b7c      	ldr	r3, [pc, #496]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a7b      	ldr	r2, [pc, #492]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b79      	ldr	r3, [pc, #484]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a78      	ldr	r2, [pc, #480]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 800120c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e021      	b.n	8001258 <HAL_RCC_OscConfig+0x19c>
 8001214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001218:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001224:	d10c      	bne.n	8001240 <HAL_RCC_OscConfig+0x184>
 8001226:	4b71      	ldr	r3, [pc, #452]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a70      	ldr	r2, [pc, #448]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 800122c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b6e      	ldr	r3, [pc, #440]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a6d      	ldr	r2, [pc, #436]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e00b      	b.n	8001258 <HAL_RCC_OscConfig+0x19c>
 8001240:	4b6a      	ldr	r3, [pc, #424]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a69      	ldr	r2, [pc, #420]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	4b67      	ldr	r3, [pc, #412]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a66      	ldr	r2, [pc, #408]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001256:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001258:	4b64      	ldr	r3, [pc, #400]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	f023 020f 	bic.w	r2, r3, #15
 8001260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001264:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	495f      	ldr	r1, [pc, #380]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 800126e:	4313      	orrs	r3, r2
 8001270:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001276:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d059      	beq.n	8001336 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001282:	f7ff fc7b 	bl	8000b7c <HAL_GetTick>
 8001286:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	e00a      	b.n	80012a2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fc76 	bl	8000b7c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b64      	cmp	r3, #100	; 0x64
 800129a:	d902      	bls.n	80012a2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	f000 bf43 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>
 80012a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012a6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012aa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80012ae:	fa93 f3a3 	rbit	r3, r3
 80012b2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80012b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ba:	fab3 f383 	clz	r3, r3
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	095b      	lsrs	r3, r3, #5
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d102      	bne.n	80012d4 <HAL_RCC_OscConfig+0x218>
 80012ce:	4b47      	ldr	r3, [pc, #284]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	e015      	b.n	8001300 <HAL_RCC_OscConfig+0x244>
 80012d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80012e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ec:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80012f0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80012f4:	fa93 f3a3 	rbit	r3, r3
 80012f8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80012fc:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001304:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001308:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800130c:	fa92 f2a2 	rbit	r2, r2
 8001310:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001314:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001318:	fab2 f282 	clz	r2, r2
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	f042 0220 	orr.w	r2, r2, #32
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	f002 021f 	and.w	r2, r2, #31
 8001328:	2101      	movs	r1, #1
 800132a:	fa01 f202 	lsl.w	r2, r1, r2
 800132e:	4013      	ands	r3, r2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0ab      	beq.n	800128c <HAL_RCC_OscConfig+0x1d0>
 8001334:	e05d      	b.n	80013f2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fc21 	bl	8000b7c <HAL_GetTick>
 800133a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	e00a      	b.n	8001356 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001340:	f7ff fc1c 	bl	8000b7c <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b64      	cmp	r3, #100	; 0x64
 800134e:	d902      	bls.n	8001356 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	f000 bee9 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>
 8001356:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800135a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001362:	fa93 f3a3 	rbit	r3, r3
 8001366:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800136a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	fab3 f383 	clz	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	095b      	lsrs	r3, r3, #5
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b01      	cmp	r3, #1
 8001380:	d102      	bne.n	8001388 <HAL_RCC_OscConfig+0x2cc>
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	e015      	b.n	80013b4 <HAL_RCC_OscConfig+0x2f8>
 8001388:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800138c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800139c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80013a4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80013a8:	fa93 f3a3 	rbit	r3, r3
 80013ac:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_RCC_OscConfig+0x330>)
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013b8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80013bc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80013c0:	fa92 f2a2 	rbit	r2, r2
 80013c4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80013c8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80013cc:	fab2 f282 	clz	r2, r2
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	f042 0220 	orr.w	r2, r2, #32
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	f002 021f 	and.w	r2, r2, #31
 80013dc:	2101      	movs	r1, #1
 80013de:	fa01 f202 	lsl.w	r2, r1, r2
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1ab      	bne.n	8001340 <HAL_RCC_OscConfig+0x284>
 80013e8:	e003      	b.n	80013f2 <HAL_RCC_OscConfig+0x336>
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 817d 	beq.w	8001702 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001408:	4ba6      	ldr	r3, [pc, #664]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00b      	beq.n	800142c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001414:	4ba3      	ldr	r3, [pc, #652]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 030c 	and.w	r3, r3, #12
 800141c:	2b08      	cmp	r3, #8
 800141e:	d172      	bne.n	8001506 <HAL_RCC_OscConfig+0x44a>
 8001420:	4ba0      	ldr	r3, [pc, #640]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d16c      	bne.n	8001506 <HAL_RCC_OscConfig+0x44a>
 800142c:	2302      	movs	r3, #2
 800142e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001432:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001436:	fa93 f3a3 	rbit	r3, r3
 800143a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800143e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001442:	fab3 f383 	clz	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	095b      	lsrs	r3, r3, #5
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d102      	bne.n	800145c <HAL_RCC_OscConfig+0x3a0>
 8001456:	4b93      	ldr	r3, [pc, #588]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	e013      	b.n	8001484 <HAL_RCC_OscConfig+0x3c8>
 800145c:	2302      	movs	r3, #2
 800145e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800146e:	2302      	movs	r3, #2
 8001470:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001474:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001478:	fa93 f3a3 	rbit	r3, r3
 800147c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001480:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	2202      	movs	r2, #2
 8001486:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800148a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800148e:	fa92 f2a2 	rbit	r2, r2
 8001492:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001496:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800149a:	fab2 f282 	clz	r2, r2
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	f042 0220 	orr.w	r2, r2, #32
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	f002 021f 	and.w	r2, r2, #31
 80014aa:	2101      	movs	r1, #1
 80014ac:	fa01 f202 	lsl.w	r2, r1, r2
 80014b0:	4013      	ands	r3, r2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00a      	beq.n	80014cc <HAL_RCC_OscConfig+0x410>
 80014b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d002      	beq.n	80014cc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	f000 be2e 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014cc:	4b75      	ldr	r3, [pc, #468]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	21f8      	movs	r1, #248	; 0xf8
 80014e2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80014ea:	fa91 f1a1 	rbit	r1, r1
 80014ee:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80014f2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80014f6:	fab1 f181 	clz	r1, r1
 80014fa:	b2c9      	uxtb	r1, r1
 80014fc:	408b      	lsls	r3, r1
 80014fe:	4969      	ldr	r1, [pc, #420]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 8001500:	4313      	orrs	r3, r2
 8001502:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001504:	e0fd      	b.n	8001702 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 8088 	beq.w	8001628 <HAL_RCC_OscConfig+0x56c>
 8001518:	2301      	movs	r3, #1
 800151a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800152a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152e:	fab3 f383 	clz	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001538:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	461a      	mov	r2, r3
 8001540:	2301      	movs	r3, #1
 8001542:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fb1a 	bl	8000b7c <HAL_GetTick>
 8001548:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154e:	f7ff fb15 	bl	8000b7c <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d902      	bls.n	8001564 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	f000 bde2 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>
 8001564:	2302      	movs	r3, #2
 8001566:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800156e:	fa93 f3a3 	rbit	r3, r3
 8001572:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001576:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157a:	fab3 f383 	clz	r3, r3
 800157e:	b2db      	uxtb	r3, r3
 8001580:	095b      	lsrs	r3, r3, #5
 8001582:	b2db      	uxtb	r3, r3
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d102      	bne.n	8001594 <HAL_RCC_OscConfig+0x4d8>
 800158e:	4b45      	ldr	r3, [pc, #276]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	e013      	b.n	80015bc <HAL_RCC_OscConfig+0x500>
 8001594:	2302      	movs	r3, #2
 8001596:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800159e:	fa93 f3a3 	rbit	r3, r3
 80015a2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80015a6:	2302      	movs	r3, #2
 80015a8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80015ac:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80015b0:	fa93 f3a3 	rbit	r3, r3
 80015b4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80015b8:	4b3a      	ldr	r3, [pc, #232]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	2202      	movs	r2, #2
 80015be:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80015c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80015c6:	fa92 f2a2 	rbit	r2, r2
 80015ca:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80015ce:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80015d2:	fab2 f282 	clz	r2, r2
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	f042 0220 	orr.w	r2, r2, #32
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	f002 021f 	and.w	r2, r2, #31
 80015e2:	2101      	movs	r1, #1
 80015e4:	fa01 f202 	lsl.w	r2, r1, r2
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0af      	beq.n	800154e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	21f8      	movs	r1, #248	; 0xf8
 8001604:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001608:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800160c:	fa91 f1a1 	rbit	r1, r1
 8001610:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001614:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001618:	fab1 f181 	clz	r1, r1
 800161c:	b2c9      	uxtb	r1, r1
 800161e:	408b      	lsls	r3, r1
 8001620:	4920      	ldr	r1, [pc, #128]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
 8001626:	e06c      	b.n	8001702 <HAL_RCC_OscConfig+0x646>
 8001628:	2301      	movs	r3, #1
 800162a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001632:	fa93 f3a3 	rbit	r3, r3
 8001636:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800163a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163e:	fab3 f383 	clz	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001648:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	461a      	mov	r2, r3
 8001650:	2300      	movs	r3, #0
 8001652:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff fa92 	bl	8000b7c <HAL_GetTick>
 8001658:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165c:	e00a      	b.n	8001674 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800165e:	f7ff fa8d 	bl	8000b7c <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d902      	bls.n	8001674 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	f000 bd5a 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>
 8001674:	2302      	movs	r3, #2
 8001676:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001686:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	095b      	lsrs	r3, r3, #5
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b01      	cmp	r3, #1
 800169c:	d104      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5ec>
 800169e:	4b01      	ldr	r3, [pc, #4]	; (80016a4 <HAL_RCC_OscConfig+0x5e8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	e015      	b.n	80016d0 <HAL_RCC_OscConfig+0x614>
 80016a4:	40021000 	.word	0x40021000
 80016a8:	2302      	movs	r3, #2
 80016aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016b2:	fa93 f3a3 	rbit	r3, r3
 80016b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016ba:	2302      	movs	r3, #2
 80016bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80016cc:	4bc8      	ldr	r3, [pc, #800]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	2202      	movs	r2, #2
 80016d2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80016d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80016da:	fa92 f2a2 	rbit	r2, r2
 80016de:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80016e2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016e6:	fab2 f282 	clz	r2, r2
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	f042 0220 	orr.w	r2, r2, #32
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	f002 021f 	and.w	r2, r2, #31
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f202 	lsl.w	r2, r1, r2
 80016fc:	4013      	ands	r3, r2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1ad      	bne.n	800165e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8110 	beq.w	8001938 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d079      	beq.n	800181c <HAL_RCC_OscConfig+0x760>
 8001728:	2301      	movs	r3, #1
 800172a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001732:	fa93 f3a3 	rbit	r3, r3
 8001736:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800173a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173e:	fab3 f383 	clz	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	4bab      	ldr	r3, [pc, #684]	; (80019f4 <HAL_RCC_OscConfig+0x938>)
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	461a      	mov	r2, r3
 800174e:	2301      	movs	r3, #1
 8001750:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7ff fa13 	bl	8000b7c <HAL_GetTick>
 8001756:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	e00a      	b.n	8001772 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800175c:	f7ff fa0e 	bl	8000b7c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d902      	bls.n	8001772 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	f000 bcdb 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>
 8001772:	2302      	movs	r3, #2
 8001774:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001788:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800178c:	2202      	movs	r2, #2
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001794:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	fa93 f2a3 	rbit	r2, r3
 800179e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80017b0:	2202      	movs	r2, #2
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	fa93 f2a3 	rbit	r2, r3
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80017ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017cc:	4b88      	ldr	r3, [pc, #544]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 80017ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017d8:	2102      	movs	r1, #2
 80017da:	6019      	str	r1, [r3, #0]
 80017dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	fa93 f1a3 	rbit	r1, r3
 80017ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017f2:	6019      	str	r1, [r3, #0]
  return result;
 80017f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	2101      	movs	r1, #1
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	4013      	ands	r3, r2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0a0      	beq.n	800175c <HAL_RCC_OscConfig+0x6a0>
 800181a:	e08d      	b.n	8001938 <HAL_RCC_OscConfig+0x87c>
 800181c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001820:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	fa93 f2a3 	rbit	r2, r3
 8001836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800183e:	601a      	str	r2, [r3, #0]
  return result;
 8001840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001844:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001848:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	4b68      	ldr	r3, [pc, #416]	; (80019f4 <HAL_RCC_OscConfig+0x938>)
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	461a      	mov	r2, r3
 800185a:	2300      	movs	r3, #0
 800185c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185e:	f7ff f98d 	bl	8000b7c <HAL_GetTick>
 8001862:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001866:	e00a      	b.n	800187e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001868:	f7ff f988 	bl	8000b7c <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d902      	bls.n	800187e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	f000 bc55 	b.w	8002128 <HAL_RCC_OscConfig+0x106c>
 800187e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001882:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001886:	2202      	movs	r2, #2
 8001888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	fa93 f2a3 	rbit	r2, r3
 8001898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80018aa:	2202      	movs	r2, #2
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	fa93 f2a3 	rbit	r2, r3
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80018ce:	2202      	movs	r2, #2
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fa93 f2a3 	rbit	r2, r3
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80018e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ea:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 80018ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018f6:	2102      	movs	r1, #2
 80018f8:	6019      	str	r1, [r3, #0]
 80018fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fa93 f1a3 	rbit	r1, r3
 8001908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001910:	6019      	str	r1, [r3, #0]
  return result;
 8001912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001916:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	fab3 f383 	clz	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d197      	bne.n	8001868 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 81a1 	beq.w	8001c90 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001954:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d116      	bne.n	800198e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001960:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	4a22      	ldr	r2, [pc, #136]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 8001966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196a:	61d3      	str	r3, [r2, #28]
 800196c:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001978:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001982:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001986:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001988:	2301      	movs	r3, #1
 800198a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <HAL_RCC_OscConfig+0x93c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d11a      	bne.n	80019d0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <HAL_RCC_OscConfig+0x93c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <HAL_RCC_OscConfig+0x93c>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a6:	f7ff f8e9 	bl	8000b7c <HAL_GetTick>
 80019aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ae:	e009      	b.n	80019c4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b0:	f7ff f8e4 	bl	8000b7c <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b64      	cmp	r3, #100	; 0x64
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e3b1      	b.n	8002128 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_RCC_OscConfig+0x93c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0ef      	beq.n	80019b0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d10d      	bne.n	80019fc <HAL_RCC_OscConfig+0x940>
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4a02      	ldr	r2, [pc, #8]	; (80019f0 <HAL_RCC_OscConfig+0x934>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6213      	str	r3, [r2, #32]
 80019ec:	e03c      	b.n	8001a68 <HAL_RCC_OscConfig+0x9ac>
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	10908120 	.word	0x10908120
 80019f8:	40007000 	.word	0x40007000
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10c      	bne.n	8001a26 <HAL_RCC_OscConfig+0x96a>
 8001a0c:	4bc1      	ldr	r3, [pc, #772]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4ac0      	ldr	r2, [pc, #768]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	6213      	str	r3, [r2, #32]
 8001a18:	4bbe      	ldr	r3, [pc, #760]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4abd      	ldr	r2, [pc, #756]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a1e:	f023 0304 	bic.w	r3, r3, #4
 8001a22:	6213      	str	r3, [r2, #32]
 8001a24:	e020      	b.n	8001a68 <HAL_RCC_OscConfig+0x9ac>
 8001a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x994>
 8001a36:	4bb7      	ldr	r3, [pc, #732]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	4ab6      	ldr	r2, [pc, #728]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6213      	str	r3, [r2, #32]
 8001a42:	4bb4      	ldr	r3, [pc, #720]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4ab3      	ldr	r2, [pc, #716]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6213      	str	r3, [r2, #32]
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0x9ac>
 8001a50:	4bb0      	ldr	r3, [pc, #704]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4aaf      	ldr	r2, [pc, #700]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	6213      	str	r3, [r2, #32]
 8001a5c:	4bad      	ldr	r3, [pc, #692]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4aac      	ldr	r2, [pc, #688]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001a62:	f023 0304 	bic.w	r3, r3, #4
 8001a66:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8081 	beq.w	8001b7c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff f87f 	bl	8000b7c <HAL_GetTick>
 8001a7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7ff f87a 	bl	8000b7c <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e345      	b.n	8002128 <HAL_RCC_OscConfig+0x106c>
 8001a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	fa93 f2a3 	rbit	r2, r3
 8001ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ac8:	2202      	movs	r2, #2
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	fa93 f2a3 	rbit	r2, r3
 8001ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ade:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ae2:	601a      	str	r2, [r3, #0]
  return result;
 8001ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001aec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	095b      	lsrs	r3, r3, #5
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d102      	bne.n	8001b08 <HAL_RCC_OscConfig+0xa4c>
 8001b02:	4b84      	ldr	r3, [pc, #528]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	e013      	b.n	8001b30 <HAL_RCC_OscConfig+0xa74>
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b10:	2202      	movs	r2, #2
 8001b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b18:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	fa93 f2a3 	rbit	r2, r3
 8001b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b26:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	4b79      	ldr	r3, [pc, #484]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b34:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001b38:	2102      	movs	r1, #2
 8001b3a:	6011      	str	r1, [r2, #0]
 8001b3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b40:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	fa92 f1a2 	rbit	r1, r2
 8001b4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b4e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b52:	6011      	str	r1, [r2, #0]
  return result;
 8001b54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b58:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	fab2 f282 	clz	r2, r2
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	f002 021f 	and.w	r2, r2, #31
 8001b6e:	2101      	movs	r1, #1
 8001b70:	fa01 f202 	lsl.w	r2, r1, r2
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d084      	beq.n	8001a84 <HAL_RCC_OscConfig+0x9c8>
 8001b7a:	e07f      	b.n	8001c7c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7c:	f7fe fffe 	bl	8000b7c <HAL_GetTick>
 8001b80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b84:	e00b      	b.n	8001b9e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b86:	f7fe fff9 	bl	8000b7c <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e2c4      	b.n	8002128 <HAL_RCC_OscConfig+0x106c>
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fa93 f2a3 	rbit	r2, r3
 8001bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001bca:	2202      	movs	r2, #2
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	fa93 f2a3 	rbit	r2, r3
 8001bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001be4:	601a      	str	r2, [r3, #0]
  return result;
 8001be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bea:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001bee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f043 0302 	orr.w	r3, r3, #2
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d102      	bne.n	8001c0a <HAL_RCC_OscConfig+0xb4e>
 8001c04:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	e013      	b.n	8001c32 <HAL_RCC_OscConfig+0xb76>
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c12:	2202      	movs	r2, #2
 8001c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	fa93 f2a3 	rbit	r2, r3
 8001c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c28:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	4b39      	ldr	r3, [pc, #228]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c36:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	6011      	str	r1, [r2, #0]
 8001c3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c42:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	fa92 f1a2 	rbit	r1, r2
 8001c4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c50:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c54:	6011      	str	r1, [r2, #0]
  return result;
 8001c56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c5a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	fab2 f282 	clz	r2, r2
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	f002 021f 	and.w	r2, r2, #31
 8001c70:	2101      	movs	r1, #1
 8001c72:	fa01 f202 	lsl.w	r2, r1, r2
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d184      	bne.n	8001b86 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c7c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c84:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 8242 	beq.w	8002126 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <HAL_RCC_OscConfig+0xc58>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	f000 8213 	beq.w	80020d6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	f040 8162 	bne.w	8001f86 <HAL_RCC_OscConfig+0xeca>
 8001cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001cca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	fa93 f2a3 	rbit	r2, r3
 8001cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ce6:	601a      	str	r2, [r3, #0]
  return result;
 8001ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cec:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001cf0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	461a      	mov	r2, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7fe ff38 	bl	8000b7c <HAL_GetTick>
 8001d0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d10:	e00c      	b.n	8001d2c <HAL_RCC_OscConfig+0xc70>
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d18:	f7fe ff30 	bl	8000b7c <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e1fd      	b.n	8002128 <HAL_RCC_OscConfig+0x106c>
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	fa93 f2a3 	rbit	r2, r3
 8001d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d50:	601a      	str	r2, [r3, #0]
  return result;
 8001d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d56:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d102      	bne.n	8001d76 <HAL_RCC_OscConfig+0xcba>
 8001d70:	4bb0      	ldr	r3, [pc, #704]	; (8002034 <HAL_RCC_OscConfig+0xf78>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	e027      	b.n	8001dc6 <HAL_RCC_OscConfig+0xd0a>
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	fa93 f2a3 	rbit	r2, r3
 8001d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d96:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001da4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	fa93 f2a3 	rbit	r2, r3
 8001db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	4b9c      	ldr	r3, [pc, #624]	; (8002034 <HAL_RCC_OscConfig+0xf78>)
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dca:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001dce:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dd2:	6011      	str	r1, [r2, #0]
 8001dd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dd8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	fa92 f1a2 	rbit	r1, r2
 8001de2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001de6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001dea:	6011      	str	r1, [r2, #0]
  return result;
 8001dec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001df0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	fab2 f282 	clz	r2, r2
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	f042 0220 	orr.w	r2, r2, #32
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	f002 021f 	and.w	r2, r2, #31
 8001e06:	2101      	movs	r1, #1
 8001e08:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d182      	bne.n	8001d18 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e12:	4b88      	ldr	r3, [pc, #544]	; (8002034 <HAL_RCC_OscConfig+0xf78>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	430b      	orrs	r3, r1
 8001e34:	497f      	ldr	r1, [pc, #508]	; (8002034 <HAL_RCC_OscConfig+0xf78>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	604b      	str	r3, [r1, #4]
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f2a3 	rbit	r2, r3
 8001e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e5e:	601a      	str	r2, [r3, #0]
  return result;
 8001e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e64:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e68:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7fe fe7c 	bl	8000b7c <HAL_GetTick>
 8001e84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e88:	e009      	b.n	8001e9e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7fe fe77 	bl	8000b7c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e144      	b.n	8002128 <HAL_RCC_OscConfig+0x106c>
 8001e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ea6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	fa93 f2a3 	rbit	r2, r3
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ec2:	601a      	str	r2, [r3, #0]
  return result;
 8001ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ecc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	095b      	lsrs	r3, r3, #5
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d102      	bne.n	8001ee8 <HAL_RCC_OscConfig+0xe2c>
 8001ee2:	4b54      	ldr	r3, [pc, #336]	; (8002034 <HAL_RCC_OscConfig+0xf78>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	e027      	b.n	8001f38 <HAL_RCC_OscConfig+0xe7c>
 8001ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eec:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ef0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	fa93 f2a3 	rbit	r2, r3
 8001f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f08:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f12:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001f16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f20:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	fa93 f2a3 	rbit	r2, r3
 8001f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	4b3f      	ldr	r3, [pc, #252]	; (8002034 <HAL_RCC_OscConfig+0xf78>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f3c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001f40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f44:	6011      	str	r1, [r2, #0]
 8001f46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f4a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	fa92 f1a2 	rbit	r1, r2
 8001f54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f58:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f5c:	6011      	str	r1, [r2, #0]
  return result;
 8001f5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f62:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	fab2 f282 	clz	r2, r2
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f042 0220 	orr.w	r2, r2, #32
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	f002 021f 	and.w	r2, r2, #31
 8001f78:	2101      	movs	r1, #1
 8001f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d082      	beq.n	8001e8a <HAL_RCC_OscConfig+0xdce>
 8001f84:	e0cf      	b.n	8002126 <HAL_RCC_OscConfig+0x106a>
 8001f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	fa93 f2a3 	rbit	r2, r3
 8001fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001faa:	601a      	str	r2, [r3, #0]
  return result;
 8001fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001fb4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2300      	movs	r3, #0
 8001fca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7fe fdd6 	bl	8000b7c <HAL_GetTick>
 8001fd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd4:	e009      	b.n	8001fea <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7fe fdd1 	bl	8000b7c <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e09e      	b.n	8002128 <HAL_RCC_OscConfig+0x106c>
 8001fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fee:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ff2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	fa93 f2a3 	rbit	r2, r3
 8002006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800200e:	601a      	str	r2, [r3, #0]
  return result;
 8002010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002014:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002018:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d104      	bne.n	8002038 <HAL_RCC_OscConfig+0xf7c>
 800202e:	4b01      	ldr	r3, [pc, #4]	; (8002034 <HAL_RCC_OscConfig+0xf78>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	e029      	b.n	8002088 <HAL_RCC_OscConfig+0xfcc>
 8002034:	40021000 	.word	0x40021000
 8002038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002040:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	fa93 f2a3 	rbit	r2, r3
 8002054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002058:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002062:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002066:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002070:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	fa93 f2a3 	rbit	r2, r3
 800207a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_RCC_OscConfig+0x1078>)
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800208c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002090:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002094:	6011      	str	r1, [r2, #0]
 8002096:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800209a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	fa92 f1a2 	rbit	r1, r2
 80020a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020a8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80020ac:	6011      	str	r1, [r2, #0]
  return result;
 80020ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020b2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	fab2 f282 	clz	r2, r2
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	f042 0220 	orr.w	r2, r2, #32
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	f002 021f 	and.w	r2, r2, #31
 80020c8:	2101      	movs	r1, #1
 80020ca:	fa01 f202 	lsl.w	r2, r1, r2
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d180      	bne.n	8001fd6 <HAL_RCC_OscConfig+0xf1a>
 80020d4:	e027      	b.n	8002126 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e01e      	b.n	8002128 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_RCC_OscConfig+0x1078>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020f6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	429a      	cmp	r2, r3
 8002108:	d10b      	bne.n	8002122 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800210a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800210e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800211e:	429a      	cmp	r2, r3
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000

08002138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b09e      	sub	sp, #120	; 0x78
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e162      	b.n	8002416 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002150:	4b90      	ldr	r3, [pc, #576]	; (8002394 <HAL_RCC_ClockConfig+0x25c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d910      	bls.n	8002180 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b8d      	ldr	r3, [pc, #564]	; (8002394 <HAL_RCC_ClockConfig+0x25c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 0207 	bic.w	r2, r3, #7
 8002166:	498b      	ldr	r1, [pc, #556]	; (8002394 <HAL_RCC_ClockConfig+0x25c>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b89      	ldr	r3, [pc, #548]	; (8002394 <HAL_RCC_ClockConfig+0x25c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e14a      	b.n	8002416 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b82      	ldr	r3, [pc, #520]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	497f      	ldr	r1, [pc, #508]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 80dc 	beq.w	8002364 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d13c      	bne.n	800222e <HAL_RCC_ClockConfig+0xf6>
 80021b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d102      	bne.n	80021de <HAL_RCC_ClockConfig+0xa6>
 80021d8:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	e00f      	b.n	80021fe <HAL_RCC_ClockConfig+0xc6>
 80021de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	667b      	str	r3, [r7, #100]	; 0x64
 80021ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021f0:	663b      	str	r3, [r7, #96]	; 0x60
 80021f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021fa:	4b67      	ldr	r3, [pc, #412]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002202:	65ba      	str	r2, [r7, #88]	; 0x58
 8002204:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002206:	fa92 f2a2 	rbit	r2, r2
 800220a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800220c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800220e:	fab2 f282 	clz	r2, r2
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f042 0220 	orr.w	r2, r2, #32
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	f002 021f 	and.w	r2, r2, #31
 800221e:	2101      	movs	r1, #1
 8002220:	fa01 f202 	lsl.w	r2, r1, r2
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d17b      	bne.n	8002322 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0f3      	b.n	8002416 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d13c      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x178>
 8002236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d102      	bne.n	8002260 <HAL_RCC_ClockConfig+0x128>
 800225a:	4b4f      	ldr	r3, [pc, #316]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	e00f      	b.n	8002280 <HAL_RCC_ClockConfig+0x148>
 8002260:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002264:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	647b      	str	r3, [r7, #68]	; 0x44
 800226e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002272:	643b      	str	r3, [r7, #64]	; 0x40
 8002274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800227c:	4b46      	ldr	r3, [pc, #280]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002284:	63ba      	str	r2, [r7, #56]	; 0x38
 8002286:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002288:	fa92 f2a2 	rbit	r2, r2
 800228c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800228e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002290:	fab2 f282 	clz	r2, r2
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	f042 0220 	orr.w	r2, r2, #32
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	f002 021f 	and.w	r2, r2, #31
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f202 	lsl.w	r2, r1, r2
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d13a      	bne.n	8002322 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0b2      	b.n	8002416 <HAL_RCC_ClockConfig+0x2de>
 80022b0:	2302      	movs	r3, #2
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	095b      	lsrs	r3, r3, #5
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d102      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x1a0>
 80022d2:	4b31      	ldr	r3, [pc, #196]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	e00d      	b.n	80022f4 <HAL_RCC_ClockConfig+0x1bc>
 80022d8:	2302      	movs	r3, #2
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
 80022e4:	2302      	movs	r3, #2
 80022e6:	623b      	str	r3, [r7, #32]
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	4b29      	ldr	r3, [pc, #164]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	2202      	movs	r2, #2
 80022f6:	61ba      	str	r2, [r7, #24]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	fa92 f2a2 	rbit	r2, r2
 80022fe:	617a      	str	r2, [r7, #20]
  return result;
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	fab2 f282 	clz	r2, r2
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	f042 0220 	orr.w	r2, r2, #32
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	f002 021f 	and.w	r2, r2, #31
 8002312:	2101      	movs	r1, #1
 8002314:	fa01 f202 	lsl.w	r2, r1, r2
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e079      	b.n	8002416 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f023 0203 	bic.w	r2, r3, #3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	491a      	ldr	r1, [pc, #104]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002334:	f7fe fc22 	bl	8000b7c <HAL_GetTick>
 8002338:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233a:	e00a      	b.n	8002352 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800233c:	f7fe fc1e 	bl	8000b7c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f241 3288 	movw	r2, #5000	; 0x1388
 800234a:	4293      	cmp	r3, r2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e061      	b.n	8002416 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_RCC_ClockConfig+0x260>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 020c 	and.w	r2, r3, #12
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	429a      	cmp	r2, r3
 8002362:	d1eb      	bne.n	800233c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_ClockConfig+0x25c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d214      	bcs.n	800239c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_RCC_ClockConfig+0x25c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 0207 	bic.w	r2, r3, #7
 800237a:	4906      	ldr	r1, [pc, #24]	; (8002394 <HAL_RCC_ClockConfig+0x25c>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <HAL_RCC_ClockConfig+0x25c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d005      	beq.n	800239c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e040      	b.n	8002416 <HAL_RCC_ClockConfig+0x2de>
 8002394:	40022000 	.word	0x40022000
 8002398:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCC_ClockConfig+0x2e8>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	491a      	ldr	r1, [pc, #104]	; (8002420 <HAL_RCC_ClockConfig+0x2e8>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023c6:	4b16      	ldr	r3, [pc, #88]	; (8002420 <HAL_RCC_ClockConfig+0x2e8>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4912      	ldr	r1, [pc, #72]	; (8002420 <HAL_RCC_ClockConfig+0x2e8>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023da:	f000 f829 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80023de:	4601      	mov	r1, r0
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <HAL_RCC_ClockConfig+0x2e8>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e8:	22f0      	movs	r2, #240	; 0xf0
 80023ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	fa92 f2a2 	rbit	r2, r2
 80023f2:	60fa      	str	r2, [r7, #12]
  return result;
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	fab2 f282 	clz	r2, r2
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	40d3      	lsrs	r3, r2
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <HAL_RCC_ClockConfig+0x2ec>)
 8002400:	5cd3      	ldrb	r3, [r2, r3]
 8002402:	fa21 f303 	lsr.w	r3, r1, r3
 8002406:	4a08      	ldr	r2, [pc, #32]	; (8002428 <HAL_RCC_ClockConfig+0x2f0>)
 8002408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <HAL_RCC_ClockConfig+0x2f4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fb70 	bl	8000af4 <HAL_InitTick>
  
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3778      	adds	r7, #120	; 0x78
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	08002d60 	.word	0x08002d60
 8002428:	200003f8 	.word	0x200003f8
 800242c:	200003fc 	.word	0x200003fc

08002430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b08b      	sub	sp, #44	; 0x2c
 8002434:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800244a:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b04      	cmp	r3, #4
 8002458:	d002      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x30>
 800245a:	2b08      	cmp	r3, #8
 800245c:	d003      	beq.n	8002466 <HAL_RCC_GetSysClockFreq+0x36>
 800245e:	e03c      	b.n	80024da <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002460:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002462:	623b      	str	r3, [r7, #32]
      break;
 8002464:	e03c      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800246c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002470:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	fa92 f2a2 	rbit	r2, r2
 8002478:	607a      	str	r2, [r7, #4]
  return result;
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	fab2 f282 	clz	r2, r2
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	40d3      	lsrs	r3, r2
 8002484:	4a1c      	ldr	r2, [pc, #112]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	220f      	movs	r2, #15
 8002494:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	fa92 f2a2 	rbit	r2, r2
 800249c:	60fa      	str	r2, [r7, #12]
  return result;
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	fab2 f282 	clz	r2, r2
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	40d3      	lsrs	r3, r2
 80024a8:	4a14      	ldr	r2, [pc, #80]	; (80024fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024b8:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
 80024c8:	e004      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	4a0c      	ldr	r2, [pc, #48]	; (8002500 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	623b      	str	r3, [r7, #32]
      break;
 80024d8:	e002      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024dc:	623b      	str	r3, [r7, #32]
      break;
 80024de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024e0:	6a3b      	ldr	r3, [r7, #32]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	372c      	adds	r7, #44	; 0x2c
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	007a1200 	.word	0x007a1200
 80024f8:	08002d78 	.word	0x08002d78
 80024fc:	08002d88 	.word	0x08002d88
 8002500:	003d0900 	.word	0x003d0900

08002504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_RCC_GetHCLKFreq+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	200003f8 	.word	0x200003f8

0800251c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002522:	f7ff ffef 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002526:	4601      	mov	r1, r0
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002530:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002534:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	fa92 f2a2 	rbit	r2, r2
 800253c:	603a      	str	r2, [r7, #0]
  return result;
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	fab2 f282 	clz	r2, r2
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	40d3      	lsrs	r3, r2
 8002548:	4a04      	ldr	r2, [pc, #16]	; (800255c <HAL_RCC_GetPCLK1Freq+0x40>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000
 800255c:	08002d70 	.word	0x08002d70

08002560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002566:	f7ff ffcd 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 800256a:	4601      	mov	r1, r0
 800256c:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002574:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002578:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	fa92 f2a2 	rbit	r2, r2
 8002580:	603a      	str	r2, [r7, #0]
  return result;
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	fab2 f282 	clz	r2, r2
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	40d3      	lsrs	r3, r2
 800258c:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800258e:	5cd3      	ldrb	r3, [r2, r3]
 8002590:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	08002d70 	.word	0x08002d70

080025a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e040      	b.n	8002638 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7fe f9d6 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2224      	movs	r2, #36	; 0x24
 80025d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0201 	bic.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f82c 	bl	8002640 <UART_SetConfig>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e022      	b.n	8002638 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f956 	bl	80028ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800260e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800261e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f9dd 	bl	80029f0 <UART_CheckIdleState>
 8002636:	4603      	mov	r3, r0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	4313      	orrs	r3, r2
 8002662:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4b8a      	ldr	r3, [pc, #552]	; (8002894 <UART_SetConfig+0x254>)
 800266c:	4013      	ands	r3, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	6979      	ldr	r1, [r7, #20]
 8002674:	430b      	orrs	r3, r1
 8002676:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a78      	ldr	r2, [pc, #480]	; (8002898 <UART_SetConfig+0x258>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d120      	bne.n	80026fe <UART_SetConfig+0xbe>
 80026bc:	4b77      	ldr	r3, [pc, #476]	; (800289c <UART_SetConfig+0x25c>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d817      	bhi.n	80026f8 <UART_SetConfig+0xb8>
 80026c8:	a201      	add	r2, pc, #4	; (adr r2, 80026d0 <UART_SetConfig+0x90>)
 80026ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ce:	bf00      	nop
 80026d0:	080026e1 	.word	0x080026e1
 80026d4:	080026ed 	.word	0x080026ed
 80026d8:	080026f3 	.word	0x080026f3
 80026dc:	080026e7 	.word	0x080026e7
 80026e0:	2300      	movs	r3, #0
 80026e2:	77fb      	strb	r3, [r7, #31]
 80026e4:	e01d      	b.n	8002722 <UART_SetConfig+0xe2>
 80026e6:	2302      	movs	r3, #2
 80026e8:	77fb      	strb	r3, [r7, #31]
 80026ea:	e01a      	b.n	8002722 <UART_SetConfig+0xe2>
 80026ec:	2304      	movs	r3, #4
 80026ee:	77fb      	strb	r3, [r7, #31]
 80026f0:	e017      	b.n	8002722 <UART_SetConfig+0xe2>
 80026f2:	2308      	movs	r3, #8
 80026f4:	77fb      	strb	r3, [r7, #31]
 80026f6:	e014      	b.n	8002722 <UART_SetConfig+0xe2>
 80026f8:	2310      	movs	r3, #16
 80026fa:	77fb      	strb	r3, [r7, #31]
 80026fc:	e011      	b.n	8002722 <UART_SetConfig+0xe2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a67      	ldr	r2, [pc, #412]	; (80028a0 <UART_SetConfig+0x260>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d102      	bne.n	800270e <UART_SetConfig+0xce>
 8002708:	2300      	movs	r3, #0
 800270a:	77fb      	strb	r3, [r7, #31]
 800270c:	e009      	b.n	8002722 <UART_SetConfig+0xe2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a64      	ldr	r2, [pc, #400]	; (80028a4 <UART_SetConfig+0x264>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d102      	bne.n	800271e <UART_SetConfig+0xde>
 8002718:	2300      	movs	r3, #0
 800271a:	77fb      	strb	r3, [r7, #31]
 800271c:	e001      	b.n	8002722 <UART_SetConfig+0xe2>
 800271e:	2310      	movs	r3, #16
 8002720:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800272a:	d15a      	bne.n	80027e2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800272c:	7ffb      	ldrb	r3, [r7, #31]
 800272e:	2b08      	cmp	r3, #8
 8002730:	d827      	bhi.n	8002782 <UART_SetConfig+0x142>
 8002732:	a201      	add	r2, pc, #4	; (adr r2, 8002738 <UART_SetConfig+0xf8>)
 8002734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002738:	0800275d 	.word	0x0800275d
 800273c:	08002765 	.word	0x08002765
 8002740:	0800276d 	.word	0x0800276d
 8002744:	08002783 	.word	0x08002783
 8002748:	08002773 	.word	0x08002773
 800274c:	08002783 	.word	0x08002783
 8002750:	08002783 	.word	0x08002783
 8002754:	08002783 	.word	0x08002783
 8002758:	0800277b 	.word	0x0800277b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800275c:	f7ff fede 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8002760:	61b8      	str	r0, [r7, #24]
        break;
 8002762:	e013      	b.n	800278c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002764:	f7ff fefc 	bl	8002560 <HAL_RCC_GetPCLK2Freq>
 8002768:	61b8      	str	r0, [r7, #24]
        break;
 800276a:	e00f      	b.n	800278c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800276c:	4b4e      	ldr	r3, [pc, #312]	; (80028a8 <UART_SetConfig+0x268>)
 800276e:	61bb      	str	r3, [r7, #24]
        break;
 8002770:	e00c      	b.n	800278c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002772:	f7ff fe5d 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8002776:	61b8      	str	r0, [r7, #24]
        break;
 8002778:	e008      	b.n	800278c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800277a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800277e:	61bb      	str	r3, [r7, #24]
        break;
 8002780:	e004      	b.n	800278c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	77bb      	strb	r3, [r7, #30]
        break;
 800278a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d074      	beq.n	800287c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	005a      	lsls	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	085b      	lsrs	r3, r3, #1
 800279c:	441a      	add	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	2b0f      	cmp	r3, #15
 80027ac:	d916      	bls.n	80027dc <UART_SetConfig+0x19c>
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b4:	d212      	bcs.n	80027dc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	f023 030f 	bic.w	r3, r3, #15
 80027be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	085b      	lsrs	r3, r3, #1
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	89fb      	ldrh	r3, [r7, #14]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	89fa      	ldrh	r2, [r7, #14]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	e04f      	b.n	800287c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	77bb      	strb	r3, [r7, #30]
 80027e0:	e04c      	b.n	800287c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027e2:	7ffb      	ldrb	r3, [r7, #31]
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d828      	bhi.n	800283a <UART_SetConfig+0x1fa>
 80027e8:	a201      	add	r2, pc, #4	; (adr r2, 80027f0 <UART_SetConfig+0x1b0>)
 80027ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ee:	bf00      	nop
 80027f0:	08002815 	.word	0x08002815
 80027f4:	0800281d 	.word	0x0800281d
 80027f8:	08002825 	.word	0x08002825
 80027fc:	0800283b 	.word	0x0800283b
 8002800:	0800282b 	.word	0x0800282b
 8002804:	0800283b 	.word	0x0800283b
 8002808:	0800283b 	.word	0x0800283b
 800280c:	0800283b 	.word	0x0800283b
 8002810:	08002833 	.word	0x08002833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002814:	f7ff fe82 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8002818:	61b8      	str	r0, [r7, #24]
        break;
 800281a:	e013      	b.n	8002844 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800281c:	f7ff fea0 	bl	8002560 <HAL_RCC_GetPCLK2Freq>
 8002820:	61b8      	str	r0, [r7, #24]
        break;
 8002822:	e00f      	b.n	8002844 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002824:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <UART_SetConfig+0x268>)
 8002826:	61bb      	str	r3, [r7, #24]
        break;
 8002828:	e00c      	b.n	8002844 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800282a:	f7ff fe01 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 800282e:	61b8      	str	r0, [r7, #24]
        break;
 8002830:	e008      	b.n	8002844 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002836:	61bb      	str	r3, [r7, #24]
        break;
 8002838:	e004      	b.n	8002844 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	77bb      	strb	r3, [r7, #30]
        break;
 8002842:	bf00      	nop
    }

    if (pclk != 0U)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d018      	beq.n	800287c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	085a      	lsrs	r2, r3, #1
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	441a      	add	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	2b0f      	cmp	r3, #15
 8002862:	d909      	bls.n	8002878 <UART_SetConfig+0x238>
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286a:	d205      	bcs.n	8002878 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	b29a      	uxth	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	e001      	b.n	800287c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002888:	7fbb      	ldrb	r3, [r7, #30]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	efff69f3 	.word	0xefff69f3
 8002898:	40013800 	.word	0x40013800
 800289c:	40021000 	.word	0x40021000
 80028a0:	40004400 	.word	0x40004400
 80028a4:	40004800 	.word	0x40004800
 80028a8:	007a1200 	.word	0x007a1200

080028ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01a      	beq.n	80029c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029aa:	d10a      	bne.n	80029c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	605a      	str	r2, [r3, #4]
  }
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b098      	sub	sp, #96	; 0x60
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a00:	f7fe f8bc 	bl	8000b7c <HAL_GetTick>
 8002a04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d12e      	bne.n	8002a72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f88c 	bl	8002b40 <UART_WaitOnFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d021      	beq.n	8002a72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a36:	e853 3f00 	ldrex	r3, [r3]
 8002a3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a42:	653b      	str	r3, [r7, #80]	; 0x50
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a4e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a54:	e841 2300 	strex	r3, r2, [r1]
 8002a58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e6      	bne.n	8002a2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e062      	b.n	8002b38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d149      	bne.n	8002b14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f856 	bl	8002b40 <UART_WaitOnFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d03c      	beq.n	8002b14 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	e853 3f00 	ldrex	r3, [r3]
 8002aa6:	623b      	str	r3, [r7, #32]
   return(result);
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ac0:	e841 2300 	strex	r3, r2, [r1]
 8002ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1e6      	bne.n	8002a9a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3308      	adds	r3, #8
 8002ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	e853 3f00 	ldrex	r3, [r3]
 8002ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	3308      	adds	r3, #8
 8002aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aec:	61fa      	str	r2, [r7, #28]
 8002aee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af0:	69b9      	ldr	r1, [r7, #24]
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	e841 2300 	strex	r3, r2, [r1]
 8002af8:	617b      	str	r3, [r7, #20]
   return(result);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1e5      	bne.n	8002acc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e011      	b.n	8002b38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3758      	adds	r7, #88	; 0x58
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b50:	e049      	b.n	8002be6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d045      	beq.n	8002be6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5a:	f7fe f80f 	bl	8000b7c <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d302      	bcc.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e048      	b.n	8002c06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d031      	beq.n	8002be6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d110      	bne.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2208      	movs	r2, #8
 8002b96:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f838 	bl	8002c0e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e029      	b.n	8002c06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bc0:	d111      	bne.n	8002be6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f81e 	bl	8002c0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e00f      	b.n	8002c06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69da      	ldr	r2, [r3, #28]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	bf0c      	ite	eq
 8002bf6:	2301      	moveq	r3, #1
 8002bf8:	2300      	movne	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d0a6      	beq.n	8002b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b095      	sub	sp, #84	; 0x54
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1e:	e853 3f00 	ldrex	r3, [r3]
 8002c22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c34:	643b      	str	r3, [r7, #64]	; 0x40
 8002c36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c3c:	e841 2300 	strex	r3, r2, [r1]
 8002c40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e6      	bne.n	8002c16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3308      	adds	r3, #8
 8002c4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	e853 3f00 	ldrex	r3, [r3]
 8002c56:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3308      	adds	r3, #8
 8002c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c70:	e841 2300 	strex	r3, r2, [r1]
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1e5      	bne.n	8002c48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d118      	bne.n	8002cb6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	e853 3f00 	ldrex	r3, [r3]
 8002c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f023 0310 	bic.w	r3, r3, #16
 8002c98:	647b      	str	r3, [r7, #68]	; 0x44
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca6:	6979      	ldr	r1, [r7, #20]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	e841 2300 	strex	r3, r2, [r1]
 8002cae:	613b      	str	r3, [r7, #16]
   return(result);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1e6      	bne.n	8002c84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002cca:	bf00      	nop
 8002ccc:	3754      	adds	r7, #84	; 0x54
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <__libc_init_array>:
 8002cd8:	b570      	push	{r4, r5, r6, lr}
 8002cda:	4d0d      	ldr	r5, [pc, #52]	; (8002d10 <__libc_init_array+0x38>)
 8002cdc:	4c0d      	ldr	r4, [pc, #52]	; (8002d14 <__libc_init_array+0x3c>)
 8002cde:	1b64      	subs	r4, r4, r5
 8002ce0:	10a4      	asrs	r4, r4, #2
 8002ce2:	2600      	movs	r6, #0
 8002ce4:	42a6      	cmp	r6, r4
 8002ce6:	d109      	bne.n	8002cfc <__libc_init_array+0x24>
 8002ce8:	4d0b      	ldr	r5, [pc, #44]	; (8002d18 <__libc_init_array+0x40>)
 8002cea:	4c0c      	ldr	r4, [pc, #48]	; (8002d1c <__libc_init_array+0x44>)
 8002cec:	f000 f820 	bl	8002d30 <_init>
 8002cf0:	1b64      	subs	r4, r4, r5
 8002cf2:	10a4      	asrs	r4, r4, #2
 8002cf4:	2600      	movs	r6, #0
 8002cf6:	42a6      	cmp	r6, r4
 8002cf8:	d105      	bne.n	8002d06 <__libc_init_array+0x2e>
 8002cfa:	bd70      	pop	{r4, r5, r6, pc}
 8002cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d00:	4798      	blx	r3
 8002d02:	3601      	adds	r6, #1
 8002d04:	e7ee      	b.n	8002ce4 <__libc_init_array+0xc>
 8002d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d0a:	4798      	blx	r3
 8002d0c:	3601      	adds	r6, #1
 8002d0e:	e7f2      	b.n	8002cf6 <__libc_init_array+0x1e>
 8002d10:	08002d98 	.word	0x08002d98
 8002d14:	08002d98 	.word	0x08002d98
 8002d18:	08002d98 	.word	0x08002d98
 8002d1c:	08002d9c 	.word	0x08002d9c

08002d20 <memset>:
 8002d20:	4402      	add	r2, r0
 8002d22:	4603      	mov	r3, r0
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d100      	bne.n	8002d2a <memset+0xa>
 8002d28:	4770      	bx	lr
 8002d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d2e:	e7f9      	b.n	8002d24 <memset+0x4>

08002d30 <_init>:
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d32:	bf00      	nop
 8002d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d36:	bc08      	pop	{r3}
 8002d38:	469e      	mov	lr, r3
 8002d3a:	4770      	bx	lr

08002d3c <_fini>:
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3e:	bf00      	nop
 8002d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d42:	bc08      	pop	{r3}
 8002d44:	469e      	mov	lr, r3
 8002d46:	4770      	bx	lr
