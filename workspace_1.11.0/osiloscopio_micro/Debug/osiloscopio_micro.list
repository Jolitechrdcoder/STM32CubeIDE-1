
osiloscopio_micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005bf0  08005bf0  00015bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c84  08005c84  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005c84  08005c84  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c84  08005c84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c84  08005c84  00015c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c88  08005c88  00015c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000070  08005cfc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08005cfc  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013684  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b7  00000000  00000000  00033724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00035ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00036f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d725  00000000  00000000  00037ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014414  00000000  00000000  000555cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aee86  00000000  00000000  000699e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118867  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048fc  00000000  00000000  001188b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bd8 	.word	0x08005bd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005bd8 	.word	0x08005bd8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_TIM_IC_CaptureCallback>:
int16_t count = 0;
int16_t position = 0;


	void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
	{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	counter = __HAL_TIM_GET_COUNTER(htim);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800028e:	4a0b      	ldr	r2, [pc, #44]	; (80002bc <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000290:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	b21a      	sxth	r2, r3
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <HAL_TIM_IC_CaptureCallback+0x40>)
 800029a:	801a      	strh	r2, [r3, #0]
	position = count/4;
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <HAL_TIM_IC_CaptureCallback+0x40>)
 800029e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	da00      	bge.n	80002a8 <HAL_TIM_IC_CaptureCallback+0x28>
 80002a6:	3303      	adds	r3, #3
 80002a8:	109b      	asrs	r3, r3, #2
 80002aa:	b21a      	sxth	r2, r3
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <HAL_TIM_IC_CaptureCallback+0x44>)
 80002ae:	801a      	strh	r2, [r3, #0]
	}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	200003ac 	.word	0x200003ac
 80002c0:	200003b0 	.word	0x200003b0
 80002c4:	200003b2 	.word	0x200003b2

080002c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c8:	b5b0      	push	{r4, r5, r7, lr}
 80002ca:	b08e      	sub	sp, #56	; 0x38
 80002cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ce:	f000 fef9 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d2:	f000 f8e3 	bl	800049c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d6:	f000 fac1 	bl	800085c <MX_GPIO_Init>
  MX_DMA_Init();
 80002da:	f000 fa99 	bl	8000810 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80002de:	f000 fa67 	bl	80007b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80002e2:	f000 f9c1 	bl	8000668 <MX_TIM2_Init>
  MX_ADC1_Init();
 80002e6:	f000 f939 	bl	800055c <MX_ADC1_Init>
  MX_DAC_Init();
 80002ea:	f000 f993 	bl	8000614 <MX_DAC_Init>
  MX_TIM15_Init();
 80002ee:	f000 fa0f 	bl	8000710 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  max_init(0x01);
 80002f2:	2001      	movs	r0, #1
 80002f4:	f000 fc64 	bl	8000bc0 <max_init>
  HAL_ADC_Start_DMA(&hadc1, &adc, 1);
 80002f8:	2201      	movs	r2, #1
 80002fa:	495e      	ldr	r1, [pc, #376]	; (8000474 <main+0x1ac>)
 80002fc:	485e      	ldr	r0, [pc, #376]	; (8000478 <main+0x1b0>)
 80002fe:	f001 f90f 	bl	8001520 <HAL_ADC_Start_DMA>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000302:	213c      	movs	r1, #60	; 0x3c
 8000304:	485d      	ldr	r0, [pc, #372]	; (800047c <main+0x1b4>)
 8000306:	f003 ff32 	bl	800416e <HAL_TIM_Encoder_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  while (1)
  	  {
  		 sprintf(valor, "%u\n",adc);
 800030a:	4b5a      	ldr	r3, [pc, #360]	; (8000474 <main+0x1ac>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	461a      	mov	r2, r3
 8000310:	495b      	ldr	r1, [pc, #364]	; (8000480 <main+0x1b8>)
 8000312:	485c      	ldr	r0, [pc, #368]	; (8000484 <main+0x1bc>)
 8000314:	f004 fff2 	bl	80052fc <siprintf>
  		  uint8_t length = strlen(valor);
 8000318:	485a      	ldr	r0, [pc, #360]	; (8000484 <main+0x1bc>)
 800031a:	f7ff ff59 	bl	80001d0 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  		  HAL_UART_Transmit(&huart2, (uint8_t*)valor,length, 100);
 8000324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000328:	b29a      	uxth	r2, r3
 800032a:	2364      	movs	r3, #100	; 0x64
 800032c:	4955      	ldr	r1, [pc, #340]	; (8000484 <main+0x1bc>)
 800032e:	4856      	ldr	r0, [pc, #344]	; (8000488 <main+0x1c0>)
 8000330:	f004 fbdc 	bl	8004aec <HAL_UART_Transmit>

  	  for (int a = 0; a <= 8; a++){
 8000334:	2300      	movs	r3, #0
 8000336:	637b      	str	r3, [r7, #52]	; 0x34
 8000338:	e096      	b.n	8000468 <main+0x1a0>
		setled(0, a-1, 1);
 800033a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800033c:	b2db      	uxtb	r3, r3
 800033e:	3b01      	subs	r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	2201      	movs	r2, #1
 8000344:	4619      	mov	r1, r3
 8000346:	2000      	movs	r0, #0
 8000348:	f000 fb52 	bl	80009f0 <setled>
		HAL_Delay(1000/count);
 800034c:	4b4f      	ldr	r3, [pc, #316]	; (800048c <main+0x1c4>)
 800034e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000352:	461a      	mov	r2, r3
 8000354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000358:	fb93 f3f2 	sdiv	r3, r3, r2
 800035c:	4618      	mov	r0, r3
 800035e:	f000 ff17 	bl	8001190 <HAL_Delay>
		max_clear();
 8000362:	f000 fbff 	bl	8000b64 <max_clear>
		if(a >= 8){
 8000366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000368:	2b07      	cmp	r3, #7
 800036a:	dd03      	ble.n	8000374 <main+0xac>
			a = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	637b      	str	r3, [r7, #52]	; 0x34
	max_clear();
 8000370:	f000 fbf8 	bl	8000b64 <max_clear>
		}
  		int rangos[] = {0, 512, 1024, 1536, 2048, 2560, 3072, 3584, 4096};
 8000374:	4b46      	ldr	r3, [pc, #280]	; (8000490 <main+0x1c8>)
 8000376:	463c      	mov	r4, r7
 8000378:	461d      	mov	r5, r3
 800037a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800037c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800037e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000382:	682b      	ldr	r3, [r5, #0]
 8000384:	6023      	str	r3, [r4, #0]

  		for (int i = 0; i < 8; i++) {
 8000386:	2300      	movs	r3, #0
 8000388:	633b      	str	r3, [r7, #48]	; 0x30
 800038a:	e02c      	b.n	80003e6 <main+0x11e>
  		    if (adc >= rangos[i] && adc <= rangos[i+1]) {
 800038c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	3338      	adds	r3, #56	; 0x38
 8000392:	443b      	add	r3, r7
 8000394:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000398:	461a      	mov	r2, r3
 800039a:	4b36      	ldr	r3, [pc, #216]	; (8000474 <main+0x1ac>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d815      	bhi.n	80003ce <main+0x106>
 80003a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003a4:	3301      	adds	r3, #1
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	3338      	adds	r3, #56	; 0x38
 80003aa:	443b      	add	r3, r7
 80003ac:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80003b0:	461a      	mov	r2, r3
 80003b2:	4b30      	ldr	r3, [pc, #192]	; (8000474 <main+0x1ac>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d309      	bcc.n	80003ce <main+0x106>
  		        encendido[i][onda] = 1;
 80003ba:	4b36      	ldr	r3, [pc, #216]	; (8000494 <main+0x1cc>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4936      	ldr	r1, [pc, #216]	; (8000498 <main+0x1d0>)
 80003c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80003c2:	00d2      	lsls	r2, r2, #3
 80003c4:	4413      	add	r3, r2
 80003c6:	2201      	movs	r2, #1
 80003c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80003cc:	e008      	b.n	80003e0 <main+0x118>
  		    } else {
  		        encendido[i][onda] = 0;
 80003ce:	4b31      	ldr	r3, [pc, #196]	; (8000494 <main+0x1cc>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4931      	ldr	r1, [pc, #196]	; (8000498 <main+0x1d0>)
 80003d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80003d6:	00d2      	lsls	r2, r2, #3
 80003d8:	4413      	add	r3, r2
 80003da:	2200      	movs	r2, #0
 80003dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		for (int i = 0; i < 8; i++) {
 80003e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003e2:	3301      	adds	r3, #1
 80003e4:	633b      	str	r3, [r7, #48]	; 0x30
 80003e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003e8:	2b07      	cmp	r3, #7
 80003ea:	ddcf      	ble.n	800038c <main+0xc4>
  		    }
  		}

  		for (int b = 0; b < 8; b++) {
 80003ec:	2300      	movs	r3, #0
 80003ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003f0:	e025      	b.n	800043e <main+0x176>
  		    for (int i = 0; i < 8; i++) {
 80003f2:	2300      	movs	r3, #0
 80003f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80003f6:	e01c      	b.n	8000432 <main+0x16a>
  		        if (encendido[i][b] == 1) {
 80003f8:	4927      	ldr	r1, [pc, #156]	; (8000498 <main+0x1d0>)
 80003fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003fc:	00da      	lsls	r2, r3, #3
 80003fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000400:	4413      	add	r3, r2
 8000402:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d108      	bne.n	800041c <main+0x154>
  		            setled(i, b, 1);
 800040a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800040c:	b2db      	uxtb	r3, r3
 800040e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000410:	b2d1      	uxtb	r1, r2
 8000412:	2201      	movs	r2, #1
 8000414:	4618      	mov	r0, r3
 8000416:	f000 faeb 	bl	80009f0 <setled>
 800041a:	e007      	b.n	800042c <main+0x164>
  		        } else {
  		            setled(i, b, 0);
 800041c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800041e:	b2db      	uxtb	r3, r3
 8000420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000422:	b2d1      	uxtb	r1, r2
 8000424:	2200      	movs	r2, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f000 fae2 	bl	80009f0 <setled>
  		    for (int i = 0; i < 8; i++) {
 800042c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800042e:	3301      	adds	r3, #1
 8000430:	62bb      	str	r3, [r7, #40]	; 0x28
 8000432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000434:	2b07      	cmp	r3, #7
 8000436:	dddf      	ble.n	80003f8 <main+0x130>
  		for (int b = 0; b < 8; b++) {
 8000438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800043a:	3301      	adds	r3, #1
 800043c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800043e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000440:	2b07      	cmp	r3, #7
 8000442:	ddd6      	ble.n	80003f2 <main+0x12a>
  		        }
  		    }
  		}

  		onda++;
 8000444:	4b13      	ldr	r3, [pc, #76]	; (8000494 <main+0x1cc>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	3301      	adds	r3, #1
 800044a:	4a12      	ldr	r2, [pc, #72]	; (8000494 <main+0x1cc>)
 800044c:	6013      	str	r3, [r2, #0]
  		HAL_Delay(30);
 800044e:	201e      	movs	r0, #30
 8000450:	f000 fe9e 	bl	8001190 <HAL_Delay>
  		if (onda > 7) {
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <main+0x1cc>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b07      	cmp	r3, #7
 800045a:	dd02      	ble.n	8000462 <main+0x19a>
  		    onda = 0;
 800045c:	4b0d      	ldr	r3, [pc, #52]	; (8000494 <main+0x1cc>)
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
  	  for (int a = 0; a <= 8; a++){
 8000462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000464:	3301      	adds	r3, #1
 8000466:	637b      	str	r3, [r7, #52]	; 0x34
 8000468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800046a:	2b08      	cmp	r3, #8
 800046c:	f77f af65 	ble.w	800033a <main+0x72>
  	  {
 8000470:	e74b      	b.n	800030a <main+0x42>
 8000472:	bf00      	nop
 8000474:	20000298 	.word	0x20000298
 8000478:	2000008c 	.word	0x2000008c
 800047c:	20000178 	.word	0x20000178
 8000480:	08005bf0 	.word	0x08005bf0
 8000484:	2000029c 	.word	0x2000029c
 8000488:	20000210 	.word	0x20000210
 800048c:	200003b0 	.word	0x200003b0
 8000490:	08005bf4 	.word	0x08005bf4
 8000494:	200003a8 	.word	0x200003a8
 8000498:	200002a8 	.word	0x200002a8

0800049c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b09c      	sub	sp, #112	; 0x70
 80004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004a6:	2228      	movs	r2, #40	; 0x28
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f004 ff1e 	bl	80052ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c0:	463b      	mov	r3, r7
 80004c2:	2234      	movs	r2, #52	; 0x34
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f004 ff10 	bl	80052ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004cc:	2301      	movs	r3, #1
 80004ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004d6:	2300      	movs	r3, #0
 80004d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004da:	2301      	movs	r3, #1
 80004dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004de:	2302      	movs	r3, #2
 80004e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 f938 	bl	8002768 <HAL_RCC_OscConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004fe:	f000 fa15 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000502:	230f      	movs	r3, #15
 8000504:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000506:	2302      	movs	r3, #2
 8000508:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800050e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000512:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000518:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800051c:	2102      	movs	r1, #2
 800051e:	4618      	mov	r0, r3
 8000520:	f003 f960 	bl	80037e4 <HAL_RCC_ClockConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800052a:	f000 f9ff 	bl	800092c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_ADC1;
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <SystemClock_Config+0xbc>)
 8000530:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000532:	2300      	movs	r3, #0
 8000534:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800053a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800053c:	463b      	mov	r3, r7
 800053e:	4618      	mov	r0, r3
 8000540:	f003 fb86 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800054a:	f000 f9ef 	bl	800092c <Error_Handler>
  }
}
 800054e:	bf00      	nop
 8000550:	3770      	adds	r7, #112	; 0x70
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	00040080 	.word	0x00040080

0800055c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000562:	463b      	mov	r3, r7
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
 8000570:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000572:	4b27      	ldr	r3, [pc, #156]	; (8000610 <MX_ADC1_Init+0xb4>)
 8000574:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000578:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800057a:	4b25      	ldr	r3, [pc, #148]	; (8000610 <MX_ADC1_Init+0xb4>)
 800057c:	2200      	movs	r2, #0
 800057e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000580:	4b23      	ldr	r3, [pc, #140]	; (8000610 <MX_ADC1_Init+0xb4>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000586:	4b22      	ldr	r3, [pc, #136]	; (8000610 <MX_ADC1_Init+0xb4>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <MX_ADC1_Init+0xb4>)
 800058e:	2201      	movs	r2, #1
 8000590:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000592:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <MX_ADC1_Init+0xb4>)
 8000594:	2200      	movs	r2, #0
 8000596:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800059a:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <MX_ADC1_Init+0xb4>)
 800059c:	2200      	movs	r2, #0
 800059e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a0:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <MX_ADC1_Init+0xb4>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a6:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <MX_ADC1_Init+0xb4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <MX_ADC1_Init+0xb4>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <MX_ADC1_Init+0xb4>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <MX_ADC1_Init+0xb4>)
 80005bc:	2204      	movs	r2, #4
 80005be:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <MX_ADC1_Init+0xb4>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_ADC1_Init+0xb4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005cc:	4810      	ldr	r0, [pc, #64]	; (8000610 <MX_ADC1_Init+0xb4>)
 80005ce:	f000 fe21 	bl	8001214 <HAL_ADC_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80005d8:	f000 f9a8 	bl	800092c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005dc:	2301      	movs	r3, #1
 80005de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005e0:	2301      	movs	r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80005e8:	2307      	movs	r3, #7
 80005ea:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f4:	463b      	mov	r3, r7
 80005f6:	4619      	mov	r1, r3
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_ADC1_Init+0xb4>)
 80005fa:	f001 f82d 	bl	8001658 <HAL_ADC_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000604:	f000 f992 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	2000008c 	.word	0x2000008c

08000614 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_DAC_Init+0x4c>)
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <MX_DAC_Init+0x50>)
 8000628:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800062a:	480d      	ldr	r0, [pc, #52]	; (8000660 <MX_DAC_Init+0x4c>)
 800062c:	f001 fd0b 	bl	8002046 <HAL_DAC_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8000636:	f000 f979 	bl	800092c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T15_TRGO;
 800063a:	231c      	movs	r3, #28
 800063c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_DAC_Init+0x4c>)
 800064a:	f001 fd1e 	bl	800208a <HAL_DAC_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000654:	f000 f96a 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000120 	.word	0x20000120
 8000664:	40007400 	.word	0x40007400

08000668 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	; 0x30
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2224      	movs	r2, #36	; 0x24
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f004 fe38 	bl	80052ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067c:	463b      	mov	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <MX_TIM2_Init+0xa4>)
 8000688:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800068c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_TIM2_Init+0xa4>)
 8000690:	2200      	movs	r2, #0
 8000692:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_TIM2_Init+0xa4>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_TIM2_Init+0xa4>)
 800069c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_TIM2_Init+0xa4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a8:	4b18      	ldr	r3, [pc, #96]	; (800070c <MX_TIM2_Init+0xa4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006ae:	2303      	movs	r3, #3
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80006b2:	2302      	movs	r3, #2
 80006b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006b6:	2301      	movs	r3, #1
 80006b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80006c2:	2302      	movs	r3, #2
 80006c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006c6:	2301      	movs	r3, #1
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	4619      	mov	r1, r3
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <MX_TIM2_Init+0xa4>)
 80006da:	f003 fca2 	bl	8004022 <HAL_TIM_Encoder_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80006e4:	f000 f922 	bl	800092c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e8:	2300      	movs	r3, #0
 80006ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_TIM2_Init+0xa4>)
 80006f6:	f004 f927 	bl	8004948 <HAL_TIMEx_MasterConfigSynchronization>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000700:	f000 f914 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	3730      	adds	r7, #48	; 0x30
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000178 	.word	0x20000178

08000710 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_TIM15_Init+0x98>)
 8000730:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <MX_TIM15_Init+0x9c>)
 8000732:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72-1;
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_TIM15_Init+0x98>)
 8000736:	2247      	movs	r2, #71	; 0x47
 8000738:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_TIM15_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100;
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_TIM15_Init+0x98>)
 8000742:	2264      	movs	r2, #100	; 0x64
 8000744:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_TIM15_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_TIM15_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_TIM15_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000758:	4813      	ldr	r0, [pc, #76]	; (80007a8 <MX_TIM15_Init+0x98>)
 800075a:	f003 fc0b 	bl	8003f74 <HAL_TIM_Base_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8000764:	f000 f8e2 	bl	800092c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4619      	mov	r1, r3
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <MX_TIM15_Init+0x98>)
 8000776:	f003 fec7 	bl	8004508 <HAL_TIM_ConfigClockSource>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8000780:	f000 f8d4 	bl	800092c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000784:	2320      	movs	r3, #32
 8000786:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_TIM15_Init+0x98>)
 8000792:	f004 f8d9 	bl	8004948 <HAL_TIMEx_MasterConfigSynchronization>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 800079c:	f000 f8c6 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200001c4 	.word	0x200001c4
 80007ac:	40014000 	.word	0x40014000

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <MX_USART2_UART_Init+0x5c>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007bc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007f4:	f004 f92c 	bl	8004a50 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f895 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000210 	.word	0x20000210
 800080c:	40004400 	.word	0x40004400

08000810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_DMA_Init+0x48>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <MX_DMA_Init+0x48>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6153      	str	r3, [r2, #20]
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <MX_DMA_Init+0x48>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	200b      	movs	r0, #11
 8000834:	f001 fbd1 	bl	8001fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000838:	200b      	movs	r0, #11
 800083a:	f001 fbea 	bl	8002012 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	200d      	movs	r0, #13
 8000844:	f001 fbc9 	bl	8001fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000848:	200d      	movs	r0, #13
 800084a:	f001 fbe2 	bl	8002012 <HAL_NVIC_EnableIRQ>

}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <MX_GPIO_Init+0xc4>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	4a2a      	ldr	r2, [pc, #168]	; (8000920 <MX_GPIO_Init+0xc4>)
 8000878:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800087c:	6153      	str	r3, [r2, #20]
 800087e:	4b28      	ldr	r3, [pc, #160]	; (8000920 <MX_GPIO_Init+0xc4>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800088a:	4b25      	ldr	r3, [pc, #148]	; (8000920 <MX_GPIO_Init+0xc4>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a24      	ldr	r2, [pc, #144]	; (8000920 <MX_GPIO_Init+0xc4>)
 8000890:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000894:	6153      	str	r3, [r2, #20]
 8000896:	4b22      	ldr	r3, [pc, #136]	; (8000920 <MX_GPIO_Init+0xc4>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <MX_GPIO_Init+0xc4>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a1e      	ldr	r2, [pc, #120]	; (8000920 <MX_GPIO_Init+0xc4>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	6153      	str	r3, [r2, #20]
 80008ae:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <MX_GPIO_Init+0xc4>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <MX_GPIO_Init+0xc4>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	4a18      	ldr	r2, [pc, #96]	; (8000920 <MX_GPIO_Init+0xc4>)
 80008c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c4:	6153      	str	r3, [r2, #20]
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_GPIO_Init+0xc4>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|LD2_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f242 4130 	movw	r1, #9264	; 0x2430
 80008d8:	4812      	ldr	r0, [pc, #72]	; (8000924 <MX_GPIO_Init+0xc8>)
 80008da:	f001 ff2d 	bl	8002738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : pb1_Pin */
  GPIO_InitStruct.Pin = pb1_Pin;
 80008de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pb1_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	480c      	ldr	r0, [pc, #48]	; (8000928 <MX_GPIO_Init+0xcc>)
 80008f6:	f001 fdad 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 LD2_Pin PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|LD2_Pin|GPIO_PIN_4|GPIO_PIN_5;
 80008fa:	f242 4330 	movw	r3, #9264	; 0x2430
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_GPIO_Init+0xc8>)
 8000914:	f001 fd9e 	bl	8002454 <HAL_GPIO_Init>

}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	; 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000
 8000924:	48000400 	.word	0x48000400
 8000928:	48000800 	.word	0x48000800

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	e7fe      	b.n	8000934 <Error_Handler+0x8>
	...

08000938 <write_byte>:
};



void write_byte (uint8_t byte)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	e01a      	b.n	800097e <write_byte+0x46>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094e:	4810      	ldr	r0, [pc, #64]	; (8000990 <write_byte+0x58>)
 8000950:	f001 fef2 	bl	8002738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800095a:	b2db      	uxtb	r3, r3
 800095c:	461a      	mov	r2, r3
 800095e:	2110      	movs	r1, #16
 8000960:	480b      	ldr	r0, [pc, #44]	; (8000990 <write_byte+0x58>)
 8000962:	f001 fee9 	bl	8002738 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000972:	4807      	ldr	r0, [pc, #28]	; (8000990 <write_byte+0x58>)
 8000974:	f001 fee0 	bl	8002738 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	3301      	adds	r3, #1
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2b07      	cmp	r3, #7
 8000982:	dde1      	ble.n	8000948 <write_byte+0x10>
	}
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	48000400 	.word	0x48000400

08000994 <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	460a      	mov	r2, r1
 800099e:	71fb      	strb	r3, [r7, #7]
 80009a0:	4613      	mov	r3, r2
 80009a2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 80009a4:	2200      	movs	r2, #0
 80009a6:	2120      	movs	r1, #32
 80009a8:	4810      	ldr	r0, [pc, #64]	; (80009ec <write_max_cmd+0x58>)
 80009aa:	f001 fec5 	bl	8002738 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	e00a      	b.n	80009ca <write_max_cmd+0x36>
	{
		write_byte (address);
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ffbe 	bl	8000938 <write_byte>
		write_byte (cmd); 
 80009bc:	79bb      	ldrb	r3, [r7, #6]
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ffba 	bl	8000938 <write_byte>
	for (int i=0;i<num; i++)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3301      	adds	r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	ddf1      	ble.n	80009b4 <write_max_cmd+0x20>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 80009d0:	2200      	movs	r2, #0
 80009d2:	2120      	movs	r1, #32
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <write_max_cmd+0x58>)
 80009d6:	f001 feaf 	bl	8002738 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 80009da:	2201      	movs	r2, #1
 80009dc:	2120      	movs	r1, #32
 80009de:	4803      	ldr	r0, [pc, #12]	; (80009ec <write_max_cmd+0x58>)
 80009e0:	f001 feaa 	bl	8002738 <HAL_GPIO_WritePin>
}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	48000400 	.word	0x48000400

080009f0 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
 80009fa:	460b      	mov	r3, r1
 80009fc:	71bb      	strb	r3, [r7, #6]
 80009fe:	4613      	mov	r3, r2
 8000a00:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 8000a02:	797b      	ldrb	r3, [r7, #5]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d00d      	beq.n	8000a24 <setled+0x34>
 8000a08:	79bb      	ldrb	r3, [r7, #6]
 8000a0a:	4a2c      	ldr	r2, [pc, #176]	; (8000abc <setled+0xcc>)
 8000a0c:	5cd1      	ldrb	r1, [r2, r3]
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2201      	movs	r2, #1
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	79bb      	ldrb	r3, [r7, #6]
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	b2d1      	uxtb	r1, r2
 8000a1e:	4a27      	ldr	r2, [pc, #156]	; (8000abc <setled+0xcc>)
 8000a20:	54d1      	strb	r1, [r2, r3]
 8000a22:	e00e      	b.n	8000a42 <setled+0x52>
 8000a24:	79bb      	ldrb	r3, [r7, #6]
 8000a26:	4a25      	ldr	r2, [pc, #148]	; (8000abc <setled+0xcc>)
 8000a28:	5cd1      	ldrb	r1, [r2, r3]
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	79bb      	ldrb	r3, [r7, #6]
 8000a3a:	400a      	ands	r2, r1
 8000a3c:	b2d1      	uxtb	r1, r2
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <setled+0xcc>)
 8000a40:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 8000a42:	79bb      	ldrb	r3, [r7, #6]
 8000a44:	08db      	lsrs	r3, r3, #3
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8000a4a:	79bb      	ldrb	r3, [r7, #6]
 8000a4c:	f003 0307 	and.w	r3, r3, #7
 8000a50:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 8000a52:	2200      	movs	r2, #0
 8000a54:	2120      	movs	r1, #32
 8000a56:	481a      	ldr	r0, [pc, #104]	; (8000ac0 <setled+0xd0>)
 8000a58:	f001 fe6e 	bl	8002738 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	e01b      	b.n	8000a9a <setled+0xaa>
	{
		if (i == (num-(n+1)))
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	425b      	negs	r3, r3
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d10d      	bne.n	8000a88 <setled+0x98>
		{
			write_byte (((c+1)));
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	3301      	adds	r3, #1
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff5f 	bl	8000938 <write_byte>
			write_byte (buffer[col]);
 8000a7a:	79bb      	ldrb	r3, [r7, #6]
 8000a7c:	4a0f      	ldr	r2, [pc, #60]	; (8000abc <setled+0xcc>)
 8000a7e:	5cd3      	ldrb	r3, [r2, r3]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff59 	bl	8000938 <write_byte>
 8000a86:	e005      	b.n	8000a94 <setled+0xa4>
		}
		else
		{
			write_byte (0);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff ff55 	bl	8000938 <write_byte>
			write_byte (0);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f7ff ff52 	bl	8000938 <write_byte>
	for (int i=0; i<num; i++) 
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	3301      	adds	r3, #1
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	dde0      	ble.n	8000a62 <setled+0x72>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2120      	movs	r1, #32
 8000aa4:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <setled+0xd0>)
 8000aa6:	f001 fe47 	bl	8002738 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2120      	movs	r1, #32
 8000aae:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <setled+0xd0>)
 8000ab0:	f001 fe42 	bl	8002738 <HAL_GPIO_WritePin>
}
 8000ab4:	bf00      	nop
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200003b4 	.word	0x200003b4
 8000ac0:	48000400 	.word	0x48000400

08000ac4 <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	460a      	mov	r2, r1
 8000ace:	71fb      	strb	r3, [r7, #7]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	08db      	lsrs	r3, r3, #3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 8000ae4:	79bb      	ldrb	r3, [r7, #6]
 8000ae6:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	e02d      	b.n	8000b4a <setrow+0x86>
	{
		if (i == ((n)))
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d120      	bne.n	8000b38 <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	3307      	adds	r3, #7
 8000afc:	61bb      	str	r3, [r7, #24]
 8000afe:	e015      	b.n	8000b2c <setrow+0x68>
			{
				bool b = value&0x80;
 8000b00:	79bb      	ldrb	r3, [r7, #6]
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf14      	ite	ne
 8000b0a:	2301      	movne	r3, #1
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	b2d1      	uxtb	r1, r2
 8000b18:	7bba      	ldrb	r2, [r7, #14]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff68 	bl	80009f0 <setled>
				value<<=1;
 8000b20:	79bb      	ldrb	r3, [r7, #6]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	dae4      	bge.n	8000b00 <setrow+0x3c>
 8000b36:	e005      	b.n	8000b44 <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff fefd 	bl	8000938 <write_byte>
			write_byte (0);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff fefa 	bl	8000938 <write_byte>
	for (int i=0; i<num; i++) 
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	3301      	adds	r3, #1
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	ddce      	ble.n	8000aee <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	4903      	ldr	r1, [pc, #12]	; (8000b60 <setrow+0x9c>)
 8000b54:	7bfa      	ldrb	r2, [r7, #15]
 8000b56:	54ca      	strb	r2, [r1, r3]
}
 8000b58:	bf00      	nop
 8000b5a:	3720      	adds	r7, #32
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000404 	.word	0x20000404

08000b64 <max_clear>:
}



void max_clear(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	e008      	b.n	8000b82 <max_clear+0x1e>
		setrow(i,0);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ffa4 	bl	8000ac4 <setrow>
	for (int i=0; i<num*8; i++) 
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b07      	cmp	r3, #7
 8000b86:	ddf3      	ble.n	8000b70 <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	e00c      	b.n	8000ba8 <max_clear+0x44>
	{
		buffer[i] = 0;
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <max_clear+0x54>)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 8000b98:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <max_clear+0x58>)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	2b4f      	cmp	r3, #79	; 0x4f
 8000bac:	ddef      	ble.n	8000b8e <max_clear+0x2a>
	}
}
 8000bae:	bf00      	nop
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	200003b4 	.word	0x200003b4
 8000bbc:	20000404 	.word	0x20000404

08000bc0 <max_init>:
}



void max_init (uint8_t brightness)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2009      	movs	r0, #9
 8000bce:	f7ff fee1 	bl	8000994 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8000bd2:	2107      	movs	r1, #7
 8000bd4:	200b      	movs	r0, #11
 8000bd6:	f7ff fedd 	bl	8000994 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 8000bda:	2101      	movs	r1, #1
 8000bdc:	200c      	movs	r0, #12
 8000bde:	f7ff fed9 	bl	8000994 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8000be2:	2100      	movs	r1, #0
 8000be4:	200f      	movs	r0, #15
 8000be6:	f7ff fed5 	bl	8000994 <write_max_cmd>
	
	max_clear ();
 8000bea:	f7ff ffbb 	bl	8000b64 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	200a      	movs	r0, #10
 8000bf4:	f7ff fece 	bl	8000994 <write_max_cmd>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_MspInit+0x44>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <HAL_MspInit+0x44>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6193      	str	r3, [r2, #24]
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <HAL_MspInit+0x44>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <HAL_MspInit+0x44>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <HAL_MspInit+0x44>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	61d3      	str	r3, [r2, #28]
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_MspInit+0x44>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c36:	2007      	movs	r0, #7
 8000c38:	f001 f9c4 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000

08000c48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c68:	d14c      	bne.n	8000d04 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <HAL_ADC_MspInit+0xc4>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	4a27      	ldr	r2, [pc, #156]	; (8000d0c <HAL_ADC_MspInit+0xc4>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c74:	6153      	str	r3, [r2, #20]
 8000c76:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <HAL_ADC_MspInit+0xc4>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <HAL_ADC_MspInit+0xc4>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	4a21      	ldr	r2, [pc, #132]	; (8000d0c <HAL_ADC_MspInit+0xc4>)
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	6153      	str	r3, [r2, #20]
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <HAL_ADC_MspInit+0xc4>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb0:	f001 fbd0 	bl	8002454 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_ADC_MspInit+0xc8>)
 8000cb6:	4a17      	ldr	r2, [pc, #92]	; (8000d14 <HAL_ADC_MspInit+0xcc>)
 8000cb8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_ADC_MspInit+0xc8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <HAL_ADC_MspInit+0xc8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_ADC_MspInit+0xc8>)
 8000cc8:	2280      	movs	r2, #128	; 0x80
 8000cca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_ADC_MspInit+0xc8>)
 8000cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_ADC_MspInit+0xc8>)
 8000cd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cda:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_ADC_MspInit+0xc8>)
 8000cde:	2220      	movs	r2, #32
 8000ce0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_ADC_MspInit+0xc8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <HAL_ADC_MspInit+0xc8>)
 8000cea:	f001 fa1b 	bl	8002124 <HAL_DMA_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000cf4:	f7ff fe1a 	bl	800092c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <HAL_ADC_MspInit+0xc8>)
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38
 8000cfe:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_ADC_MspInit+0xc8>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	200000dc 	.word	0x200000dc
 8000d14:	40020008 	.word	0x40020008

08000d18 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a2c      	ldr	r2, [pc, #176]	; (8000de8 <HAL_DAC_MspInit+0xd0>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d152      	bne.n	8000de0 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000d3a:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <HAL_DAC_MspInit+0xd4>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	4a2b      	ldr	r2, [pc, #172]	; (8000dec <HAL_DAC_MspInit+0xd4>)
 8000d40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d44:	61d3      	str	r3, [r2, #28]
 8000d46:	4b29      	ldr	r3, [pc, #164]	; (8000dec <HAL_DAC_MspInit+0xd4>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b26      	ldr	r3, [pc, #152]	; (8000dec <HAL_DAC_MspInit+0xd4>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	4a25      	ldr	r2, [pc, #148]	; (8000dec <HAL_DAC_MspInit+0xd4>)
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	6153      	str	r3, [r2, #20]
 8000d5e:	4b23      	ldr	r3, [pc, #140]	; (8000dec <HAL_DAC_MspInit+0xd4>)
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d6a:	2310      	movs	r3, #16
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f001 fb68 	bl	8002454 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <HAL_DAC_MspInit+0xd8>)
 8000d86:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <HAL_DAC_MspInit+0xdc>)
 8000d88:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d8a:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <HAL_DAC_MspInit+0xd8>)
 8000d8c:	2210      	movs	r2, #16
 8000d8e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <HAL_DAC_MspInit+0xd8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <HAL_DAC_MspInit+0xd8>)
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <HAL_DAC_MspInit+0xd8>)
 8000d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da2:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_DAC_MspInit+0xd8>)
 8000da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000daa:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000dac:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_DAC_MspInit+0xd8>)
 8000dae:	2220      	movs	r2, #32
 8000db0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_DAC_MspInit+0xd8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <HAL_DAC_MspInit+0xd8>)
 8000dba:	f001 f9b3 	bl	8002124 <HAL_DMA_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8000dc4:	f7ff fdb2 	bl	800092c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_DAC_MspInit+0xe0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_DAC_MspInit+0xe0>)
 8000dce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dd2:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_DAC_MspInit+0xd8>)
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <HAL_DAC_MspInit+0xd8>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000de0:	bf00      	nop
 8000de2:	3728      	adds	r7, #40	; 0x28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40007400 	.word	0x40007400
 8000dec:	40021000 	.word	0x40021000
 8000df0:	20000134 	.word	0x20000134
 8000df4:	40020030 	.word	0x40020030
 8000df8:	40010000 	.word	0x40010000

08000dfc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e1c:	d130      	bne.n	8000e80 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	61d3      	str	r3, [r2, #28]
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	6153      	str	r3, [r2, #20]
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000e4e:	2322      	movs	r3, #34	; 0x22
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f001 faf2 	bl	8002454 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	201c      	movs	r0, #28
 8000e76:	f001 f8b0 	bl	8001fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e7a:	201c      	movs	r0, #28
 8000e7c:	f001 f8c9 	bl	8002012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e80:	bf00      	nop
 8000e82:	3728      	adds	r7, #40	; 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_TIM_Base_MspInit+0x38>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d10b      	bne.n	8000eb6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea8:	6193      	str	r3, [r2, #24]
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <HAL_TIM_Base_MspInit+0x3c>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40014000 	.word	0x40014000
 8000ec8:	40021000 	.word	0x40021000

08000ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a17      	ldr	r2, [pc, #92]	; (8000f48 <HAL_UART_MspInit+0x7c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d128      	bne.n	8000f40 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <HAL_UART_MspInit+0x80>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	4a16      	ldr	r2, [pc, #88]	; (8000f4c <HAL_UART_MspInit+0x80>)
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	61d3      	str	r3, [r2, #28]
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <HAL_UART_MspInit+0x80>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_UART_MspInit+0x80>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <HAL_UART_MspInit+0x80>)
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	6153      	str	r3, [r2, #20]
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_UART_MspInit+0x80>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f1e:	230c      	movs	r3, #12
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f2e:	2307      	movs	r3, #7
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3c:	f001 fa8a 	bl	8002454 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f40:	bf00      	nop
 8000f42:	3728      	adds	r7, #40	; 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40004400 	.word	0x40004400
 8000f4c:	40021000 	.word	0x40021000

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <NMI_Handler+0x4>

08000f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <MemManage_Handler+0x4>

08000f62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9c:	f000 f8d8 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <DMA1_Channel1_IRQHandler+0x10>)
 8000faa:	f001 f961 	bl	8002270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000dc 	.word	0x200000dc

08000fb8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <DMA1_Channel3_IRQHandler+0x10>)
 8000fbe:	f001 f957 	bl	8002270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000134 	.word	0x20000134

08000fcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <TIM2_IRQHandler+0x10>)
 8000fd2:	f003 f97a 	bl	80042ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000178 	.word	0x20000178

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f004 f942 	bl	8005298 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20004000 	.word	0x20004000
 8001040:	00000400 	.word	0x00000400
 8001044:	20000454 	.word	0x20000454
 8001048:	20000470 	.word	0x20000470

0800104c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001074:	f7ff ffea 	bl	800104c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <LoopForever+0x6>)
  ldr r1, =_edata
 800107a:	490d      	ldr	r1, [pc, #52]	; (80010b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <LoopForever+0xe>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001090:	4c0a      	ldr	r4, [pc, #40]	; (80010bc <LoopForever+0x16>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109e:	f004 f901 	bl	80052a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010a2:	f7ff f911 	bl	80002c8 <main>

080010a6 <LoopForever>:

LoopForever:
    b LoopForever
 80010a6:	e7fe      	b.n	80010a6 <LoopForever>
ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010a8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010b4:	08005c8c 	.word	0x08005c8c
  ldr r2, =_sbss
 80010b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010bc:	2000046c 	.word	0x2000046c

080010c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC1_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_Init+0x28>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_Init+0x28>)
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 ff75 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f808 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff fd8e 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000

080010f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 ff8d 	bl	800202e <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 ff55 	bl	8001fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000000 	.word	0x20000000
 8001148:	20000008 	.word	0x20000008
 800114c:	20000004 	.word	0x20000004

08001150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008
 8001174:	20000458 	.word	0x20000458

08001178 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;  
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000458 	.word	0x20000458

08001190 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff ffee 	bl	8001178 <HAL_GetTick>
 800119c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d005      	beq.n	80011b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_Delay+0x44>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011b6:	bf00      	nop
 80011b8:	f7ff ffde 	bl	8001178 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8f7      	bhi.n	80011b8 <HAL_Delay+0x28>
  {
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008

080011d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b09a      	sub	sp, #104	; 0x68
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001222:	2300      	movs	r3, #0
 8001224:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e169      	b.n	8001508 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	2b00      	cmp	r3, #0
 8001244:	d176      	bne.n	8001334 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	2b00      	cmp	r3, #0
 800124c:	d152      	bne.n	80012f4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fced 	bl	8000c48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d13b      	bne.n	80012f4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 fd6b 	bl	8001d58 <ADC_Disable>
 8001282:	4603      	mov	r3, r0
 8001284:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2b00      	cmp	r3, #0
 8001292:	d12f      	bne.n	80012f4 <HAL_ADC_Init+0xe0>
 8001294:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001298:	2b00      	cmp	r3, #0
 800129a:	d12b      	bne.n	80012f4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012a4:	f023 0302 	bic.w	r3, r3, #2
 80012a8:	f043 0202 	orr.w	r2, r3, #2
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012be:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012ce:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012d0:	4b8f      	ldr	r3, [pc, #572]	; (8001510 <HAL_ADC_Init+0x2fc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a8f      	ldr	r2, [pc, #572]	; (8001514 <HAL_ADC_Init+0x300>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	0c9a      	lsrs	r2, r3, #18
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012e6:	e002      	b.n	80012ee <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f9      	bne.n	80012e8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800130c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001310:	d110      	bne.n	8001334 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f023 0312 	bic.w	r3, r3, #18
 800131a:	f043 0210 	orr.w	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f043 0201 	orr.w	r2, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	2b00      	cmp	r3, #0
 800133e:	f040 80d6 	bne.w	80014ee <HAL_ADC_Init+0x2da>
 8001342:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001346:	2b00      	cmp	r3, #0
 8001348:	f040 80d1 	bne.w	80014ee <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001356:	2b00      	cmp	r3, #0
 8001358:	f040 80c9 	bne.w	80014ee <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001364:	f043 0202 	orr.w	r2, r3, #2
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800136c:	4b6a      	ldr	r3, [pc, #424]	; (8001518 <HAL_ADC_Init+0x304>)
 800136e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	2b01      	cmp	r3, #1
 8001380:	d108      	bne.n	8001394 <HAL_ADC_Init+0x180>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_ADC_Init+0x180>
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <HAL_ADC_Init+0x182>
 8001394:	2300      	movs	r3, #0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d11c      	bne.n	80013d4 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800139a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800139c:	2b00      	cmp	r3, #0
 800139e:	d010      	beq.n	80013c2 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d107      	bne.n	80013bc <HAL_ADC_Init+0x1a8>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_ADC_Init+0x1a8>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <HAL_ADC_Init+0x1aa>
 80013bc:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d108      	bne.n	80013d4 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80013c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	431a      	orrs	r2, r3
 80013d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013d2:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7e5b      	ldrb	r3, [r3, #25]
 80013d8:	035b      	lsls	r3, r3, #13
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013de:	2a01      	cmp	r2, #1
 80013e0:	d002      	beq.n	80013e8 <HAL_ADC_Init+0x1d4>
 80013e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013e6:	e000      	b.n	80013ea <HAL_ADC_Init+0x1d6>
 80013e8:	2200      	movs	r2, #0
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013fa:	4313      	orrs	r3, r2
 80013fc:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d11b      	bne.n	8001440 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7e5b      	ldrb	r3, [r3, #25]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d109      	bne.n	8001424 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	3b01      	subs	r3, #1
 8001416:	045a      	lsls	r2, r3, #17
 8001418:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800141a:	4313      	orrs	r3, r2
 800141c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001420:	663b      	str	r3, [r7, #96]	; 0x60
 8001422:	e00d      	b.n	8001440 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800142c:	f043 0220 	orr.w	r2, r3, #32
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001438:	f043 0201 	orr.w	r2, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	2b01      	cmp	r3, #1
 8001446:	d007      	beq.n	8001458 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	4313      	orrs	r3, r2
 8001452:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001454:	4313      	orrs	r3, r2
 8001456:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b00      	cmp	r3, #0
 8001464:	d114      	bne.n	8001490 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001474:	f023 0302 	bic.w	r3, r3, #2
 8001478:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7e1b      	ldrb	r3, [r3, #24]
 800147e:	039a      	lsls	r2, r3, #14
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4313      	orrs	r3, r2
 800148a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800148c:	4313      	orrs	r3, r2
 800148e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <HAL_ADC_Init+0x308>)
 8001498:	4013      	ands	r3, r2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80014a0:	430b      	orrs	r3, r1
 80014a2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d10c      	bne.n	80014c6 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f023 010f 	bic.w	r1, r3, #15
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	1e5a      	subs	r2, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30
 80014c4:	e007      	b.n	80014d6 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 020f 	bic.w	r2, r2, #15
 80014d4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f023 0303 	bic.w	r3, r3, #3
 80014e4:	f043 0201 	orr.w	r2, r3, #1
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40
 80014ec:	e00a      	b.n	8001504 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f023 0312 	bic.w	r3, r3, #18
 80014f6:	f043 0210 	orr.w	r2, r3, #16
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80014fe:	2301      	movs	r3, #1
 8001500:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001504:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001508:	4618      	mov	r0, r3
 800150a:	3768      	adds	r7, #104	; 0x68
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000000 	.word	0x20000000
 8001514:	431bde83 	.word	0x431bde83
 8001518:	50000300 	.word	0x50000300
 800151c:	fff0c007 	.word	0xfff0c007

08001520 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	2b00      	cmp	r3, #0
 800153c:	d17e      	bne.n	800163c <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_ADC_Start_DMA+0x2c>
 8001548:	2302      	movs	r3, #2
 800154a:	e07a      	b.n	8001642 <HAL_ADC_Start_DMA+0x122>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 fb9b 	bl	8001c90 <ADC_Enable>
 800155a:	4603      	mov	r3, r0
 800155c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800155e:	7dfb      	ldrb	r3, [r7, #23]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d166      	bne.n	8001632 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800156c:	f023 0301 	bic.w	r3, r3, #1
 8001570:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800159a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ae:	d106      	bne.n	80015be <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	f023 0206 	bic.w	r2, r3, #6
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	645a      	str	r2, [r3, #68]	; 0x44
 80015bc:	e002      	b.n	80015c4 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d0:	4a1e      	ldr	r2, [pc, #120]	; (800164c <HAL_ADC_Start_DMA+0x12c>)
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d8:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <HAL_ADC_Start_DMA+0x130>)
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e0:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <HAL_ADC_Start_DMA+0x134>)
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	221c      	movs	r2, #28
 80015ea:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0210 	orr.w	r2, r2, #16
 80015fa:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0201 	orr.w	r2, r2, #1
 800160a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	3340      	adds	r3, #64	; 0x40
 8001616:	4619      	mov	r1, r3
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f000 fdc9 	bl	80021b2 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0204 	orr.w	r2, r2, #4
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	e006      	b.n	8001640 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800163a:	e001      	b.n	8001640 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800163c:	2302      	movs	r3, #2
 800163e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001640:	7dfb      	ldrb	r3, [r7, #23]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	08001bc5 	.word	0x08001bc5
 8001650:	08001c3f 	.word	0x08001c3f
 8001654:	08001c5b 	.word	0x08001c5b

08001658 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001658:	b480      	push	{r7}
 800165a:	b09b      	sub	sp, #108	; 0x6c
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_ADC_ConfigChannel+0x22>
 8001676:	2302      	movs	r3, #2
 8001678:	e299      	b.n	8001bae <HAL_ADC_ConfigChannel+0x556>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	f040 827d 	bne.w	8001b8c <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b04      	cmp	r3, #4
 8001698:	d81c      	bhi.n	80016d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	461a      	mov	r2, r3
 80016ae:	231f      	movs	r3, #31
 80016b0:	4093      	lsls	r3, r2
 80016b2:	43db      	mvns	r3, r3
 80016b4:	4019      	ands	r1, r3
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	631a      	str	r2, [r3, #48]	; 0x30
 80016d2:	e063      	b.n	800179c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b09      	cmp	r3, #9
 80016da:	d81e      	bhi.n	800171a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	3b1e      	subs	r3, #30
 80016f0:	221f      	movs	r2, #31
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	4019      	ands	r1, r3
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	3b1e      	subs	r3, #30
 800170c:	fa00 f203 	lsl.w	r2, r0, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	635a      	str	r2, [r3, #52]	; 0x34
 8001718:	e040      	b.n	800179c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b0e      	cmp	r3, #14
 8001720:	d81e      	bhi.n	8001760 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	3b3c      	subs	r3, #60	; 0x3c
 8001736:	221f      	movs	r2, #31
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	4019      	ands	r1, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	3b3c      	subs	r3, #60	; 0x3c
 8001752:	fa00 f203 	lsl.w	r2, r0, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	639a      	str	r2, [r3, #56]	; 0x38
 800175e:	e01d      	b.n	800179c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	3b5a      	subs	r3, #90	; 0x5a
 8001774:	221f      	movs	r2, #31
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	4019      	ands	r1, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	3b5a      	subs	r3, #90	; 0x5a
 8001790:	fa00 f203 	lsl.w	r2, r0, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f040 80e5 	bne.w	8001976 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b09      	cmp	r3, #9
 80017b2:	d91c      	bls.n	80017ee <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6999      	ldr	r1, [r3, #24]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4613      	mov	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4413      	add	r3, r2
 80017c4:	3b1e      	subs	r3, #30
 80017c6:	2207      	movs	r2, #7
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4019      	ands	r1, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	6898      	ldr	r0, [r3, #8]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	3b1e      	subs	r3, #30
 80017e0:	fa00 f203 	lsl.w	r2, r0, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	619a      	str	r2, [r3, #24]
 80017ec:	e019      	b.n	8001822 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6959      	ldr	r1, [r3, #20]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	2207      	movs	r2, #7
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	4019      	ands	r1, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6898      	ldr	r0, [r3, #8]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	fa00 f203 	lsl.w	r2, r0, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	695a      	ldr	r2, [r3, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	08db      	lsrs	r3, r3, #3
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	3b01      	subs	r3, #1
 8001840:	2b03      	cmp	r3, #3
 8001842:	d84f      	bhi.n	80018e4 <HAL_ADC_ConfigChannel+0x28c>
 8001844:	a201      	add	r2, pc, #4	; (adr r2, 800184c <HAL_ADC_ConfigChannel+0x1f4>)
 8001846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184a:	bf00      	nop
 800184c:	0800185d 	.word	0x0800185d
 8001850:	0800187f 	.word	0x0800187f
 8001854:	080018a1 	.word	0x080018a1
 8001858:	080018c3 	.word	0x080018c3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001862:	4b99      	ldr	r3, [pc, #612]	; (8001ac8 <HAL_ADC_ConfigChannel+0x470>)
 8001864:	4013      	ands	r3, r2
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	0691      	lsls	r1, r2, #26
 800186c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800186e:	430a      	orrs	r2, r1
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800187a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800187c:	e07e      	b.n	800197c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001884:	4b90      	ldr	r3, [pc, #576]	; (8001ac8 <HAL_ADC_ConfigChannel+0x470>)
 8001886:	4013      	ands	r3, r2
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	0691      	lsls	r1, r2, #26
 800188e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001890:	430a      	orrs	r2, r1
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800189c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800189e:	e06d      	b.n	800197c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018a6:	4b88      	ldr	r3, [pc, #544]	; (8001ac8 <HAL_ADC_ConfigChannel+0x470>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	0691      	lsls	r1, r2, #26
 80018b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018b2:	430a      	orrs	r2, r1
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018be:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018c0:	e05c      	b.n	800197c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018c8:	4b7f      	ldr	r3, [pc, #508]	; (8001ac8 <HAL_ADC_ConfigChannel+0x470>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	0691      	lsls	r1, r2, #26
 80018d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018d4:	430a      	orrs	r2, r1
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018e0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018e2:	e04b      	b.n	800197c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	069b      	lsls	r3, r3, #26
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d107      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001906:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800190e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	069b      	lsls	r3, r3, #26
 8001918:	429a      	cmp	r2, r3
 800191a:	d107      	bne.n	800192c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800192a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001932:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	069b      	lsls	r3, r3, #26
 800193c:	429a      	cmp	r2, r3
 800193e:	d107      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800194e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001956:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	069b      	lsls	r3, r3, #26
 8001960:	429a      	cmp	r2, r3
 8001962:	d10a      	bne.n	800197a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001972:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001974:	e001      	b.n	800197a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001976:	bf00      	nop
 8001978:	e000      	b.n	800197c <HAL_ADC_ConfigChannel+0x324>
      break;
 800197a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d108      	bne.n	800199c <HAL_ADC_ConfigChannel+0x344>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_ADC_ConfigChannel+0x344>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_ADC_ConfigChannel+0x346>
 800199c:	2300      	movs	r3, #0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f040 80ff 	bne.w	8001ba2 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d00f      	beq.n	80019cc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2201      	movs	r2, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	400a      	ands	r2, r1
 80019c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80019ca:	e049      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2201      	movs	r2, #1
 80019da:	409a      	lsls	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b09      	cmp	r3, #9
 80019ec:	d91c      	bls.n	8001a28 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6999      	ldr	r1, [r3, #24]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	3b1b      	subs	r3, #27
 8001a00:	2207      	movs	r2, #7
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	4019      	ands	r1, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	6898      	ldr	r0, [r3, #8]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	3b1b      	subs	r3, #27
 8001a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	619a      	str	r2, [r3, #24]
 8001a26:	e01b      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6959      	ldr	r1, [r3, #20]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	2207      	movs	r2, #7
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4019      	ands	r1, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	6898      	ldr	r0, [r3, #8]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	fa00 f203 	lsl.w	r2, r0, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_ADC_ConfigChannel+0x474>)
 8001a62:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b10      	cmp	r3, #16
 8001a6a:	d105      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d014      	beq.n	8001aa2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a7c:	2b11      	cmp	r3, #17
 8001a7e:	d105      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00a      	beq.n	8001aa2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a90:	2b12      	cmp	r3, #18
 8001a92:	f040 8086 	bne.w	8001ba2 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d17f      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d10d      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x478>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d106      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x478>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e005      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x47a>
 8001ac6:	bf00      	nop
 8001ac8:	83fff000 	.word	0x83fff000
 8001acc:	50000300 	.word	0x50000300
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d150      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ad6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d010      	beq.n	8001afe <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d107      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x4a0>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d101      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x4a0>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <HAL_ADC_ConfigChannel+0x4a2>
 8001af8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d13c      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b10      	cmp	r3, #16
 8001b04:	d11d      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x4ea>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b0e:	d118      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b1a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b1c:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <HAL_ADC_ConfigChannel+0x564>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a27      	ldr	r2, [pc, #156]	; (8001bc0 <HAL_ADC_ConfigChannel+0x568>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	0c9a      	lsrs	r2, r3, #18
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b32:	e002      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f9      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b40:	e02e      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b11      	cmp	r3, #17
 8001b48:	d10b      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x50a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b52:	d106      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b5e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b60:	e01e      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b12      	cmp	r3, #18
 8001b68:	d11a      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b74:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b76:	e013      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f043 0220 	orr.w	r2, r3, #32
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b8a:	e00a      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f043 0220 	orr.w	r2, r3, #32
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b9e:	e000      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ba0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001baa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	376c      	adds	r7, #108	; 0x6c
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	431bde83 	.word	0x431bde83

08001bc4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d126      	bne.n	8001c2c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d115      	bne.n	8001c24 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d111      	bne.n	8001c24 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d105      	bne.n	8001c24 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f7ff fad7 	bl	80011d8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001c2a:	e004      	b.n	8001c36 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	4798      	blx	r3
}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f7ff facd 	bl	80011ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c78:	f043 0204 	orr.w	r2, r3, #4
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f7ff fabd 	bl	8001200 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d108      	bne.n	8001cbc <ADC_Enable+0x2c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <ADC_Enable+0x2c>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <ADC_Enable+0x2e>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d143      	bne.n	8001d4a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <ADC_Enable+0xc4>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00d      	beq.n	8001cec <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	f043 0210 	orr.w	r2, r3, #16
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e02f      	b.n	8001d4c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001cfc:	f7ff fa3c 	bl	8001178 <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d02:	e01b      	b.n	8001d3c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d04:	f7ff fa38 	bl	8001178 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d914      	bls.n	8001d3c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d00d      	beq.n	8001d3c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	f043 0210 	orr.w	r2, r3, #16
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	f043 0201 	orr.w	r2, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e007      	b.n	8001d4c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d1dc      	bne.n	8001d04 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	8000003f 	.word	0x8000003f

08001d58 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d108      	bne.n	8001d84 <ADC_Disable+0x2c>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <ADC_Disable+0x2c>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <ADC_Disable+0x2e>
 8001d84:	2300      	movs	r3, #0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d047      	beq.n	8001e1a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 030d 	and.w	r3, r3, #13
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d10f      	bne.n	8001db8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0202 	orr.w	r2, r2, #2
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2203      	movs	r2, #3
 8001dae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001db0:	f7ff f9e2 	bl	8001178 <HAL_GetTick>
 8001db4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001db6:	e029      	b.n	8001e0c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	f043 0210 	orr.w	r2, r3, #16
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e023      	b.n	8001e1c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001dd4:	f7ff f9d0 	bl	8001178 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d914      	bls.n	8001e0c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d10d      	bne.n	8001e0c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	f043 0210 	orr.w	r2, r3, #16
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	f043 0201 	orr.w	r2, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e007      	b.n	8001e1c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d0dc      	beq.n	8001dd4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e40:	4013      	ands	r3, r2
 8001e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e56:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	60d3      	str	r3, [r2, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <__NVIC_GetPriorityGrouping+0x18>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	f003 0307 	and.w	r3, r3, #7
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	db0b      	blt.n	8001eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	f003 021f 	and.w	r2, r3, #31
 8001ea0:	4907      	ldr	r1, [pc, #28]	; (8001ec0 <__NVIC_EnableIRQ+0x38>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000e100 	.word	0xe000e100

08001ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db0a      	blt.n	8001eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	490c      	ldr	r1, [pc, #48]	; (8001f10 <__NVIC_SetPriority+0x4c>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	0112      	lsls	r2, r2, #4
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eec:	e00a      	b.n	8001f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4908      	ldr	r1, [pc, #32]	; (8001f14 <__NVIC_SetPriority+0x50>)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3b04      	subs	r3, #4
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	440b      	add	r3, r1
 8001f02:	761a      	strb	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000e100 	.word	0xe000e100
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f1c3 0307 	rsb	r3, r3, #7
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	bf28      	it	cs
 8001f36:	2304      	movcs	r3, #4
 8001f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d902      	bls.n	8001f48 <NVIC_EncodePriority+0x30>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3b03      	subs	r3, #3
 8001f46:	e000      	b.n	8001f4a <NVIC_EncodePriority+0x32>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	4313      	orrs	r3, r2
         );
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f90:	d301      	bcc.n	8001f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00f      	b.n	8001fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <SysTick_Config+0x40>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9e:	210f      	movs	r1, #15
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f7ff ff8e 	bl	8001ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <SysTick_Config+0x40>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <SysTick_Config+0x40>)
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	e000e010 	.word	0xe000e010

08001fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ff29 	bl	8001e24 <__NVIC_SetPriorityGrouping>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fec:	f7ff ff3e 	bl	8001e6c <__NVIC_GetPriorityGrouping>
 8001ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	f7ff ff8e 	bl	8001f18 <NVIC_EncodePriority>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff5d 	bl	8001ec4 <__NVIC_SetPriority>
}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff31 	bl	8001e88 <__NVIC_EnableIRQ>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ffa2 	bl	8001f80 <SysTick_Config>
 800203c:	4603      	mov	r3, r0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e014      	b.n	8002082 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	791b      	ldrb	r3, [r3, #4]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d105      	bne.n	800206e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7fe fe55 	bl	8000d18 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2202      	movs	r2, #2
 8002072:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800208a:	b480      	push	{r7}
 800208c:	b087      	sub	sp, #28
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	795b      	ldrb	r3, [r3, #5]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_DAC_ConfigChannel+0x20>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e036      	b.n	8002118 <HAL_DAC_ConfigChannel+0x8e>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2202      	movs	r2, #2
 80020b4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80020be:	f640 72fe 	movw	r2, #4094	; 0xffe
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4013      	ands	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6819      	ldr	r1, [r3, #0]
 80020f8:	22c0      	movs	r2, #192	; 0xc0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43da      	mvns	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	400a      	ands	r2, r1
 8002108:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	371c      	adds	r7, #28
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e037      	b.n	80021aa <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2202      	movs	r2, #2
 800213e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002150:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002154:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800215e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002176:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f941 	bl	8002414 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}  
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_DMA_Start_IT+0x20>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e04a      	b.n	8002268 <HAL_DMA_Start_IT+0xb6>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d13a      	bne.n	800225a <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0201 	bic.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68b9      	ldr	r1, [r7, #8]
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f8d4 	bl	80023b6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 020e 	orr.w	r2, r2, #14
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e00f      	b.n	8002248 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 020a 	orr.w	r2, r2, #10
 8002236:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0204 	bic.w	r2, r2, #4
 8002246:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	e005      	b.n	8002266 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002262:	2302      	movs	r3, #2
 8002264:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002266:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	2204      	movs	r2, #4
 800228e:	409a      	lsls	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d024      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x72>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d01f      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d107      	bne.n	80022c0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0204 	bic.w	r2, r2, #4
 80022be:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c8:	2104      	movs	r1, #4
 80022ca:	fa01 f202 	lsl.w	r2, r1, r2
 80022ce:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d06a      	beq.n	80023ae <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80022e0:	e065      	b.n	80023ae <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	2202      	movs	r2, #2
 80022e8:	409a      	lsls	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d02c      	beq.n	800234c <HAL_DMA_IRQHandler+0xdc>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d027      	beq.n	800234c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10b      	bne.n	8002322 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 020a 	bic.w	r2, r2, #10
 8002318:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232a:	2102      	movs	r1, #2
 800232c:	fa01 f202 	lsl.w	r2, r1, r2
 8002330:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	2b00      	cmp	r3, #0
 8002340:	d035      	beq.n	80023ae <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800234a:	e030      	b.n	80023ae <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	2208      	movs	r2, #8
 8002352:	409a      	lsls	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d028      	beq.n	80023ae <HAL_DMA_IRQHandler+0x13e>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d023      	beq.n	80023ae <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 020e 	bic.w	r2, r2, #14
 8002374:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	2101      	movs	r1, #1
 8002380:	fa01 f202 	lsl.w	r2, r1, r2
 8002384:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d004      	beq.n	80023ae <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	4798      	blx	r3
    }
  }
}  
 80023ac:	e7ff      	b.n	80023ae <HAL_DMA_IRQHandler+0x13e>
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023cc:	2101      	movs	r1, #1
 80023ce:	fa01 f202 	lsl.w	r2, r1, r2
 80023d2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b10      	cmp	r3, #16
 80023e2:	d108      	bne.n	80023f6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023f4:	e007      	b.n	8002406 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	60da      	str	r2, [r3, #12]
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <DMA_CalcBaseAndBitshift+0x34>)
 8002424:	4413      	add	r3, r2
 8002426:	4a09      	ldr	r2, [pc, #36]	; (800244c <DMA_CalcBaseAndBitshift+0x38>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	009a      	lsls	r2, r3, #2
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a06      	ldr	r2, [pc, #24]	; (8002450 <DMA_CalcBaseAndBitshift+0x3c>)
 8002438:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	bffdfff8 	.word	0xbffdfff8
 800244c:	cccccccd 	.word	0xcccccccd
 8002450:	40020000 	.word	0x40020000

08002454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002462:	e14e      	b.n	8002702 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2101      	movs	r1, #1
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	4013      	ands	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8140 	beq.w	80026fc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	2b01      	cmp	r3, #1
 8002486:	d005      	beq.n	8002494 <HAL_GPIO_Init+0x40>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d130      	bne.n	80024f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	2203      	movs	r2, #3
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ca:	2201      	movs	r2, #1
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	091b      	lsrs	r3, r3, #4
 80024e0:	f003 0201 	and.w	r2, r3, #1
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d017      	beq.n	8002532 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	2203      	movs	r2, #3
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d123      	bne.n	8002586 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	08da      	lsrs	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3208      	adds	r2, #8
 8002546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	220f      	movs	r2, #15
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	08da      	lsrs	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3208      	adds	r2, #8
 8002580:	6939      	ldr	r1, [r7, #16]
 8002582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	2203      	movs	r2, #3
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0203 	and.w	r2, r3, #3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 809a 	beq.w	80026fc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c8:	4b55      	ldr	r3, [pc, #340]	; (8002720 <HAL_GPIO_Init+0x2cc>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	4a54      	ldr	r2, [pc, #336]	; (8002720 <HAL_GPIO_Init+0x2cc>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6193      	str	r3, [r2, #24]
 80025d4:	4b52      	ldr	r3, [pc, #328]	; (8002720 <HAL_GPIO_Init+0x2cc>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025e0:	4a50      	ldr	r2, [pc, #320]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	089b      	lsrs	r3, r3, #2
 80025e6:	3302      	adds	r3, #2
 80025e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	220f      	movs	r2, #15
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800260a:	d013      	beq.n	8002634 <HAL_GPIO_Init+0x1e0>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a46      	ldr	r2, [pc, #280]	; (8002728 <HAL_GPIO_Init+0x2d4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d00d      	beq.n	8002630 <HAL_GPIO_Init+0x1dc>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a45      	ldr	r2, [pc, #276]	; (800272c <HAL_GPIO_Init+0x2d8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d007      	beq.n	800262c <HAL_GPIO_Init+0x1d8>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a44      	ldr	r2, [pc, #272]	; (8002730 <HAL_GPIO_Init+0x2dc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d101      	bne.n	8002628 <HAL_GPIO_Init+0x1d4>
 8002624:	2303      	movs	r3, #3
 8002626:	e006      	b.n	8002636 <HAL_GPIO_Init+0x1e2>
 8002628:	2305      	movs	r3, #5
 800262a:	e004      	b.n	8002636 <HAL_GPIO_Init+0x1e2>
 800262c:	2302      	movs	r3, #2
 800262e:	e002      	b.n	8002636 <HAL_GPIO_Init+0x1e2>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <HAL_GPIO_Init+0x1e2>
 8002634:	2300      	movs	r3, #0
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	f002 0203 	and.w	r2, r2, #3
 800263c:	0092      	lsls	r2, r2, #2
 800263e:	4093      	lsls	r3, r2
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002646:	4937      	ldr	r1, [pc, #220]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	089b      	lsrs	r3, r3, #2
 800264c:	3302      	adds	r3, #2
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002654:	4b37      	ldr	r3, [pc, #220]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	43db      	mvns	r3, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002678:	4a2e      	ldr	r2, [pc, #184]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800267e:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	43db      	mvns	r3, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026a2:	4a24      	ldr	r2, [pc, #144]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026a8:	4b22      	ldr	r3, [pc, #136]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026cc:	4a19      	ldr	r2, [pc, #100]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d2:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	43db      	mvns	r3, r3
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4013      	ands	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026f6:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	3301      	adds	r3, #1
 8002700:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	f47f aea9 	bne.w	8002464 <HAL_GPIO_Init+0x10>
  }
}
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	371c      	adds	r7, #28
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40021000 	.word	0x40021000
 8002724:	40010000 	.word	0x40010000
 8002728:	48000400 	.word	0x48000400
 800272c:	48000800 	.word	0x48000800
 8002730:	48000c00 	.word	0x48000c00
 8002734:	40010400 	.word	0x40010400

08002738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	807b      	strh	r3, [r7, #2]
 8002744:	4613      	mov	r3, r2
 8002746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002748:	787b      	ldrb	r3, [r7, #1]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002754:	e002      	b.n	800275c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002756:	887a      	ldrh	r2, [r7, #2]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800276e:	af00      	add	r7, sp, #0
 8002770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002774:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002778:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	f001 b823 	b.w	80037d4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002792:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 817d 	beq.w	8002a9e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027a4:	4bbc      	ldr	r3, [pc, #752]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d00c      	beq.n	80027ca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027b0:	4bb9      	ldr	r3, [pc, #740]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d15c      	bne.n	8002876 <HAL_RCC_OscConfig+0x10e>
 80027bc:	4bb6      	ldr	r3, [pc, #728]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c8:	d155      	bne.n	8002876 <HAL_RCC_OscConfig+0x10e>
 80027ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	095b      	lsrs	r3, r3, #5
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d102      	bne.n	80027fc <HAL_RCC_OscConfig+0x94>
 80027f6:	4ba8      	ldr	r3, [pc, #672]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	e015      	b.n	8002828 <HAL_RCC_OscConfig+0xc0>
 80027fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002800:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002810:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002814:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002818:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800281c:	fa93 f3a3 	rbit	r3, r3
 8002820:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002824:	4b9c      	ldr	r3, [pc, #624]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800282c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002830:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002834:	fa92 f2a2 	rbit	r2, r2
 8002838:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800283c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002840:	fab2 f282 	clz	r2, r2
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	f042 0220 	orr.w	r2, r2, #32
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	f002 021f 	and.w	r2, r2, #31
 8002850:	2101      	movs	r1, #1
 8002852:	fa01 f202 	lsl.w	r2, r1, r2
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 811f 	beq.w	8002a9c <HAL_RCC_OscConfig+0x334>
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	f040 8116 	bne.w	8002a9c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	f000 bfaf 	b.w	80037d4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x12e>
 8002888:	4b83      	ldr	r3, [pc, #524]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a82      	ldr	r2, [pc, #520]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 800288e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	e036      	b.n	8002904 <HAL_RCC_OscConfig+0x19c>
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x158>
 80028a6:	4b7c      	ldr	r3, [pc, #496]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a7b      	ldr	r2, [pc, #492]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 80028ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b79      	ldr	r3, [pc, #484]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a78      	ldr	r2, [pc, #480]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 80028b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e021      	b.n	8002904 <HAL_RCC_OscConfig+0x19c>
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x184>
 80028d2:	4b71      	ldr	r3, [pc, #452]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a70      	ldr	r2, [pc, #448]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 80028d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	4b6e      	ldr	r3, [pc, #440]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a6d      	ldr	r2, [pc, #436]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e00b      	b.n	8002904 <HAL_RCC_OscConfig+0x19c>
 80028ec:	4b6a      	ldr	r3, [pc, #424]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a69      	ldr	r2, [pc, #420]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a66      	ldr	r2, [pc, #408]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 80028fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002902:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002904:	4b64      	ldr	r3, [pc, #400]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	f023 020f 	bic.w	r2, r3, #15
 800290c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002910:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	495f      	ldr	r1, [pc, #380]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 800291a:	4313      	orrs	r3, r2
 800291c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800291e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002922:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d059      	beq.n	80029e2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7fe fc23 	bl	8001178 <HAL_GetTick>
 8002932:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002938:	f7fe fc1e 	bl	8001178 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b64      	cmp	r3, #100	; 0x64
 8002946:	d902      	bls.n	800294e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	f000 bf43 	b.w	80037d4 <HAL_RCC_OscConfig+0x106c>
 800294e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002952:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002962:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d102      	bne.n	8002980 <HAL_RCC_OscConfig+0x218>
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	e015      	b.n	80029ac <HAL_RCC_OscConfig+0x244>
 8002980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002984:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002998:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800299c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80029a8:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029b0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80029b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80029b8:	fa92 f2a2 	rbit	r2, r2
 80029bc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80029c0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80029c4:	fab2 f282 	clz	r2, r2
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	f042 0220 	orr.w	r2, r2, #32
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	f002 021f 	and.w	r2, r2, #31
 80029d4:	2101      	movs	r1, #1
 80029d6:	fa01 f202 	lsl.w	r2, r1, r2
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ab      	beq.n	8002938 <HAL_RCC_OscConfig+0x1d0>
 80029e0:	e05d      	b.n	8002a9e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e2:	f7fe fbc9 	bl	8001178 <HAL_GetTick>
 80029e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ec:	f7fe fbc4 	bl	8001178 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b64      	cmp	r3, #100	; 0x64
 80029fa:	d902      	bls.n	8002a02 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	f000 bee9 	b.w	80037d4 <HAL_RCC_OscConfig+0x106c>
 8002a02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a06:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002a16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	095b      	lsrs	r3, r3, #5
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d102      	bne.n	8002a34 <HAL_RCC_OscConfig+0x2cc>
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	e015      	b.n	8002a60 <HAL_RCC_OscConfig+0x2f8>
 8002a34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a38:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a4c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a50:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_RCC_OscConfig+0x330>)
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a64:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a68:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a6c:	fa92 f2a2 	rbit	r2, r2
 8002a70:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a74:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a78:	fab2 f282 	clz	r2, r2
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f042 0220 	orr.w	r2, r2, #32
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f002 021f 	and.w	r2, r2, #31
 8002a88:	2101      	movs	r1, #1
 8002a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ab      	bne.n	80029ec <HAL_RCC_OscConfig+0x284>
 8002a94:	e003      	b.n	8002a9e <HAL_RCC_OscConfig+0x336>
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 817d 	beq.w	8002dae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ab4:	4ba6      	ldr	r3, [pc, #664]	; (8002d50 <HAL_RCC_OscConfig+0x5e8>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00b      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ac0:	4ba3      	ldr	r3, [pc, #652]	; (8002d50 <HAL_RCC_OscConfig+0x5e8>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d172      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x44a>
 8002acc:	4ba0      	ldr	r3, [pc, #640]	; (8002d50 <HAL_RCC_OscConfig+0x5e8>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d16c      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x44a>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002aea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d102      	bne.n	8002b08 <HAL_RCC_OscConfig+0x3a0>
 8002b02:	4b93      	ldr	r3, [pc, #588]	; (8002d50 <HAL_RCC_OscConfig+0x5e8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	e013      	b.n	8002b30 <HAL_RCC_OscConfig+0x3c8>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b20:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b2c:	4b88      	ldr	r3, [pc, #544]	; (8002d50 <HAL_RCC_OscConfig+0x5e8>)
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	2202      	movs	r2, #2
 8002b32:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002b36:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b3a:	fa92 f2a2 	rbit	r2, r2
 8002b3e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002b42:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002b46:	fab2 f282 	clz	r2, r2
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	f042 0220 	orr.w	r2, r2, #32
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	f002 021f 	and.w	r2, r2, #31
 8002b56:	2101      	movs	r1, #1
 8002b58:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_RCC_OscConfig+0x410>
 8002b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d002      	beq.n	8002b78 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	f000 be2e 	b.w	80037d4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b78:	4b75      	ldr	r3, [pc, #468]	; (8002d50 <HAL_RCC_OscConfig+0x5e8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	21f8      	movs	r1, #248	; 0xf8
 8002b8e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b96:	fa91 f1a1 	rbit	r1, r1
 8002b9a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002b9e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002ba2:	fab1 f181 	clz	r1, r1
 8002ba6:	b2c9      	uxtb	r1, r1
 8002ba8:	408b      	lsls	r3, r1
 8002baa:	4969      	ldr	r1, [pc, #420]	; (8002d50 <HAL_RCC_OscConfig+0x5e8>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb0:	e0fd      	b.n	8002dae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 8088 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x56c>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002bd6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bda:	fab3 f383 	clz	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002be4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	461a      	mov	r2, r3
 8002bec:	2301      	movs	r3, #1
 8002bee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fac2 	bl	8001178 <HAL_GetTick>
 8002bf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf8:	e00a      	b.n	8002c10 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bfa:	f7fe fabd 	bl	8001178 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d902      	bls.n	8002c10 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	f000 bde2 	b.w	80037d4 <HAL_RCC_OscConfig+0x106c>
 8002c10:	2302      	movs	r3, #2
 8002c12:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002c22:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d102      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4d8>
 8002c3a:	4b45      	ldr	r3, [pc, #276]	; (8002d50 <HAL_RCC_OscConfig+0x5e8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	e013      	b.n	8002c68 <HAL_RCC_OscConfig+0x500>
 8002c40:	2302      	movs	r3, #2
 8002c42:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c46:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c52:	2302      	movs	r3, #2
 8002c54:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002c64:	4b3a      	ldr	r3, [pc, #232]	; (8002d50 <HAL_RCC_OscConfig+0x5e8>)
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	2202      	movs	r2, #2
 8002c6a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002c6e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c72:	fa92 f2a2 	rbit	r2, r2
 8002c76:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002c7a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c7e:	fab2 f282 	clz	r2, r2
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	f042 0220 	orr.w	r2, r2, #32
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	f002 021f 	and.w	r2, r2, #31
 8002c8e:	2101      	movs	r1, #1
 8002c90:	fa01 f202 	lsl.w	r2, r1, r2
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0af      	beq.n	8002bfa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9a:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <HAL_RCC_OscConfig+0x5e8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	21f8      	movs	r1, #248	; 0xf8
 8002cb0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002cb8:	fa91 f1a1 	rbit	r1, r1
 8002cbc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002cc0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002cc4:	fab1 f181 	clz	r1, r1
 8002cc8:	b2c9      	uxtb	r1, r1
 8002cca:	408b      	lsls	r3, r1
 8002ccc:	4920      	ldr	r1, [pc, #128]	; (8002d50 <HAL_RCC_OscConfig+0x5e8>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]
 8002cd2:	e06c      	b.n	8002dae <HAL_RCC_OscConfig+0x646>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002ce6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cf4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7fe fa3a 	bl	8001178 <HAL_GetTick>
 8002d04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0a:	f7fe fa35 	bl	8001178 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d902      	bls.n	8002d20 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	f000 bd5a 	b.w	80037d4 <HAL_RCC_OscConfig+0x106c>
 8002d20:	2302      	movs	r3, #2
 8002d22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d104      	bne.n	8002d54 <HAL_RCC_OscConfig+0x5ec>
 8002d4a:	4b01      	ldr	r3, [pc, #4]	; (8002d50 <HAL_RCC_OscConfig+0x5e8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	e015      	b.n	8002d7c <HAL_RCC_OscConfig+0x614>
 8002d50:	40021000 	.word	0x40021000
 8002d54:	2302      	movs	r3, #2
 8002d56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d66:	2302      	movs	r3, #2
 8002d68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002d78:	4bc8      	ldr	r3, [pc, #800]	; (800309c <HAL_RCC_OscConfig+0x934>)
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002d82:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d86:	fa92 f2a2 	rbit	r2, r2
 8002d8a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d8e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d92:	fab2 f282 	clz	r2, r2
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	f042 0220 	orr.w	r2, r2, #32
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	f002 021f 	and.w	r2, r2, #31
 8002da2:	2101      	movs	r1, #1
 8002da4:	fa01 f202 	lsl.w	r2, r1, r2
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1ad      	bne.n	8002d0a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8110 	beq.w	8002fe4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d079      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x760>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	4bab      	ldr	r3, [pc, #684]	; (80030a0 <HAL_RCC_OscConfig+0x938>)
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfe:	f7fe f9bb 	bl	8001178 <HAL_GetTick>
 8002e02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e08:	f7fe f9b6 	bl	8001178 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d902      	bls.n	8002e1e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	f000 bcdb 	b.w	80037d4 <HAL_RCC_OscConfig+0x106c>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e34:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e38:	2202      	movs	r2, #2
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e40:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	fa93 f2a3 	rbit	r2, r3
 8002e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	fa93 f2a3 	rbit	r2, r3
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e76:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e78:	4b88      	ldr	r3, [pc, #544]	; (800309c <HAL_RCC_OscConfig+0x934>)
 8002e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e80:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e84:	2102      	movs	r1, #2
 8002e86:	6019      	str	r1, [r3, #0]
 8002e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	fa93 f1a3 	rbit	r1, r3
 8002e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e9e:	6019      	str	r1, [r3, #0]
  return result;
 8002ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	2101      	movs	r1, #1
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0a0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x6a0>
 8002ec6:	e08d      	b.n	8002fe4 <HAL_RCC_OscConfig+0x87c>
 8002ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ecc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	fa93 f2a3 	rbit	r2, r3
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002eea:	601a      	str	r2, [r3, #0]
  return result;
 8002eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ef4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b68      	ldr	r3, [pc, #416]	; (80030a0 <HAL_RCC_OscConfig+0x938>)
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	461a      	mov	r2, r3
 8002f06:	2300      	movs	r3, #0
 8002f08:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0a:	f7fe f935 	bl	8001178 <HAL_GetTick>
 8002f0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f14:	f7fe f930 	bl	8001178 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d902      	bls.n	8002f2a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	f000 bc55 	b.w	80037d4 <HAL_RCC_OscConfig+0x106c>
 8002f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f32:	2202      	movs	r2, #2
 8002f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	fa93 f2a3 	rbit	r2, r3
 8002f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f48:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f56:	2202      	movs	r2, #2
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	fa93 f2a3 	rbit	r2, r3
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fa93 f2a3 	rbit	r2, r3
 8002f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f90:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f96:	4b41      	ldr	r3, [pc, #260]	; (800309c <HAL_RCC_OscConfig+0x934>)
 8002f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	6019      	str	r1, [r3, #0]
 8002fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002faa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	fa93 f1a3 	rbit	r1, r3
 8002fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fbc:	6019      	str	r1, [r3, #0]
  return result;
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	fab3 f383 	clz	r3, r3
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	2101      	movs	r1, #1
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d197      	bne.n	8002f14 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 81a1 	beq.w	800333c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003000:	4b26      	ldr	r3, [pc, #152]	; (800309c <HAL_RCC_OscConfig+0x934>)
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d116      	bne.n	800303a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b23      	ldr	r3, [pc, #140]	; (800309c <HAL_RCC_OscConfig+0x934>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	4a22      	ldr	r2, [pc, #136]	; (800309c <HAL_RCC_OscConfig+0x934>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003016:	61d3      	str	r3, [r2, #28]
 8003018:	4b20      	ldr	r3, [pc, #128]	; (800309c <HAL_RCC_OscConfig+0x934>)
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003024:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003032:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303a:	4b1a      	ldr	r3, [pc, #104]	; (80030a4 <HAL_RCC_OscConfig+0x93c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003042:	2b00      	cmp	r3, #0
 8003044:	d11a      	bne.n	800307c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003046:	4b17      	ldr	r3, [pc, #92]	; (80030a4 <HAL_RCC_OscConfig+0x93c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a16      	ldr	r2, [pc, #88]	; (80030a4 <HAL_RCC_OscConfig+0x93c>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003050:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003052:	f7fe f891 	bl	8001178 <HAL_GetTick>
 8003056:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305a:	e009      	b.n	8003070 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800305c:	f7fe f88c 	bl	8001178 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b64      	cmp	r3, #100	; 0x64
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e3b1      	b.n	80037d4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003070:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <HAL_RCC_OscConfig+0x93c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0ef      	beq.n	800305c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800307c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003080:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d10d      	bne.n	80030a8 <HAL_RCC_OscConfig+0x940>
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <HAL_RCC_OscConfig+0x934>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	4a02      	ldr	r2, [pc, #8]	; (800309c <HAL_RCC_OscConfig+0x934>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6213      	str	r3, [r2, #32]
 8003098:	e03c      	b.n	8003114 <HAL_RCC_OscConfig+0x9ac>
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000
 80030a0:	10908120 	.word	0x10908120
 80030a4:	40007000 	.word	0x40007000
 80030a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10c      	bne.n	80030d2 <HAL_RCC_OscConfig+0x96a>
 80030b8:	4bc1      	ldr	r3, [pc, #772]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	4ac0      	ldr	r2, [pc, #768]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	6213      	str	r3, [r2, #32]
 80030c4:	4bbe      	ldr	r3, [pc, #760]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	4abd      	ldr	r2, [pc, #756]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 80030ca:	f023 0304 	bic.w	r3, r3, #4
 80030ce:	6213      	str	r3, [r2, #32]
 80030d0:	e020      	b.n	8003114 <HAL_RCC_OscConfig+0x9ac>
 80030d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2b05      	cmp	r3, #5
 80030e0:	d10c      	bne.n	80030fc <HAL_RCC_OscConfig+0x994>
 80030e2:	4bb7      	ldr	r3, [pc, #732]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	4ab6      	ldr	r2, [pc, #728]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 80030e8:	f043 0304 	orr.w	r3, r3, #4
 80030ec:	6213      	str	r3, [r2, #32]
 80030ee:	4bb4      	ldr	r3, [pc, #720]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	4ab3      	ldr	r2, [pc, #716]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6213      	str	r3, [r2, #32]
 80030fa:	e00b      	b.n	8003114 <HAL_RCC_OscConfig+0x9ac>
 80030fc:	4bb0      	ldr	r3, [pc, #704]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4aaf      	ldr	r2, [pc, #700]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 8003102:	f023 0301 	bic.w	r3, r3, #1
 8003106:	6213      	str	r3, [r2, #32]
 8003108:	4bad      	ldr	r3, [pc, #692]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	4aac      	ldr	r2, [pc, #688]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 800310e:	f023 0304 	bic.w	r3, r3, #4
 8003112:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003118:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 8081 	beq.w	8003228 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003126:	f7fe f827 	bl	8001178 <HAL_GetTick>
 800312a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003130:	f7fe f822 	bl	8001178 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e345      	b.n	80037d4 <HAL_RCC_OscConfig+0x106c>
 8003148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003150:	2202      	movs	r2, #2
 8003152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003158:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	fa93 f2a3 	rbit	r2, r3
 8003162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003166:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003170:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003174:	2202      	movs	r2, #2
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	fa93 f2a3 	rbit	r2, r3
 8003186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800318e:	601a      	str	r2, [r3, #0]
  return result;
 8003190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003194:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003198:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319a:	fab3 f383 	clz	r3, r3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	f043 0302 	orr.w	r3, r3, #2
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d102      	bne.n	80031b4 <HAL_RCC_OscConfig+0xa4c>
 80031ae:	4b84      	ldr	r3, [pc, #528]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	e013      	b.n	80031dc <HAL_RCC_OscConfig+0xa74>
 80031b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031bc:	2202      	movs	r2, #2
 80031be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	fa93 f2a3 	rbit	r2, r3
 80031ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	4b79      	ldr	r3, [pc, #484]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031e4:	2102      	movs	r1, #2
 80031e6:	6011      	str	r1, [r2, #0]
 80031e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	fa92 f1a2 	rbit	r1, r2
 80031f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031fa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031fe:	6011      	str	r1, [r2, #0]
  return result;
 8003200:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003204:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003208:	6812      	ldr	r2, [r2, #0]
 800320a:	fab2 f282 	clz	r2, r2
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	f002 021f 	and.w	r2, r2, #31
 800321a:	2101      	movs	r1, #1
 800321c:	fa01 f202 	lsl.w	r2, r1, r2
 8003220:	4013      	ands	r3, r2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d084      	beq.n	8003130 <HAL_RCC_OscConfig+0x9c8>
 8003226:	e07f      	b.n	8003328 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003228:	f7fd ffa6 	bl	8001178 <HAL_GetTick>
 800322c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	e00b      	b.n	800324a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fd ffa1 	bl	8001178 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e2c4      	b.n	80037d4 <HAL_RCC_OscConfig+0x106c>
 800324a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003252:	2202      	movs	r2, #2
 8003254:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	fa93 f2a3 	rbit	r2, r3
 8003264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003268:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003272:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003276:	2202      	movs	r2, #2
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	fa93 f2a3 	rbit	r2, r3
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003290:	601a      	str	r2, [r3, #0]
  return result;
 8003292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003296:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800329a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329c:	fab3 f383 	clz	r3, r3
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	f043 0302 	orr.w	r3, r3, #2
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d102      	bne.n	80032b6 <HAL_RCC_OscConfig+0xb4e>
 80032b0:	4b43      	ldr	r3, [pc, #268]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	e013      	b.n	80032de <HAL_RCC_OscConfig+0xb76>
 80032b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032be:	2202      	movs	r2, #2
 80032c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	fa93 f2a3 	rbit	r2, r3
 80032d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	4b39      	ldr	r3, [pc, #228]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032e2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032e6:	2102      	movs	r1, #2
 80032e8:	6011      	str	r1, [r2, #0]
 80032ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	fa92 f1a2 	rbit	r1, r2
 80032f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003300:	6011      	str	r1, [r2, #0]
  return result;
 8003302:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003306:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	fab2 f282 	clz	r2, r2
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	f002 021f 	and.w	r2, r2, #31
 800331c:	2101      	movs	r1, #1
 800331e:	fa01 f202 	lsl.w	r2, r1, r2
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d184      	bne.n	8003232 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003328:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800332c:	2b01      	cmp	r3, #1
 800332e:	d105      	bne.n	800333c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003330:	4b23      	ldr	r3, [pc, #140]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	4a22      	ldr	r2, [pc, #136]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 8003336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800333c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003340:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8242 	beq.w	80037d2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800334e:	4b1c      	ldr	r3, [pc, #112]	; (80033c0 <HAL_RCC_OscConfig+0xc58>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b08      	cmp	r3, #8
 8003358:	f000 8213 	beq.w	8003782 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003360:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	2b02      	cmp	r3, #2
 800336a:	f040 8162 	bne.w	8003632 <HAL_RCC_OscConfig+0xeca>
 800336e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003372:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003376:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800337a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003380:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	fa93 f2a3 	rbit	r2, r3
 800338a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003392:	601a      	str	r2, [r3, #0]
  return result;
 8003394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003398:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800339c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	461a      	mov	r2, r3
 80033b0:	2300      	movs	r3, #0
 80033b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b4:	f7fd fee0 	bl	8001178 <HAL_GetTick>
 80033b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033bc:	e00c      	b.n	80033d8 <HAL_RCC_OscConfig+0xc70>
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c4:	f7fd fed8 	bl	8001178 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e1fd      	b.n	80037d4 <HAL_RCC_OscConfig+0x106c>
 80033d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	fa93 f2a3 	rbit	r2, r3
 80033f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033fc:	601a      	str	r2, [r3, #0]
  return result;
 80033fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003402:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003406:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	b2db      	uxtb	r3, r3
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b01      	cmp	r3, #1
 800341a:	d102      	bne.n	8003422 <HAL_RCC_OscConfig+0xcba>
 800341c:	4bb0      	ldr	r3, [pc, #704]	; (80036e0 <HAL_RCC_OscConfig+0xf78>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	e027      	b.n	8003472 <HAL_RCC_OscConfig+0xd0a>
 8003422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003426:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800342a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800342e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003434:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	fa93 f2a3 	rbit	r2, r3
 800343e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003442:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003450:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	fa93 f2a3 	rbit	r2, r3
 8003464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003468:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	4b9c      	ldr	r3, [pc, #624]	; (80036e0 <HAL_RCC_OscConfig+0xf78>)
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003476:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800347a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800347e:	6011      	str	r1, [r2, #0]
 8003480:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003484:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	fa92 f1a2 	rbit	r1, r2
 800348e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003492:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003496:	6011      	str	r1, [r2, #0]
  return result;
 8003498:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800349c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	fab2 f282 	clz	r2, r2
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	f042 0220 	orr.w	r2, r2, #32
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	f002 021f 	and.w	r2, r2, #31
 80034b2:	2101      	movs	r1, #1
 80034b4:	fa01 f202 	lsl.w	r2, r1, r2
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d182      	bne.n	80033c4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034be:	4b88      	ldr	r3, [pc, #544]	; (80036e0 <HAL_RCC_OscConfig+0xf78>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	430b      	orrs	r3, r1
 80034e0:	497f      	ldr	r1, [pc, #508]	; (80036e0 <HAL_RCC_OscConfig+0xf78>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
 80034e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	fa93 f2a3 	rbit	r2, r3
 8003502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003506:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800350a:	601a      	str	r2, [r3, #0]
  return result;
 800350c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003510:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003514:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003520:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	461a      	mov	r2, r3
 8003528:	2301      	movs	r3, #1
 800352a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fd fe24 	bl	8001178 <HAL_GetTick>
 8003530:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003534:	e009      	b.n	800354a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003536:	f7fd fe1f 	bl	8001178 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e144      	b.n	80037d4 <HAL_RCC_OscConfig+0x106c>
 800354a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003552:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	fa93 f2a3 	rbit	r2, r3
 8003566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800356e:	601a      	str	r2, [r3, #0]
  return result;
 8003570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003574:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003578:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d102      	bne.n	8003594 <HAL_RCC_OscConfig+0xe2c>
 800358e:	4b54      	ldr	r3, [pc, #336]	; (80036e0 <HAL_RCC_OscConfig+0xf78>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	e027      	b.n	80035e4 <HAL_RCC_OscConfig+0xe7c>
 8003594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003598:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800359c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	fa93 f2a3 	rbit	r2, r3
 80035b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035be:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035cc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	fa93 f2a3 	rbit	r2, r3
 80035d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035da:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	4b3f      	ldr	r3, [pc, #252]	; (80036e0 <HAL_RCC_OscConfig+0xf78>)
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035e8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035f0:	6011      	str	r1, [r2, #0]
 80035f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035f6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	fa92 f1a2 	rbit	r1, r2
 8003600:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003604:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003608:	6011      	str	r1, [r2, #0]
  return result;
 800360a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800360e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	fab2 f282 	clz	r2, r2
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	f042 0220 	orr.w	r2, r2, #32
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	f002 021f 	and.w	r2, r2, #31
 8003624:	2101      	movs	r1, #1
 8003626:	fa01 f202 	lsl.w	r2, r1, r2
 800362a:	4013      	ands	r3, r2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d082      	beq.n	8003536 <HAL_RCC_OscConfig+0xdce>
 8003630:	e0cf      	b.n	80037d2 <HAL_RCC_OscConfig+0x106a>
 8003632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003636:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800363a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800363e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003644:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	fa93 f2a3 	rbit	r2, r3
 800364e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003652:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003656:	601a      	str	r2, [r3, #0]
  return result;
 8003658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003660:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800366c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	461a      	mov	r2, r3
 8003674:	2300      	movs	r3, #0
 8003676:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fd fd7e 	bl	8001178 <HAL_GetTick>
 800367c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003680:	e009      	b.n	8003696 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003682:	f7fd fd79 	bl	8001178 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e09e      	b.n	80037d4 <HAL_RCC_OscConfig+0x106c>
 8003696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800369e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	fa93 f2a3 	rbit	r2, r3
 80036b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036ba:	601a      	str	r2, [r3, #0]
  return result;
 80036bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d104      	bne.n	80036e4 <HAL_RCC_OscConfig+0xf7c>
 80036da:	4b01      	ldr	r3, [pc, #4]	; (80036e0 <HAL_RCC_OscConfig+0xf78>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	e029      	b.n	8003734 <HAL_RCC_OscConfig+0xfcc>
 80036e0:	40021000 	.word	0x40021000
 80036e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	fa93 f2a3 	rbit	r2, r3
 8003700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003704:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003712:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	fa93 f2a3 	rbit	r2, r3
 8003726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <HAL_RCC_OscConfig+0x1078>)
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003738:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800373c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003740:	6011      	str	r1, [r2, #0]
 8003742:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003746:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	fa92 f1a2 	rbit	r1, r2
 8003750:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003754:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003758:	6011      	str	r1, [r2, #0]
  return result;
 800375a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800375e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	fab2 f282 	clz	r2, r2
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	f042 0220 	orr.w	r2, r2, #32
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	f002 021f 	and.w	r2, r2, #31
 8003774:	2101      	movs	r1, #1
 8003776:	fa01 f202 	lsl.w	r2, r1, r2
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d180      	bne.n	8003682 <HAL_RCC_OscConfig+0xf1a>
 8003780:	e027      	b.n	80037d2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e01e      	b.n	80037d4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003796:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <HAL_RCC_OscConfig+0x1078>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800379e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037a2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d10b      	bne.n	80037ce <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d001      	beq.n	80037d2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000

080037e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b09e      	sub	sp, #120	; 0x78
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e162      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037fc:	4b90      	ldr	r3, [pc, #576]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d910      	bls.n	800382c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b8d      	ldr	r3, [pc, #564]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 0207 	bic.w	r2, r3, #7
 8003812:	498b      	ldr	r1, [pc, #556]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b89      	ldr	r3, [pc, #548]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e14a      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003838:	4b82      	ldr	r3, [pc, #520]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	497f      	ldr	r1, [pc, #508]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003846:	4313      	orrs	r3, r2
 8003848:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80dc 	beq.w	8003a10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d13c      	bne.n	80038da <HAL_RCC_ClockConfig+0xf6>
 8003860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003864:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800386e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003870:	fab3 f383 	clz	r3, r3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d102      	bne.n	800388a <HAL_RCC_ClockConfig+0xa6>
 8003884:	4b6f      	ldr	r3, [pc, #444]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	e00f      	b.n	80038aa <HAL_RCC_ClockConfig+0xc6>
 800388a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800388e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003890:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003892:	fa93 f3a3 	rbit	r3, r3
 8003896:	667b      	str	r3, [r7, #100]	; 0x64
 8003898:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800389c:	663b      	str	r3, [r7, #96]	; 0x60
 800389e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038a0:	fa93 f3a3 	rbit	r3, r3
 80038a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038a6:	4b67      	ldr	r3, [pc, #412]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80038b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038b2:	fa92 f2a2 	rbit	r2, r2
 80038b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80038b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038ba:	fab2 f282 	clz	r2, r2
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	f042 0220 	orr.w	r2, r2, #32
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	f002 021f 	and.w	r2, r2, #31
 80038ca:	2101      	movs	r1, #1
 80038cc:	fa01 f202 	lsl.w	r2, r1, r2
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d17b      	bne.n	80039ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e0f3      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d13c      	bne.n	800395c <HAL_RCC_ClockConfig+0x178>
 80038e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d102      	bne.n	800390c <HAL_RCC_ClockConfig+0x128>
 8003906:	4b4f      	ldr	r3, [pc, #316]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	e00f      	b.n	800392c <HAL_RCC_ClockConfig+0x148>
 800390c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003910:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	647b      	str	r3, [r7, #68]	; 0x44
 800391a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800391e:	643b      	str	r3, [r7, #64]	; 0x40
 8003920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003928:	4b46      	ldr	r3, [pc, #280]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003930:	63ba      	str	r2, [r7, #56]	; 0x38
 8003932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003934:	fa92 f2a2 	rbit	r2, r2
 8003938:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800393a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800393c:	fab2 f282 	clz	r2, r2
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	f042 0220 	orr.w	r2, r2, #32
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	f002 021f 	and.w	r2, r2, #31
 800394c:	2101      	movs	r1, #1
 800394e:	fa01 f202 	lsl.w	r2, r1, r2
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d13a      	bne.n	80039ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0b2      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
 800395c:	2302      	movs	r3, #2
 800395e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	fa93 f3a3 	rbit	r3, r3
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396a:	fab3 f383 	clz	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	d102      	bne.n	8003984 <HAL_RCC_ClockConfig+0x1a0>
 800397e:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	e00d      	b.n	80039a0 <HAL_RCC_ClockConfig+0x1bc>
 8003984:	2302      	movs	r3, #2
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
 8003990:	2302      	movs	r3, #2
 8003992:	623b      	str	r3, [r7, #32]
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	2202      	movs	r2, #2
 80039a2:	61ba      	str	r2, [r7, #24]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	fa92 f2a2 	rbit	r2, r2
 80039aa:	617a      	str	r2, [r7, #20]
  return result;
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	fab2 f282 	clz	r2, r2
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	f042 0220 	orr.w	r2, r2, #32
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	f002 021f 	and.w	r2, r2, #31
 80039be:	2101      	movs	r1, #1
 80039c0:	fa01 f202 	lsl.w	r2, r1, r2
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e079      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ce:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f023 0203 	bic.w	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	491a      	ldr	r1, [pc, #104]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e0:	f7fd fbca 	bl	8001178 <HAL_GetTick>
 80039e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	e00a      	b.n	80039fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e8:	f7fd fbc6 	bl	8001178 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e061      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 020c 	and.w	r2, r3, #12
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d1eb      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d214      	bcs.n	8003a48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 0207 	bic.w	r2, r3, #7
 8003a26:	4906      	ldr	r1, [pc, #24]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2e:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e040      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
 8003a40:	40022000 	.word	0x40022000
 8003a44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a54:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <HAL_RCC_ClockConfig+0x2e8>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	491a      	ldr	r1, [pc, #104]	; (8003acc <HAL_RCC_ClockConfig+0x2e8>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a72:	4b16      	ldr	r3, [pc, #88]	; (8003acc <HAL_RCC_ClockConfig+0x2e8>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4912      	ldr	r1, [pc, #72]	; (8003acc <HAL_RCC_ClockConfig+0x2e8>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a86:	f000 f829 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8003a8a:	4601      	mov	r1, r0
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <HAL_RCC_ClockConfig+0x2e8>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a94:	22f0      	movs	r2, #240	; 0xf0
 8003a96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	fa92 f2a2 	rbit	r2, r2
 8003a9e:	60fa      	str	r2, [r7, #12]
  return result;
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	fab2 f282 	clz	r2, r2
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	40d3      	lsrs	r3, r2
 8003aaa:	4a09      	ldr	r2, [pc, #36]	; (8003ad0 <HAL_RCC_ClockConfig+0x2ec>)
 8003aac:	5cd3      	ldrb	r3, [r2, r3]
 8003aae:	fa21 f303 	lsr.w	r3, r1, r3
 8003ab2:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <HAL_RCC_ClockConfig+0x2f0>)
 8003ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <HAL_RCC_ClockConfig+0x2f4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fd fb18 	bl	80010f0 <HAL_InitTick>
  
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3778      	adds	r7, #120	; 0x78
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	08005c18 	.word	0x08005c18
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	20000004 	.word	0x20000004

08003adc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b08b      	sub	sp, #44	; 0x2c
 8003ae0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	2300      	movs	r3, #0
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003af6:	4b29      	ldr	r3, [pc, #164]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d002      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x30>
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d003      	beq.n	8003b12 <HAL_RCC_GetSysClockFreq+0x36>
 8003b0a:	e03c      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b0c:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b0e:	623b      	str	r3, [r7, #32]
      break;
 8003b10:	e03c      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	fa92 f2a2 	rbit	r2, r2
 8003b24:	607a      	str	r2, [r7, #4]
  return result;
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	fab2 f282 	clz	r2, r2
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	40d3      	lsrs	r3, r2
 8003b30:	4a1c      	ldr	r2, [pc, #112]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b32:	5cd3      	ldrb	r3, [r2, r3]
 8003b34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b36:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	220f      	movs	r2, #15
 8003b40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	fa92 f2a2 	rbit	r2, r2
 8003b48:	60fa      	str	r2, [r7, #12]
  return result;
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	fab2 f282 	clz	r2, r2
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	40d3      	lsrs	r3, r2
 8003b54:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b56:	5cd3      	ldrb	r3, [r2, r3]
 8003b58:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b64:	4a0e      	ldr	r2, [pc, #56]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
 8003b74:	e004      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	4a0c      	ldr	r2, [pc, #48]	; (8003bac <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	623b      	str	r3, [r7, #32]
      break;
 8003b84:	e002      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b86:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b88:	623b      	str	r3, [r7, #32]
      break;
 8003b8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	372c      	adds	r7, #44	; 0x2c
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	007a1200 	.word	0x007a1200
 8003ba4:	08005c30 	.word	0x08005c30
 8003ba8:	08005c40 	.word	0x08005c40
 8003bac:	003d0900 	.word	0x003d0900

08003bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb4:	4b03      	ldr	r3, [pc, #12]	; (8003bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000000 	.word	0x20000000

08003bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003bce:	f7ff ffef 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 8003bd2:	4601      	mov	r1, r0
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bdc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003be0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	fa92 f2a2 	rbit	r2, r2
 8003be8:	603a      	str	r2, [r7, #0]
  return result;
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	fab2 f282 	clz	r2, r2
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	40d3      	lsrs	r3, r2
 8003bf4:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003bf6:	5cd3      	ldrb	r3, [r2, r3]
 8003bf8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000
 8003c08:	08005c28 	.word	0x08005c28

08003c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c12:	f7ff ffcd 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 8003c16:	4601      	mov	r1, r0
 8003c18:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003c20:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	fa92 f2a2 	rbit	r2, r2
 8003c2c:	603a      	str	r2, [r7, #0]
  return result;
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	fab2 f282 	clz	r2, r2
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	40d3      	lsrs	r3, r2
 8003c38:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c3a:	5cd3      	ldrb	r3, [r2, r3]
 8003c3c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	08005c28 	.word	0x08005c28

08003c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b092      	sub	sp, #72	; 0x48
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80d4 	beq.w	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c74:	4b4e      	ldr	r3, [pc, #312]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10e      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c80:	4b4b      	ldr	r3, [pc, #300]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	4a4a      	ldr	r2, [pc, #296]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	61d3      	str	r3, [r2, #28]
 8003c8c:	4b48      	ldr	r3, [pc, #288]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9e:	4b45      	ldr	r3, [pc, #276]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d118      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003caa:	4b42      	ldr	r3, [pc, #264]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a41      	ldr	r2, [pc, #260]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb6:	f7fd fa5f 	bl	8001178 <HAL_GetTick>
 8003cba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbe:	f7fd fa5b 	bl	8001178 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b64      	cmp	r3, #100	; 0x64
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e14b      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd0:	4b38      	ldr	r3, [pc, #224]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cdc:	4b34      	ldr	r3, [pc, #208]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8084 	beq.w	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d07c      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cfc:	4b2c      	ldr	r3, [pc, #176]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	fa93 f3a3 	rbit	r3, r3
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d16:	fab3 f383 	clz	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4b26      	ldr	r3, [pc, #152]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	461a      	mov	r2, r3
 8003d26:	2301      	movs	r3, #1
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d32:	fa93 f3a3 	rbit	r3, r3
 8003d36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d4e:	4a18      	ldr	r2, [pc, #96]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d04b      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5e:	f7fd fa0b 	bl	8001178 <HAL_GetTick>
 8003d62:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d64:	e00a      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d66:	f7fd fa07 	bl	8001178 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e0f5      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	fa93 f3a3 	rbit	r3, r3
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
 8003d88:	2302      	movs	r3, #2
 8003d8a:	623b      	str	r3, [r7, #32]
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	fa93 f3a3 	rbit	r3, r3
 8003d92:	61fb      	str	r3, [r7, #28]
  return result;
 8003d94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d96:	fab3 f383 	clz	r3, r3
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f043 0302 	orr.w	r3, r3, #2
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d108      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003daa:	4b01      	ldr	r3, [pc, #4]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	e00d      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
 8003db8:	10908100 	.word	0x10908100
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	fa93 f3a3 	rbit	r3, r3
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	4b69      	ldr	r3, [pc, #420]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	2202      	movs	r2, #2
 8003dce:	613a      	str	r2, [r7, #16]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	fa92 f2a2 	rbit	r2, r2
 8003dd6:	60fa      	str	r2, [r7, #12]
  return result;
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	fab2 f282 	clz	r2, r2
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	f002 021f 	and.w	r2, r2, #31
 8003dea:	2101      	movs	r1, #1
 8003dec:	fa01 f202 	lsl.w	r2, r1, r2
 8003df0:	4013      	ands	r3, r2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0b7      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003df6:	4b5e      	ldr	r3, [pc, #376]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	495b      	ldr	r1, [pc, #364]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e10:	4b57      	ldr	r3, [pc, #348]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	4a56      	ldr	r2, [pc, #344]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e28:	4b51      	ldr	r3, [pc, #324]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	f023 0203 	bic.w	r2, r3, #3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	494e      	ldr	r1, [pc, #312]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e46:	4b4a      	ldr	r3, [pc, #296]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	f023 0210 	bic.w	r2, r3, #16
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	4947      	ldr	r1, [pc, #284]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e64:	4b42      	ldr	r3, [pc, #264]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	493f      	ldr	r1, [pc, #252]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d008      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e82:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	f023 0220 	bic.w	r2, r3, #32
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	4938      	ldr	r1, [pc, #224]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ea0:	4b33      	ldr	r3, [pc, #204]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	4930      	ldr	r1, [pc, #192]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d008      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ebe:	4b2c      	ldr	r3, [pc, #176]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	4929      	ldr	r1, [pc, #164]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003edc:	4b24      	ldr	r3, [pc, #144]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	4921      	ldr	r1, [pc, #132]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003efa:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	491a      	ldr	r1, [pc, #104]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d008      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003f18:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	4912      	ldr	r1, [pc, #72]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d008      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003f36:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	490b      	ldr	r1, [pc, #44]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003f54:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	4903      	ldr	r1, [pc, #12]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3748      	adds	r7, #72	; 0x48
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40021000 	.word	0x40021000

08003f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e049      	b.n	800401a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7fc ff76 	bl	8000e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	f000 fb9a 	bl	80046ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b086      	sub	sp, #24
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e097      	b.n	8004166 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fc fed6 	bl	8000dfc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004066:	f023 0307 	bic.w	r3, r3, #7
 800406a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f000 fb38 	bl	80046ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a4:	f023 0303 	bic.w	r3, r3, #3
 80040a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	4313      	orrs	r3, r2
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80040c2:	f023 030c 	bic.w	r3, r3, #12
 80040c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	4313      	orrs	r3, r2
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	011a      	lsls	r2, r3, #4
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	031b      	lsls	r3, r3, #12
 80040f2:	4313      	orrs	r3, r2
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004100:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004108:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	4313      	orrs	r3, r2
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800417e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004186:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800418e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004196:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d110      	bne.n	80041c0 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d102      	bne.n	80041aa <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80041a4:	7b7b      	ldrb	r3, [r7, #13]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d001      	beq.n	80041ae <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e089      	b.n	80042c2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2202      	movs	r2, #2
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2202      	movs	r2, #2
 80041ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041be:	e031      	b.n	8004224 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d110      	bne.n	80041e8 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041c6:	7bbb      	ldrb	r3, [r7, #14]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d102      	bne.n	80041d2 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041cc:	7b3b      	ldrb	r3, [r7, #12]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d001      	beq.n	80041d6 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e075      	b.n	80042c2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2202      	movs	r2, #2
 80041e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041e6:	e01d      	b.n	8004224 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d108      	bne.n	8004200 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041ee:	7bbb      	ldrb	r3, [r7, #14]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d105      	bne.n	8004200 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041f4:	7b7b      	ldrb	r3, [r7, #13]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d102      	bne.n	8004200 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041fa:	7b3b      	ldrb	r3, [r7, #12]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d001      	beq.n	8004204 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e05e      	b.n	80042c2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_TIM_Encoder_Start_IT+0xc4>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b04      	cmp	r3, #4
 800422e:	d010      	beq.n	8004252 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004230:	e01f      	b.n	8004272 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2201      	movs	r2, #1
 8004238:	2100      	movs	r1, #0
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fb5e 	bl	80048fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0202 	orr.w	r2, r2, #2
 800424e:	60da      	str	r2, [r3, #12]
      break;
 8004250:	e02e      	b.n	80042b0 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2201      	movs	r2, #1
 8004258:	2104      	movs	r1, #4
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fb4e 	bl	80048fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0204 	orr.w	r2, r2, #4
 800426e:	60da      	str	r2, [r3, #12]
      break;
 8004270:	e01e      	b.n	80042b0 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2201      	movs	r2, #1
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fb3e 	bl	80048fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2201      	movs	r2, #1
 8004286:	2104      	movs	r1, #4
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fb37 	bl	80048fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0202 	orr.w	r2, r2, #2
 800429c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0204 	orr.w	r2, r2, #4
 80042ac:	60da      	str	r2, [r3, #12]
      break;
 80042ae:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d122      	bne.n	8004326 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d11b      	bne.n	8004326 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f06f 0202 	mvn.w	r2, #2
 80042f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7fb ffb7 	bl	8000280 <HAL_TIM_IC_CaptureCallback>
 8004312:	e005      	b.n	8004320 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f9ca 	bl	80046ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f9d1 	bl	80046c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b04      	cmp	r3, #4
 8004332:	d122      	bne.n	800437a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b04      	cmp	r3, #4
 8004340:	d11b      	bne.n	800437a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f06f 0204 	mvn.w	r2, #4
 800434a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7fb ff8d 	bl	8000280 <HAL_TIM_IC_CaptureCallback>
 8004366:	e005      	b.n	8004374 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f9a0 	bl	80046ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f9a7 	bl	80046c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b08      	cmp	r3, #8
 8004386:	d122      	bne.n	80043ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b08      	cmp	r3, #8
 8004394:	d11b      	bne.n	80043ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f06f 0208 	mvn.w	r2, #8
 800439e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2204      	movs	r2, #4
 80043a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7fb ff63 	bl	8000280 <HAL_TIM_IC_CaptureCallback>
 80043ba:	e005      	b.n	80043c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f976 	bl	80046ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f97d 	bl	80046c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b10      	cmp	r3, #16
 80043da:	d122      	bne.n	8004422 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	2b10      	cmp	r3, #16
 80043e8:	d11b      	bne.n	8004422 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f06f 0210 	mvn.w	r2, #16
 80043f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2208      	movs	r2, #8
 80043f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7fb ff39 	bl	8000280 <HAL_TIM_IC_CaptureCallback>
 800440e:	e005      	b.n	800441c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f94c 	bl	80046ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f953 	bl	80046c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b01      	cmp	r3, #1
 800442e:	d10e      	bne.n	800444e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d107      	bne.n	800444e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f06f 0201 	mvn.w	r2, #1
 8004446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f926 	bl	800469a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004458:	2b80      	cmp	r3, #128	; 0x80
 800445a:	d10e      	bne.n	800447a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	2b80      	cmp	r3, #128	; 0x80
 8004468:	d107      	bne.n	800447a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fad7 	bl	8004a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004488:	d10e      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004494:	2b80      	cmp	r3, #128	; 0x80
 8004496:	d107      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 faca 	bl	8004a3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b2:	2b40      	cmp	r3, #64	; 0x40
 80044b4:	d10e      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d107      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f901 	bl	80046d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d10e      	bne.n	8004500 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0320 	and.w	r3, r3, #32
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d107      	bne.n	8004500 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0220 	mvn.w	r2, #32
 80044f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fa8a 	bl	8004a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004500:	bf00      	nop
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_TIM_ConfigClockSource+0x1c>
 8004520:	2302      	movs	r3, #2
 8004522:	e0b6      	b.n	8004692 <HAL_TIM_ConfigClockSource+0x18a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004542:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800454e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004560:	d03e      	beq.n	80045e0 <HAL_TIM_ConfigClockSource+0xd8>
 8004562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004566:	f200 8087 	bhi.w	8004678 <HAL_TIM_ConfigClockSource+0x170>
 800456a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456e:	f000 8086 	beq.w	800467e <HAL_TIM_ConfigClockSource+0x176>
 8004572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004576:	d87f      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x170>
 8004578:	2b70      	cmp	r3, #112	; 0x70
 800457a:	d01a      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0xaa>
 800457c:	2b70      	cmp	r3, #112	; 0x70
 800457e:	d87b      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x170>
 8004580:	2b60      	cmp	r3, #96	; 0x60
 8004582:	d050      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x11e>
 8004584:	2b60      	cmp	r3, #96	; 0x60
 8004586:	d877      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x170>
 8004588:	2b50      	cmp	r3, #80	; 0x50
 800458a:	d03c      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0xfe>
 800458c:	2b50      	cmp	r3, #80	; 0x50
 800458e:	d873      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x170>
 8004590:	2b40      	cmp	r3, #64	; 0x40
 8004592:	d058      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x13e>
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d86f      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x170>
 8004598:	2b30      	cmp	r3, #48	; 0x30
 800459a:	d064      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x15e>
 800459c:	2b30      	cmp	r3, #48	; 0x30
 800459e:	d86b      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x170>
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	d060      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x15e>
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d867      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x170>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d05c      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x15e>
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d05a      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x15e>
 80045b0:	e062      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6899      	ldr	r1, [r3, #8]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f000 f97b 	bl	80048bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	609a      	str	r2, [r3, #8]
      break;
 80045de:	e04f      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	6899      	ldr	r1, [r3, #8]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f000 f964 	bl	80048bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004602:	609a      	str	r2, [r3, #8]
      break;
 8004604:	e03c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6859      	ldr	r1, [r3, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	461a      	mov	r2, r3
 8004614:	f000 f8d8 	bl	80047c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2150      	movs	r1, #80	; 0x50
 800461e:	4618      	mov	r0, r3
 8004620:	f000 f931 	bl	8004886 <TIM_ITRx_SetConfig>
      break;
 8004624:	e02c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6859      	ldr	r1, [r3, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	461a      	mov	r2, r3
 8004634:	f000 f8f7 	bl	8004826 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2160      	movs	r1, #96	; 0x60
 800463e:	4618      	mov	r0, r3
 8004640:	f000 f921 	bl	8004886 <TIM_ITRx_SetConfig>
      break;
 8004644:	e01c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6859      	ldr	r1, [r3, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	461a      	mov	r2, r3
 8004654:	f000 f8b8 	bl	80047c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2140      	movs	r1, #64	; 0x40
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f911 	bl	8004886 <TIM_ITRx_SetConfig>
      break;
 8004664:	e00c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4619      	mov	r1, r3
 8004670:	4610      	mov	r0, r2
 8004672:	f000 f908 	bl	8004886 <TIM_ITRx_SetConfig>
      break;
 8004676:	e003      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      break;
 800467c:	e000      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800467e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004690:	7bfb      	ldrb	r3, [r7, #15]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a2e      	ldr	r2, [pc, #184]	; (80047b8 <TIM_Base_SetConfig+0xcc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d003      	beq.n	800470c <TIM_Base_SetConfig+0x20>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470a:	d108      	bne.n	800471e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a25      	ldr	r2, [pc, #148]	; (80047b8 <TIM_Base_SetConfig+0xcc>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00f      	beq.n	8004746 <TIM_Base_SetConfig+0x5a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472c:	d00b      	beq.n	8004746 <TIM_Base_SetConfig+0x5a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a22      	ldr	r2, [pc, #136]	; (80047bc <TIM_Base_SetConfig+0xd0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d007      	beq.n	8004746 <TIM_Base_SetConfig+0x5a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a21      	ldr	r2, [pc, #132]	; (80047c0 <TIM_Base_SetConfig+0xd4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d003      	beq.n	8004746 <TIM_Base_SetConfig+0x5a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a20      	ldr	r2, [pc, #128]	; (80047c4 <TIM_Base_SetConfig+0xd8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d108      	bne.n	8004758 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a0e      	ldr	r2, [pc, #56]	; (80047b8 <TIM_Base_SetConfig+0xcc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00b      	beq.n	800479c <TIM_Base_SetConfig+0xb0>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a0d      	ldr	r2, [pc, #52]	; (80047bc <TIM_Base_SetConfig+0xd0>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d007      	beq.n	800479c <TIM_Base_SetConfig+0xb0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a0c      	ldr	r2, [pc, #48]	; (80047c0 <TIM_Base_SetConfig+0xd4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <TIM_Base_SetConfig+0xb0>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a0b      	ldr	r2, [pc, #44]	; (80047c4 <TIM_Base_SetConfig+0xd8>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d103      	bne.n	80047a4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	615a      	str	r2, [r3, #20]
}
 80047aa:	bf00      	nop
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40012c00 	.word	0x40012c00
 80047bc:	40014000 	.word	0x40014000
 80047c0:	40014400 	.word	0x40014400
 80047c4:	40014800 	.word	0x40014800

080047c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f023 0201 	bic.w	r2, r3, #1
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f023 030a 	bic.w	r3, r3, #10
 8004804:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004826:	b480      	push	{r7}
 8004828:	b087      	sub	sp, #28
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f023 0210 	bic.w	r2, r3, #16
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004850:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	031b      	lsls	r3, r3, #12
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004862:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	621a      	str	r2, [r3, #32]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f043 0307 	orr.w	r3, r3, #7
 80048a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	609a      	str	r2, [r3, #8]
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	021a      	lsls	r2, r3, #8
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	431a      	orrs	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	609a      	str	r2, [r3, #8]
}
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	2201      	movs	r2, #1
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a1a      	ldr	r2, [r3, #32]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	43db      	mvns	r3, r3
 800491e:	401a      	ands	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a1a      	ldr	r2, [r3, #32]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	fa01 f303 	lsl.w	r3, r1, r3
 8004934:	431a      	orrs	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	621a      	str	r2, [r3, #32]
}
 800493a:	bf00      	nop
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800495c:	2302      	movs	r3, #2
 800495e:	e04f      	b.n	8004a00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a21      	ldr	r2, [pc, #132]	; (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d108      	bne.n	800499c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004990:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a14      	ldr	r2, [pc, #80]	; (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d009      	beq.n	80049d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c8:	d004      	beq.n	80049d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a10      	ldr	r2, [pc, #64]	; (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d10c      	bne.n	80049ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	40012c00 	.word	0x40012c00
 8004a10:	40014000 	.word	0x40014000

08004a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e040      	b.n	8004ae4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fc fa2a 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2224      	movs	r2, #36	; 0x24
 8004a7c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0201 	bic.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8b6 	bl	8004c00 <UART_SetConfig>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e022      	b.n	8004ae4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f9e0 	bl	8004e6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fa67 	bl	8004fb0 <UART_CheckIdleState>
 8004ae2:	4603      	mov	r3, r0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	; 0x28
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	d178      	bne.n	8004bf6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <HAL_UART_Transmit+0x24>
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e071      	b.n	8004bf8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2221      	movs	r2, #33	; 0x21
 8004b20:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b22:	f7fc fb29 	bl	8001178 <HAL_GetTick>
 8004b26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	88fa      	ldrh	r2, [r7, #6]
 8004b2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	88fa      	ldrh	r2, [r7, #6]
 8004b34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b40:	d108      	bne.n	8004b54 <HAL_UART_Transmit+0x68>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d104      	bne.n	8004b54 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	e003      	b.n	8004b5c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b5c:	e030      	b.n	8004bc0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2200      	movs	r2, #0
 8004b66:	2180      	movs	r1, #128	; 0x80
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 fac9 	bl	8005100 <UART_WaitOnFlagUntilTimeout>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d004      	beq.n	8004b7e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e03c      	b.n	8004bf8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10b      	bne.n	8004b9c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	881a      	ldrh	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b90:	b292      	uxth	r2, r2
 8004b92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	3302      	adds	r3, #2
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	e008      	b.n	8004bae <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	781a      	ldrb	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	b292      	uxth	r2, r2
 8004ba6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	3301      	adds	r3, #1
 8004bac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1c8      	bne.n	8004b5e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	2140      	movs	r1, #64	; 0x40
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 fa92 	bl	8005100 <UART_WaitOnFlagUntilTimeout>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d004      	beq.n	8004bec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2220      	movs	r2, #32
 8004be6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e005      	b.n	8004bf8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e000      	b.n	8004bf8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004bf6:	2302      	movs	r3, #2
  }
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3720      	adds	r7, #32
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4b8a      	ldr	r3, [pc, #552]	; (8004e54 <UART_SetConfig+0x254>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6812      	ldr	r2, [r2, #0]
 8004c32:	6979      	ldr	r1, [r7, #20]
 8004c34:	430b      	orrs	r3, r1
 8004c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a78      	ldr	r2, [pc, #480]	; (8004e58 <UART_SetConfig+0x258>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d120      	bne.n	8004cbe <UART_SetConfig+0xbe>
 8004c7c:	4b77      	ldr	r3, [pc, #476]	; (8004e5c <UART_SetConfig+0x25c>)
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d817      	bhi.n	8004cb8 <UART_SetConfig+0xb8>
 8004c88:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <UART_SetConfig+0x90>)
 8004c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8e:	bf00      	nop
 8004c90:	08004ca1 	.word	0x08004ca1
 8004c94:	08004cad 	.word	0x08004cad
 8004c98:	08004cb3 	.word	0x08004cb3
 8004c9c:	08004ca7 	.word	0x08004ca7
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	77fb      	strb	r3, [r7, #31]
 8004ca4:	e01d      	b.n	8004ce2 <UART_SetConfig+0xe2>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	77fb      	strb	r3, [r7, #31]
 8004caa:	e01a      	b.n	8004ce2 <UART_SetConfig+0xe2>
 8004cac:	2304      	movs	r3, #4
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e017      	b.n	8004ce2 <UART_SetConfig+0xe2>
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e014      	b.n	8004ce2 <UART_SetConfig+0xe2>
 8004cb8:	2310      	movs	r3, #16
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e011      	b.n	8004ce2 <UART_SetConfig+0xe2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a67      	ldr	r2, [pc, #412]	; (8004e60 <UART_SetConfig+0x260>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d102      	bne.n	8004cce <UART_SetConfig+0xce>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	77fb      	strb	r3, [r7, #31]
 8004ccc:	e009      	b.n	8004ce2 <UART_SetConfig+0xe2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a64      	ldr	r2, [pc, #400]	; (8004e64 <UART_SetConfig+0x264>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d102      	bne.n	8004cde <UART_SetConfig+0xde>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	77fb      	strb	r3, [r7, #31]
 8004cdc:	e001      	b.n	8004ce2 <UART_SetConfig+0xe2>
 8004cde:	2310      	movs	r3, #16
 8004ce0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cea:	d15a      	bne.n	8004da2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004cec:	7ffb      	ldrb	r3, [r7, #31]
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d827      	bhi.n	8004d42 <UART_SetConfig+0x142>
 8004cf2:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <UART_SetConfig+0xf8>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	08004d1d 	.word	0x08004d1d
 8004cfc:	08004d25 	.word	0x08004d25
 8004d00:	08004d2d 	.word	0x08004d2d
 8004d04:	08004d43 	.word	0x08004d43
 8004d08:	08004d33 	.word	0x08004d33
 8004d0c:	08004d43 	.word	0x08004d43
 8004d10:	08004d43 	.word	0x08004d43
 8004d14:	08004d43 	.word	0x08004d43
 8004d18:	08004d3b 	.word	0x08004d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d1c:	f7fe ff54 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8004d20:	61b8      	str	r0, [r7, #24]
        break;
 8004d22:	e013      	b.n	8004d4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d24:	f7fe ff72 	bl	8003c0c <HAL_RCC_GetPCLK2Freq>
 8004d28:	61b8      	str	r0, [r7, #24]
        break;
 8004d2a:	e00f      	b.n	8004d4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d2c:	4b4e      	ldr	r3, [pc, #312]	; (8004e68 <UART_SetConfig+0x268>)
 8004d2e:	61bb      	str	r3, [r7, #24]
        break;
 8004d30:	e00c      	b.n	8004d4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d32:	f7fe fed3 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8004d36:	61b8      	str	r0, [r7, #24]
        break;
 8004d38:	e008      	b.n	8004d4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d3e:	61bb      	str	r3, [r7, #24]
        break;
 8004d40:	e004      	b.n	8004d4c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	77bb      	strb	r3, [r7, #30]
        break;
 8004d4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d074      	beq.n	8004e3c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	005a      	lsls	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	085b      	lsrs	r3, r3, #1
 8004d5c:	441a      	add	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b0f      	cmp	r3, #15
 8004d6c:	d916      	bls.n	8004d9c <UART_SetConfig+0x19c>
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d74:	d212      	bcs.n	8004d9c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f023 030f 	bic.w	r3, r3, #15
 8004d7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	89fb      	ldrh	r3, [r7, #14]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	89fa      	ldrh	r2, [r7, #14]
 8004d98:	60da      	str	r2, [r3, #12]
 8004d9a:	e04f      	b.n	8004e3c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	77bb      	strb	r3, [r7, #30]
 8004da0:	e04c      	b.n	8004e3c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004da2:	7ffb      	ldrb	r3, [r7, #31]
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d828      	bhi.n	8004dfa <UART_SetConfig+0x1fa>
 8004da8:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <UART_SetConfig+0x1b0>)
 8004daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dae:	bf00      	nop
 8004db0:	08004dd5 	.word	0x08004dd5
 8004db4:	08004ddd 	.word	0x08004ddd
 8004db8:	08004de5 	.word	0x08004de5
 8004dbc:	08004dfb 	.word	0x08004dfb
 8004dc0:	08004deb 	.word	0x08004deb
 8004dc4:	08004dfb 	.word	0x08004dfb
 8004dc8:	08004dfb 	.word	0x08004dfb
 8004dcc:	08004dfb 	.word	0x08004dfb
 8004dd0:	08004df3 	.word	0x08004df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd4:	f7fe fef8 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8004dd8:	61b8      	str	r0, [r7, #24]
        break;
 8004dda:	e013      	b.n	8004e04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ddc:	f7fe ff16 	bl	8003c0c <HAL_RCC_GetPCLK2Freq>
 8004de0:	61b8      	str	r0, [r7, #24]
        break;
 8004de2:	e00f      	b.n	8004e04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004de4:	4b20      	ldr	r3, [pc, #128]	; (8004e68 <UART_SetConfig+0x268>)
 8004de6:	61bb      	str	r3, [r7, #24]
        break;
 8004de8:	e00c      	b.n	8004e04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dea:	f7fe fe77 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8004dee:	61b8      	str	r0, [r7, #24]
        break;
 8004df0:	e008      	b.n	8004e04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004df6:	61bb      	str	r3, [r7, #24]
        break;
 8004df8:	e004      	b.n	8004e04 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	77bb      	strb	r3, [r7, #30]
        break;
 8004e02:	bf00      	nop
    }

    if (pclk != 0U)
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d018      	beq.n	8004e3c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	085a      	lsrs	r2, r3, #1
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	441a      	add	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b0f      	cmp	r3, #15
 8004e22:	d909      	bls.n	8004e38 <UART_SetConfig+0x238>
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2a:	d205      	bcs.n	8004e38 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60da      	str	r2, [r3, #12]
 8004e36:	e001      	b.n	8004e3c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e48:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	efff69f3 	.word	0xefff69f3
 8004e58:	40013800 	.word	0x40013800
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	40004400 	.word	0x40004400
 8004e64:	40004800 	.word	0x40004800
 8004e68:	007a1200 	.word	0x007a1200

08004e6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01a      	beq.n	8004f82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f6a:	d10a      	bne.n	8004f82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	605a      	str	r2, [r3, #4]
  }
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b098      	sub	sp, #96	; 0x60
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fc0:	f7fc f8da 	bl	8001178 <HAL_GetTick>
 8004fc4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d12e      	bne.n	8005032 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f88c 	bl	8005100 <UART_WaitOnFlagUntilTimeout>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d021      	beq.n	8005032 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005002:	653b      	str	r3, [r7, #80]	; 0x50
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800500c:	647b      	str	r3, [r7, #68]	; 0x44
 800500e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800501a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e6      	bne.n	8004fee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e062      	b.n	80050f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b04      	cmp	r3, #4
 800503e:	d149      	bne.n	80050d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005048:	2200      	movs	r2, #0
 800504a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f856 	bl	8005100 <UART_WaitOnFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d03c      	beq.n	80050d4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	623b      	str	r3, [r7, #32]
   return(result);
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800506e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005078:	633b      	str	r3, [r7, #48]	; 0x30
 800507a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800507e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e6      	bne.n	800505a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3308      	adds	r3, #8
 8005092:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	60fb      	str	r3, [r7, #12]
   return(result);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0301 	bic.w	r3, r3, #1
 80050a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3308      	adds	r3, #8
 80050aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ac:	61fa      	str	r2, [r7, #28]
 80050ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	69b9      	ldr	r1, [r7, #24]
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	617b      	str	r3, [r7, #20]
   return(result);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e5      	bne.n	800508c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e011      	b.n	80050f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3758      	adds	r7, #88	; 0x58
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	4613      	mov	r3, r2
 800510e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005110:	e049      	b.n	80051a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005118:	d045      	beq.n	80051a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511a:	f7fc f82d 	bl	8001178 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	429a      	cmp	r2, r3
 8005128:	d302      	bcc.n	8005130 <UART_WaitOnFlagUntilTimeout+0x30>
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e048      	b.n	80051c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0304 	and.w	r3, r3, #4
 800513e:	2b00      	cmp	r3, #0
 8005140:	d031      	beq.n	80051a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b08      	cmp	r3, #8
 800514e:	d110      	bne.n	8005172 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2208      	movs	r2, #8
 8005156:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 f838 	bl	80051ce <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2208      	movs	r2, #8
 8005162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e029      	b.n	80051c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005180:	d111      	bne.n	80051a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800518a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f81e 	bl	80051ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e00f      	b.n	80051c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4013      	ands	r3, r2
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	bf0c      	ite	eq
 80051b6:	2301      	moveq	r3, #1
 80051b8:	2300      	movne	r3, #0
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d0a6      	beq.n	8005112 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b095      	sub	sp, #84	; 0x54
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f4:	643b      	str	r3, [r7, #64]	; 0x40
 80051f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e6      	bne.n	80051d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3308      	adds	r3, #8
 800520e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	61fb      	str	r3, [r7, #28]
   return(result);
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f023 0301 	bic.w	r3, r3, #1
 800521e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3308      	adds	r3, #8
 8005226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005228:	62fa      	str	r2, [r7, #44]	; 0x2c
 800522a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800522e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e5      	bne.n	8005208 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005240:	2b01      	cmp	r3, #1
 8005242:	d118      	bne.n	8005276 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	60bb      	str	r3, [r7, #8]
   return(result);
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f023 0310 	bic.w	r3, r3, #16
 8005258:	647b      	str	r3, [r7, #68]	; 0x44
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005262:	61bb      	str	r3, [r7, #24]
 8005264:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	6979      	ldr	r1, [r7, #20]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	613b      	str	r3, [r7, #16]
   return(result);
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e6      	bne.n	8005244 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	669a      	str	r2, [r3, #104]	; 0x68
}
 800528a:	bf00      	nop
 800528c:	3754      	adds	r7, #84	; 0x54
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
	...

08005298 <__errno>:
 8005298:	4b01      	ldr	r3, [pc, #4]	; (80052a0 <__errno+0x8>)
 800529a:	6818      	ldr	r0, [r3, #0]
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	2000000c 	.word	0x2000000c

080052a4 <__libc_init_array>:
 80052a4:	b570      	push	{r4, r5, r6, lr}
 80052a6:	4d0d      	ldr	r5, [pc, #52]	; (80052dc <__libc_init_array+0x38>)
 80052a8:	4c0d      	ldr	r4, [pc, #52]	; (80052e0 <__libc_init_array+0x3c>)
 80052aa:	1b64      	subs	r4, r4, r5
 80052ac:	10a4      	asrs	r4, r4, #2
 80052ae:	2600      	movs	r6, #0
 80052b0:	42a6      	cmp	r6, r4
 80052b2:	d109      	bne.n	80052c8 <__libc_init_array+0x24>
 80052b4:	4d0b      	ldr	r5, [pc, #44]	; (80052e4 <__libc_init_array+0x40>)
 80052b6:	4c0c      	ldr	r4, [pc, #48]	; (80052e8 <__libc_init_array+0x44>)
 80052b8:	f000 fc8e 	bl	8005bd8 <_init>
 80052bc:	1b64      	subs	r4, r4, r5
 80052be:	10a4      	asrs	r4, r4, #2
 80052c0:	2600      	movs	r6, #0
 80052c2:	42a6      	cmp	r6, r4
 80052c4:	d105      	bne.n	80052d2 <__libc_init_array+0x2e>
 80052c6:	bd70      	pop	{r4, r5, r6, pc}
 80052c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052cc:	4798      	blx	r3
 80052ce:	3601      	adds	r6, #1
 80052d0:	e7ee      	b.n	80052b0 <__libc_init_array+0xc>
 80052d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d6:	4798      	blx	r3
 80052d8:	3601      	adds	r6, #1
 80052da:	e7f2      	b.n	80052c2 <__libc_init_array+0x1e>
 80052dc:	08005c84 	.word	0x08005c84
 80052e0:	08005c84 	.word	0x08005c84
 80052e4:	08005c84 	.word	0x08005c84
 80052e8:	08005c88 	.word	0x08005c88

080052ec <memset>:
 80052ec:	4402      	add	r2, r0
 80052ee:	4603      	mov	r3, r0
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d100      	bne.n	80052f6 <memset+0xa>
 80052f4:	4770      	bx	lr
 80052f6:	f803 1b01 	strb.w	r1, [r3], #1
 80052fa:	e7f9      	b.n	80052f0 <memset+0x4>

080052fc <siprintf>:
 80052fc:	b40e      	push	{r1, r2, r3}
 80052fe:	b500      	push	{lr}
 8005300:	b09c      	sub	sp, #112	; 0x70
 8005302:	ab1d      	add	r3, sp, #116	; 0x74
 8005304:	9002      	str	r0, [sp, #8]
 8005306:	9006      	str	r0, [sp, #24]
 8005308:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800530c:	4809      	ldr	r0, [pc, #36]	; (8005334 <siprintf+0x38>)
 800530e:	9107      	str	r1, [sp, #28]
 8005310:	9104      	str	r1, [sp, #16]
 8005312:	4909      	ldr	r1, [pc, #36]	; (8005338 <siprintf+0x3c>)
 8005314:	f853 2b04 	ldr.w	r2, [r3], #4
 8005318:	9105      	str	r1, [sp, #20]
 800531a:	6800      	ldr	r0, [r0, #0]
 800531c:	9301      	str	r3, [sp, #4]
 800531e:	a902      	add	r1, sp, #8
 8005320:	f000 f868 	bl	80053f4 <_svfiprintf_r>
 8005324:	9b02      	ldr	r3, [sp, #8]
 8005326:	2200      	movs	r2, #0
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	b01c      	add	sp, #112	; 0x70
 800532c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005330:	b003      	add	sp, #12
 8005332:	4770      	bx	lr
 8005334:	2000000c 	.word	0x2000000c
 8005338:	ffff0208 	.word	0xffff0208

0800533c <__ssputs_r>:
 800533c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005340:	688e      	ldr	r6, [r1, #8]
 8005342:	429e      	cmp	r6, r3
 8005344:	4682      	mov	sl, r0
 8005346:	460c      	mov	r4, r1
 8005348:	4690      	mov	r8, r2
 800534a:	461f      	mov	r7, r3
 800534c:	d838      	bhi.n	80053c0 <__ssputs_r+0x84>
 800534e:	898a      	ldrh	r2, [r1, #12]
 8005350:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005354:	d032      	beq.n	80053bc <__ssputs_r+0x80>
 8005356:	6825      	ldr	r5, [r4, #0]
 8005358:	6909      	ldr	r1, [r1, #16]
 800535a:	eba5 0901 	sub.w	r9, r5, r1
 800535e:	6965      	ldr	r5, [r4, #20]
 8005360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005368:	3301      	adds	r3, #1
 800536a:	444b      	add	r3, r9
 800536c:	106d      	asrs	r5, r5, #1
 800536e:	429d      	cmp	r5, r3
 8005370:	bf38      	it	cc
 8005372:	461d      	movcc	r5, r3
 8005374:	0553      	lsls	r3, r2, #21
 8005376:	d531      	bpl.n	80053dc <__ssputs_r+0xa0>
 8005378:	4629      	mov	r1, r5
 800537a:	f000 fb63 	bl	8005a44 <_malloc_r>
 800537e:	4606      	mov	r6, r0
 8005380:	b950      	cbnz	r0, 8005398 <__ssputs_r+0x5c>
 8005382:	230c      	movs	r3, #12
 8005384:	f8ca 3000 	str.w	r3, [sl]
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800538e:	81a3      	strh	r3, [r4, #12]
 8005390:	f04f 30ff 	mov.w	r0, #4294967295
 8005394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005398:	6921      	ldr	r1, [r4, #16]
 800539a:	464a      	mov	r2, r9
 800539c:	f000 fabe 	bl	800591c <memcpy>
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053aa:	81a3      	strh	r3, [r4, #12]
 80053ac:	6126      	str	r6, [r4, #16]
 80053ae:	6165      	str	r5, [r4, #20]
 80053b0:	444e      	add	r6, r9
 80053b2:	eba5 0509 	sub.w	r5, r5, r9
 80053b6:	6026      	str	r6, [r4, #0]
 80053b8:	60a5      	str	r5, [r4, #8]
 80053ba:	463e      	mov	r6, r7
 80053bc:	42be      	cmp	r6, r7
 80053be:	d900      	bls.n	80053c2 <__ssputs_r+0x86>
 80053c0:	463e      	mov	r6, r7
 80053c2:	6820      	ldr	r0, [r4, #0]
 80053c4:	4632      	mov	r2, r6
 80053c6:	4641      	mov	r1, r8
 80053c8:	f000 fab6 	bl	8005938 <memmove>
 80053cc:	68a3      	ldr	r3, [r4, #8]
 80053ce:	1b9b      	subs	r3, r3, r6
 80053d0:	60a3      	str	r3, [r4, #8]
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	4433      	add	r3, r6
 80053d6:	6023      	str	r3, [r4, #0]
 80053d8:	2000      	movs	r0, #0
 80053da:	e7db      	b.n	8005394 <__ssputs_r+0x58>
 80053dc:	462a      	mov	r2, r5
 80053de:	f000 fba5 	bl	8005b2c <_realloc_r>
 80053e2:	4606      	mov	r6, r0
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d1e1      	bne.n	80053ac <__ssputs_r+0x70>
 80053e8:	6921      	ldr	r1, [r4, #16]
 80053ea:	4650      	mov	r0, sl
 80053ec:	f000 fabe 	bl	800596c <_free_r>
 80053f0:	e7c7      	b.n	8005382 <__ssputs_r+0x46>
	...

080053f4 <_svfiprintf_r>:
 80053f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f8:	4698      	mov	r8, r3
 80053fa:	898b      	ldrh	r3, [r1, #12]
 80053fc:	061b      	lsls	r3, r3, #24
 80053fe:	b09d      	sub	sp, #116	; 0x74
 8005400:	4607      	mov	r7, r0
 8005402:	460d      	mov	r5, r1
 8005404:	4614      	mov	r4, r2
 8005406:	d50e      	bpl.n	8005426 <_svfiprintf_r+0x32>
 8005408:	690b      	ldr	r3, [r1, #16]
 800540a:	b963      	cbnz	r3, 8005426 <_svfiprintf_r+0x32>
 800540c:	2140      	movs	r1, #64	; 0x40
 800540e:	f000 fb19 	bl	8005a44 <_malloc_r>
 8005412:	6028      	str	r0, [r5, #0]
 8005414:	6128      	str	r0, [r5, #16]
 8005416:	b920      	cbnz	r0, 8005422 <_svfiprintf_r+0x2e>
 8005418:	230c      	movs	r3, #12
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	f04f 30ff 	mov.w	r0, #4294967295
 8005420:	e0d1      	b.n	80055c6 <_svfiprintf_r+0x1d2>
 8005422:	2340      	movs	r3, #64	; 0x40
 8005424:	616b      	str	r3, [r5, #20]
 8005426:	2300      	movs	r3, #0
 8005428:	9309      	str	r3, [sp, #36]	; 0x24
 800542a:	2320      	movs	r3, #32
 800542c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005430:	f8cd 800c 	str.w	r8, [sp, #12]
 8005434:	2330      	movs	r3, #48	; 0x30
 8005436:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80055e0 <_svfiprintf_r+0x1ec>
 800543a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800543e:	f04f 0901 	mov.w	r9, #1
 8005442:	4623      	mov	r3, r4
 8005444:	469a      	mov	sl, r3
 8005446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800544a:	b10a      	cbz	r2, 8005450 <_svfiprintf_r+0x5c>
 800544c:	2a25      	cmp	r2, #37	; 0x25
 800544e:	d1f9      	bne.n	8005444 <_svfiprintf_r+0x50>
 8005450:	ebba 0b04 	subs.w	fp, sl, r4
 8005454:	d00b      	beq.n	800546e <_svfiprintf_r+0x7a>
 8005456:	465b      	mov	r3, fp
 8005458:	4622      	mov	r2, r4
 800545a:	4629      	mov	r1, r5
 800545c:	4638      	mov	r0, r7
 800545e:	f7ff ff6d 	bl	800533c <__ssputs_r>
 8005462:	3001      	adds	r0, #1
 8005464:	f000 80aa 	beq.w	80055bc <_svfiprintf_r+0x1c8>
 8005468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800546a:	445a      	add	r2, fp
 800546c:	9209      	str	r2, [sp, #36]	; 0x24
 800546e:	f89a 3000 	ldrb.w	r3, [sl]
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 80a2 	beq.w	80055bc <_svfiprintf_r+0x1c8>
 8005478:	2300      	movs	r3, #0
 800547a:	f04f 32ff 	mov.w	r2, #4294967295
 800547e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005482:	f10a 0a01 	add.w	sl, sl, #1
 8005486:	9304      	str	r3, [sp, #16]
 8005488:	9307      	str	r3, [sp, #28]
 800548a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800548e:	931a      	str	r3, [sp, #104]	; 0x68
 8005490:	4654      	mov	r4, sl
 8005492:	2205      	movs	r2, #5
 8005494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005498:	4851      	ldr	r0, [pc, #324]	; (80055e0 <_svfiprintf_r+0x1ec>)
 800549a:	f7fa fea1 	bl	80001e0 <memchr>
 800549e:	9a04      	ldr	r2, [sp, #16]
 80054a0:	b9d8      	cbnz	r0, 80054da <_svfiprintf_r+0xe6>
 80054a2:	06d0      	lsls	r0, r2, #27
 80054a4:	bf44      	itt	mi
 80054a6:	2320      	movmi	r3, #32
 80054a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054ac:	0711      	lsls	r1, r2, #28
 80054ae:	bf44      	itt	mi
 80054b0:	232b      	movmi	r3, #43	; 0x2b
 80054b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054b6:	f89a 3000 	ldrb.w	r3, [sl]
 80054ba:	2b2a      	cmp	r3, #42	; 0x2a
 80054bc:	d015      	beq.n	80054ea <_svfiprintf_r+0xf6>
 80054be:	9a07      	ldr	r2, [sp, #28]
 80054c0:	4654      	mov	r4, sl
 80054c2:	2000      	movs	r0, #0
 80054c4:	f04f 0c0a 	mov.w	ip, #10
 80054c8:	4621      	mov	r1, r4
 80054ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054ce:	3b30      	subs	r3, #48	; 0x30
 80054d0:	2b09      	cmp	r3, #9
 80054d2:	d94e      	bls.n	8005572 <_svfiprintf_r+0x17e>
 80054d4:	b1b0      	cbz	r0, 8005504 <_svfiprintf_r+0x110>
 80054d6:	9207      	str	r2, [sp, #28]
 80054d8:	e014      	b.n	8005504 <_svfiprintf_r+0x110>
 80054da:	eba0 0308 	sub.w	r3, r0, r8
 80054de:	fa09 f303 	lsl.w	r3, r9, r3
 80054e2:	4313      	orrs	r3, r2
 80054e4:	9304      	str	r3, [sp, #16]
 80054e6:	46a2      	mov	sl, r4
 80054e8:	e7d2      	b.n	8005490 <_svfiprintf_r+0x9c>
 80054ea:	9b03      	ldr	r3, [sp, #12]
 80054ec:	1d19      	adds	r1, r3, #4
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	9103      	str	r1, [sp, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	bfbb      	ittet	lt
 80054f6:	425b      	neglt	r3, r3
 80054f8:	f042 0202 	orrlt.w	r2, r2, #2
 80054fc:	9307      	strge	r3, [sp, #28]
 80054fe:	9307      	strlt	r3, [sp, #28]
 8005500:	bfb8      	it	lt
 8005502:	9204      	strlt	r2, [sp, #16]
 8005504:	7823      	ldrb	r3, [r4, #0]
 8005506:	2b2e      	cmp	r3, #46	; 0x2e
 8005508:	d10c      	bne.n	8005524 <_svfiprintf_r+0x130>
 800550a:	7863      	ldrb	r3, [r4, #1]
 800550c:	2b2a      	cmp	r3, #42	; 0x2a
 800550e:	d135      	bne.n	800557c <_svfiprintf_r+0x188>
 8005510:	9b03      	ldr	r3, [sp, #12]
 8005512:	1d1a      	adds	r2, r3, #4
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	9203      	str	r2, [sp, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	bfb8      	it	lt
 800551c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005520:	3402      	adds	r4, #2
 8005522:	9305      	str	r3, [sp, #20]
 8005524:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80055f0 <_svfiprintf_r+0x1fc>
 8005528:	7821      	ldrb	r1, [r4, #0]
 800552a:	2203      	movs	r2, #3
 800552c:	4650      	mov	r0, sl
 800552e:	f7fa fe57 	bl	80001e0 <memchr>
 8005532:	b140      	cbz	r0, 8005546 <_svfiprintf_r+0x152>
 8005534:	2340      	movs	r3, #64	; 0x40
 8005536:	eba0 000a 	sub.w	r0, r0, sl
 800553a:	fa03 f000 	lsl.w	r0, r3, r0
 800553e:	9b04      	ldr	r3, [sp, #16]
 8005540:	4303      	orrs	r3, r0
 8005542:	3401      	adds	r4, #1
 8005544:	9304      	str	r3, [sp, #16]
 8005546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800554a:	4826      	ldr	r0, [pc, #152]	; (80055e4 <_svfiprintf_r+0x1f0>)
 800554c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005550:	2206      	movs	r2, #6
 8005552:	f7fa fe45 	bl	80001e0 <memchr>
 8005556:	2800      	cmp	r0, #0
 8005558:	d038      	beq.n	80055cc <_svfiprintf_r+0x1d8>
 800555a:	4b23      	ldr	r3, [pc, #140]	; (80055e8 <_svfiprintf_r+0x1f4>)
 800555c:	bb1b      	cbnz	r3, 80055a6 <_svfiprintf_r+0x1b2>
 800555e:	9b03      	ldr	r3, [sp, #12]
 8005560:	3307      	adds	r3, #7
 8005562:	f023 0307 	bic.w	r3, r3, #7
 8005566:	3308      	adds	r3, #8
 8005568:	9303      	str	r3, [sp, #12]
 800556a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800556c:	4433      	add	r3, r6
 800556e:	9309      	str	r3, [sp, #36]	; 0x24
 8005570:	e767      	b.n	8005442 <_svfiprintf_r+0x4e>
 8005572:	fb0c 3202 	mla	r2, ip, r2, r3
 8005576:	460c      	mov	r4, r1
 8005578:	2001      	movs	r0, #1
 800557a:	e7a5      	b.n	80054c8 <_svfiprintf_r+0xd4>
 800557c:	2300      	movs	r3, #0
 800557e:	3401      	adds	r4, #1
 8005580:	9305      	str	r3, [sp, #20]
 8005582:	4619      	mov	r1, r3
 8005584:	f04f 0c0a 	mov.w	ip, #10
 8005588:	4620      	mov	r0, r4
 800558a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800558e:	3a30      	subs	r2, #48	; 0x30
 8005590:	2a09      	cmp	r2, #9
 8005592:	d903      	bls.n	800559c <_svfiprintf_r+0x1a8>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0c5      	beq.n	8005524 <_svfiprintf_r+0x130>
 8005598:	9105      	str	r1, [sp, #20]
 800559a:	e7c3      	b.n	8005524 <_svfiprintf_r+0x130>
 800559c:	fb0c 2101 	mla	r1, ip, r1, r2
 80055a0:	4604      	mov	r4, r0
 80055a2:	2301      	movs	r3, #1
 80055a4:	e7f0      	b.n	8005588 <_svfiprintf_r+0x194>
 80055a6:	ab03      	add	r3, sp, #12
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	462a      	mov	r2, r5
 80055ac:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <_svfiprintf_r+0x1f8>)
 80055ae:	a904      	add	r1, sp, #16
 80055b0:	4638      	mov	r0, r7
 80055b2:	f3af 8000 	nop.w
 80055b6:	1c42      	adds	r2, r0, #1
 80055b8:	4606      	mov	r6, r0
 80055ba:	d1d6      	bne.n	800556a <_svfiprintf_r+0x176>
 80055bc:	89ab      	ldrh	r3, [r5, #12]
 80055be:	065b      	lsls	r3, r3, #25
 80055c0:	f53f af2c 	bmi.w	800541c <_svfiprintf_r+0x28>
 80055c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055c6:	b01d      	add	sp, #116	; 0x74
 80055c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055cc:	ab03      	add	r3, sp, #12
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	462a      	mov	r2, r5
 80055d2:	4b06      	ldr	r3, [pc, #24]	; (80055ec <_svfiprintf_r+0x1f8>)
 80055d4:	a904      	add	r1, sp, #16
 80055d6:	4638      	mov	r0, r7
 80055d8:	f000 f87a 	bl	80056d0 <_printf_i>
 80055dc:	e7eb      	b.n	80055b6 <_svfiprintf_r+0x1c2>
 80055de:	bf00      	nop
 80055e0:	08005c50 	.word	0x08005c50
 80055e4:	08005c5a 	.word	0x08005c5a
 80055e8:	00000000 	.word	0x00000000
 80055ec:	0800533d 	.word	0x0800533d
 80055f0:	08005c56 	.word	0x08005c56

080055f4 <_printf_common>:
 80055f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f8:	4616      	mov	r6, r2
 80055fa:	4699      	mov	r9, r3
 80055fc:	688a      	ldr	r2, [r1, #8]
 80055fe:	690b      	ldr	r3, [r1, #16]
 8005600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005604:	4293      	cmp	r3, r2
 8005606:	bfb8      	it	lt
 8005608:	4613      	movlt	r3, r2
 800560a:	6033      	str	r3, [r6, #0]
 800560c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005610:	4607      	mov	r7, r0
 8005612:	460c      	mov	r4, r1
 8005614:	b10a      	cbz	r2, 800561a <_printf_common+0x26>
 8005616:	3301      	adds	r3, #1
 8005618:	6033      	str	r3, [r6, #0]
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	0699      	lsls	r1, r3, #26
 800561e:	bf42      	ittt	mi
 8005620:	6833      	ldrmi	r3, [r6, #0]
 8005622:	3302      	addmi	r3, #2
 8005624:	6033      	strmi	r3, [r6, #0]
 8005626:	6825      	ldr	r5, [r4, #0]
 8005628:	f015 0506 	ands.w	r5, r5, #6
 800562c:	d106      	bne.n	800563c <_printf_common+0x48>
 800562e:	f104 0a19 	add.w	sl, r4, #25
 8005632:	68e3      	ldr	r3, [r4, #12]
 8005634:	6832      	ldr	r2, [r6, #0]
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	42ab      	cmp	r3, r5
 800563a:	dc26      	bgt.n	800568a <_printf_common+0x96>
 800563c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005640:	1e13      	subs	r3, r2, #0
 8005642:	6822      	ldr	r2, [r4, #0]
 8005644:	bf18      	it	ne
 8005646:	2301      	movne	r3, #1
 8005648:	0692      	lsls	r2, r2, #26
 800564a:	d42b      	bmi.n	80056a4 <_printf_common+0xb0>
 800564c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005650:	4649      	mov	r1, r9
 8005652:	4638      	mov	r0, r7
 8005654:	47c0      	blx	r8
 8005656:	3001      	adds	r0, #1
 8005658:	d01e      	beq.n	8005698 <_printf_common+0xa4>
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	68e5      	ldr	r5, [r4, #12]
 800565e:	6832      	ldr	r2, [r6, #0]
 8005660:	f003 0306 	and.w	r3, r3, #6
 8005664:	2b04      	cmp	r3, #4
 8005666:	bf08      	it	eq
 8005668:	1aad      	subeq	r5, r5, r2
 800566a:	68a3      	ldr	r3, [r4, #8]
 800566c:	6922      	ldr	r2, [r4, #16]
 800566e:	bf0c      	ite	eq
 8005670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005674:	2500      	movne	r5, #0
 8005676:	4293      	cmp	r3, r2
 8005678:	bfc4      	itt	gt
 800567a:	1a9b      	subgt	r3, r3, r2
 800567c:	18ed      	addgt	r5, r5, r3
 800567e:	2600      	movs	r6, #0
 8005680:	341a      	adds	r4, #26
 8005682:	42b5      	cmp	r5, r6
 8005684:	d11a      	bne.n	80056bc <_printf_common+0xc8>
 8005686:	2000      	movs	r0, #0
 8005688:	e008      	b.n	800569c <_printf_common+0xa8>
 800568a:	2301      	movs	r3, #1
 800568c:	4652      	mov	r2, sl
 800568e:	4649      	mov	r1, r9
 8005690:	4638      	mov	r0, r7
 8005692:	47c0      	blx	r8
 8005694:	3001      	adds	r0, #1
 8005696:	d103      	bne.n	80056a0 <_printf_common+0xac>
 8005698:	f04f 30ff 	mov.w	r0, #4294967295
 800569c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a0:	3501      	adds	r5, #1
 80056a2:	e7c6      	b.n	8005632 <_printf_common+0x3e>
 80056a4:	18e1      	adds	r1, r4, r3
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	2030      	movs	r0, #48	; 0x30
 80056aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056ae:	4422      	add	r2, r4
 80056b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056b8:	3302      	adds	r3, #2
 80056ba:	e7c7      	b.n	800564c <_printf_common+0x58>
 80056bc:	2301      	movs	r3, #1
 80056be:	4622      	mov	r2, r4
 80056c0:	4649      	mov	r1, r9
 80056c2:	4638      	mov	r0, r7
 80056c4:	47c0      	blx	r8
 80056c6:	3001      	adds	r0, #1
 80056c8:	d0e6      	beq.n	8005698 <_printf_common+0xa4>
 80056ca:	3601      	adds	r6, #1
 80056cc:	e7d9      	b.n	8005682 <_printf_common+0x8e>
	...

080056d0 <_printf_i>:
 80056d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056d4:	7e0f      	ldrb	r7, [r1, #24]
 80056d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056d8:	2f78      	cmp	r7, #120	; 0x78
 80056da:	4691      	mov	r9, r2
 80056dc:	4680      	mov	r8, r0
 80056de:	460c      	mov	r4, r1
 80056e0:	469a      	mov	sl, r3
 80056e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056e6:	d807      	bhi.n	80056f8 <_printf_i+0x28>
 80056e8:	2f62      	cmp	r7, #98	; 0x62
 80056ea:	d80a      	bhi.n	8005702 <_printf_i+0x32>
 80056ec:	2f00      	cmp	r7, #0
 80056ee:	f000 80d8 	beq.w	80058a2 <_printf_i+0x1d2>
 80056f2:	2f58      	cmp	r7, #88	; 0x58
 80056f4:	f000 80a3 	beq.w	800583e <_printf_i+0x16e>
 80056f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005700:	e03a      	b.n	8005778 <_printf_i+0xa8>
 8005702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005706:	2b15      	cmp	r3, #21
 8005708:	d8f6      	bhi.n	80056f8 <_printf_i+0x28>
 800570a:	a101      	add	r1, pc, #4	; (adr r1, 8005710 <_printf_i+0x40>)
 800570c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005710:	08005769 	.word	0x08005769
 8005714:	0800577d 	.word	0x0800577d
 8005718:	080056f9 	.word	0x080056f9
 800571c:	080056f9 	.word	0x080056f9
 8005720:	080056f9 	.word	0x080056f9
 8005724:	080056f9 	.word	0x080056f9
 8005728:	0800577d 	.word	0x0800577d
 800572c:	080056f9 	.word	0x080056f9
 8005730:	080056f9 	.word	0x080056f9
 8005734:	080056f9 	.word	0x080056f9
 8005738:	080056f9 	.word	0x080056f9
 800573c:	08005889 	.word	0x08005889
 8005740:	080057ad 	.word	0x080057ad
 8005744:	0800586b 	.word	0x0800586b
 8005748:	080056f9 	.word	0x080056f9
 800574c:	080056f9 	.word	0x080056f9
 8005750:	080058ab 	.word	0x080058ab
 8005754:	080056f9 	.word	0x080056f9
 8005758:	080057ad 	.word	0x080057ad
 800575c:	080056f9 	.word	0x080056f9
 8005760:	080056f9 	.word	0x080056f9
 8005764:	08005873 	.word	0x08005873
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	1d1a      	adds	r2, r3, #4
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	602a      	str	r2, [r5, #0]
 8005770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005778:	2301      	movs	r3, #1
 800577a:	e0a3      	b.n	80058c4 <_printf_i+0x1f4>
 800577c:	6820      	ldr	r0, [r4, #0]
 800577e:	6829      	ldr	r1, [r5, #0]
 8005780:	0606      	lsls	r6, r0, #24
 8005782:	f101 0304 	add.w	r3, r1, #4
 8005786:	d50a      	bpl.n	800579e <_printf_i+0xce>
 8005788:	680e      	ldr	r6, [r1, #0]
 800578a:	602b      	str	r3, [r5, #0]
 800578c:	2e00      	cmp	r6, #0
 800578e:	da03      	bge.n	8005798 <_printf_i+0xc8>
 8005790:	232d      	movs	r3, #45	; 0x2d
 8005792:	4276      	negs	r6, r6
 8005794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005798:	485e      	ldr	r0, [pc, #376]	; (8005914 <_printf_i+0x244>)
 800579a:	230a      	movs	r3, #10
 800579c:	e019      	b.n	80057d2 <_printf_i+0x102>
 800579e:	680e      	ldr	r6, [r1, #0]
 80057a0:	602b      	str	r3, [r5, #0]
 80057a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057a6:	bf18      	it	ne
 80057a8:	b236      	sxthne	r6, r6
 80057aa:	e7ef      	b.n	800578c <_printf_i+0xbc>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	6820      	ldr	r0, [r4, #0]
 80057b0:	1d19      	adds	r1, r3, #4
 80057b2:	6029      	str	r1, [r5, #0]
 80057b4:	0601      	lsls	r1, r0, #24
 80057b6:	d501      	bpl.n	80057bc <_printf_i+0xec>
 80057b8:	681e      	ldr	r6, [r3, #0]
 80057ba:	e002      	b.n	80057c2 <_printf_i+0xf2>
 80057bc:	0646      	lsls	r6, r0, #25
 80057be:	d5fb      	bpl.n	80057b8 <_printf_i+0xe8>
 80057c0:	881e      	ldrh	r6, [r3, #0]
 80057c2:	4854      	ldr	r0, [pc, #336]	; (8005914 <_printf_i+0x244>)
 80057c4:	2f6f      	cmp	r7, #111	; 0x6f
 80057c6:	bf0c      	ite	eq
 80057c8:	2308      	moveq	r3, #8
 80057ca:	230a      	movne	r3, #10
 80057cc:	2100      	movs	r1, #0
 80057ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057d2:	6865      	ldr	r5, [r4, #4]
 80057d4:	60a5      	str	r5, [r4, #8]
 80057d6:	2d00      	cmp	r5, #0
 80057d8:	bfa2      	ittt	ge
 80057da:	6821      	ldrge	r1, [r4, #0]
 80057dc:	f021 0104 	bicge.w	r1, r1, #4
 80057e0:	6021      	strge	r1, [r4, #0]
 80057e2:	b90e      	cbnz	r6, 80057e8 <_printf_i+0x118>
 80057e4:	2d00      	cmp	r5, #0
 80057e6:	d04d      	beq.n	8005884 <_printf_i+0x1b4>
 80057e8:	4615      	mov	r5, r2
 80057ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80057ee:	fb03 6711 	mls	r7, r3, r1, r6
 80057f2:	5dc7      	ldrb	r7, [r0, r7]
 80057f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057f8:	4637      	mov	r7, r6
 80057fa:	42bb      	cmp	r3, r7
 80057fc:	460e      	mov	r6, r1
 80057fe:	d9f4      	bls.n	80057ea <_printf_i+0x11a>
 8005800:	2b08      	cmp	r3, #8
 8005802:	d10b      	bne.n	800581c <_printf_i+0x14c>
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	07de      	lsls	r6, r3, #31
 8005808:	d508      	bpl.n	800581c <_printf_i+0x14c>
 800580a:	6923      	ldr	r3, [r4, #16]
 800580c:	6861      	ldr	r1, [r4, #4]
 800580e:	4299      	cmp	r1, r3
 8005810:	bfde      	ittt	le
 8005812:	2330      	movle	r3, #48	; 0x30
 8005814:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005818:	f105 35ff 	addle.w	r5, r5, #4294967295
 800581c:	1b52      	subs	r2, r2, r5
 800581e:	6122      	str	r2, [r4, #16]
 8005820:	f8cd a000 	str.w	sl, [sp]
 8005824:	464b      	mov	r3, r9
 8005826:	aa03      	add	r2, sp, #12
 8005828:	4621      	mov	r1, r4
 800582a:	4640      	mov	r0, r8
 800582c:	f7ff fee2 	bl	80055f4 <_printf_common>
 8005830:	3001      	adds	r0, #1
 8005832:	d14c      	bne.n	80058ce <_printf_i+0x1fe>
 8005834:	f04f 30ff 	mov.w	r0, #4294967295
 8005838:	b004      	add	sp, #16
 800583a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800583e:	4835      	ldr	r0, [pc, #212]	; (8005914 <_printf_i+0x244>)
 8005840:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005844:	6829      	ldr	r1, [r5, #0]
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	f851 6b04 	ldr.w	r6, [r1], #4
 800584c:	6029      	str	r1, [r5, #0]
 800584e:	061d      	lsls	r5, r3, #24
 8005850:	d514      	bpl.n	800587c <_printf_i+0x1ac>
 8005852:	07df      	lsls	r7, r3, #31
 8005854:	bf44      	itt	mi
 8005856:	f043 0320 	orrmi.w	r3, r3, #32
 800585a:	6023      	strmi	r3, [r4, #0]
 800585c:	b91e      	cbnz	r6, 8005866 <_printf_i+0x196>
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	f023 0320 	bic.w	r3, r3, #32
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	2310      	movs	r3, #16
 8005868:	e7b0      	b.n	80057cc <_printf_i+0xfc>
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	f043 0320 	orr.w	r3, r3, #32
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	2378      	movs	r3, #120	; 0x78
 8005874:	4828      	ldr	r0, [pc, #160]	; (8005918 <_printf_i+0x248>)
 8005876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800587a:	e7e3      	b.n	8005844 <_printf_i+0x174>
 800587c:	0659      	lsls	r1, r3, #25
 800587e:	bf48      	it	mi
 8005880:	b2b6      	uxthmi	r6, r6
 8005882:	e7e6      	b.n	8005852 <_printf_i+0x182>
 8005884:	4615      	mov	r5, r2
 8005886:	e7bb      	b.n	8005800 <_printf_i+0x130>
 8005888:	682b      	ldr	r3, [r5, #0]
 800588a:	6826      	ldr	r6, [r4, #0]
 800588c:	6961      	ldr	r1, [r4, #20]
 800588e:	1d18      	adds	r0, r3, #4
 8005890:	6028      	str	r0, [r5, #0]
 8005892:	0635      	lsls	r5, r6, #24
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	d501      	bpl.n	800589c <_printf_i+0x1cc>
 8005898:	6019      	str	r1, [r3, #0]
 800589a:	e002      	b.n	80058a2 <_printf_i+0x1d2>
 800589c:	0670      	lsls	r0, r6, #25
 800589e:	d5fb      	bpl.n	8005898 <_printf_i+0x1c8>
 80058a0:	8019      	strh	r1, [r3, #0]
 80058a2:	2300      	movs	r3, #0
 80058a4:	6123      	str	r3, [r4, #16]
 80058a6:	4615      	mov	r5, r2
 80058a8:	e7ba      	b.n	8005820 <_printf_i+0x150>
 80058aa:	682b      	ldr	r3, [r5, #0]
 80058ac:	1d1a      	adds	r2, r3, #4
 80058ae:	602a      	str	r2, [r5, #0]
 80058b0:	681d      	ldr	r5, [r3, #0]
 80058b2:	6862      	ldr	r2, [r4, #4]
 80058b4:	2100      	movs	r1, #0
 80058b6:	4628      	mov	r0, r5
 80058b8:	f7fa fc92 	bl	80001e0 <memchr>
 80058bc:	b108      	cbz	r0, 80058c2 <_printf_i+0x1f2>
 80058be:	1b40      	subs	r0, r0, r5
 80058c0:	6060      	str	r0, [r4, #4]
 80058c2:	6863      	ldr	r3, [r4, #4]
 80058c4:	6123      	str	r3, [r4, #16]
 80058c6:	2300      	movs	r3, #0
 80058c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058cc:	e7a8      	b.n	8005820 <_printf_i+0x150>
 80058ce:	6923      	ldr	r3, [r4, #16]
 80058d0:	462a      	mov	r2, r5
 80058d2:	4649      	mov	r1, r9
 80058d4:	4640      	mov	r0, r8
 80058d6:	47d0      	blx	sl
 80058d8:	3001      	adds	r0, #1
 80058da:	d0ab      	beq.n	8005834 <_printf_i+0x164>
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	079b      	lsls	r3, r3, #30
 80058e0:	d413      	bmi.n	800590a <_printf_i+0x23a>
 80058e2:	68e0      	ldr	r0, [r4, #12]
 80058e4:	9b03      	ldr	r3, [sp, #12]
 80058e6:	4298      	cmp	r0, r3
 80058e8:	bfb8      	it	lt
 80058ea:	4618      	movlt	r0, r3
 80058ec:	e7a4      	b.n	8005838 <_printf_i+0x168>
 80058ee:	2301      	movs	r3, #1
 80058f0:	4632      	mov	r2, r6
 80058f2:	4649      	mov	r1, r9
 80058f4:	4640      	mov	r0, r8
 80058f6:	47d0      	blx	sl
 80058f8:	3001      	adds	r0, #1
 80058fa:	d09b      	beq.n	8005834 <_printf_i+0x164>
 80058fc:	3501      	adds	r5, #1
 80058fe:	68e3      	ldr	r3, [r4, #12]
 8005900:	9903      	ldr	r1, [sp, #12]
 8005902:	1a5b      	subs	r3, r3, r1
 8005904:	42ab      	cmp	r3, r5
 8005906:	dcf2      	bgt.n	80058ee <_printf_i+0x21e>
 8005908:	e7eb      	b.n	80058e2 <_printf_i+0x212>
 800590a:	2500      	movs	r5, #0
 800590c:	f104 0619 	add.w	r6, r4, #25
 8005910:	e7f5      	b.n	80058fe <_printf_i+0x22e>
 8005912:	bf00      	nop
 8005914:	08005c61 	.word	0x08005c61
 8005918:	08005c72 	.word	0x08005c72

0800591c <memcpy>:
 800591c:	440a      	add	r2, r1
 800591e:	4291      	cmp	r1, r2
 8005920:	f100 33ff 	add.w	r3, r0, #4294967295
 8005924:	d100      	bne.n	8005928 <memcpy+0xc>
 8005926:	4770      	bx	lr
 8005928:	b510      	push	{r4, lr}
 800592a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800592e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005932:	4291      	cmp	r1, r2
 8005934:	d1f9      	bne.n	800592a <memcpy+0xe>
 8005936:	bd10      	pop	{r4, pc}

08005938 <memmove>:
 8005938:	4288      	cmp	r0, r1
 800593a:	b510      	push	{r4, lr}
 800593c:	eb01 0402 	add.w	r4, r1, r2
 8005940:	d902      	bls.n	8005948 <memmove+0x10>
 8005942:	4284      	cmp	r4, r0
 8005944:	4623      	mov	r3, r4
 8005946:	d807      	bhi.n	8005958 <memmove+0x20>
 8005948:	1e43      	subs	r3, r0, #1
 800594a:	42a1      	cmp	r1, r4
 800594c:	d008      	beq.n	8005960 <memmove+0x28>
 800594e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005952:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005956:	e7f8      	b.n	800594a <memmove+0x12>
 8005958:	4402      	add	r2, r0
 800595a:	4601      	mov	r1, r0
 800595c:	428a      	cmp	r2, r1
 800595e:	d100      	bne.n	8005962 <memmove+0x2a>
 8005960:	bd10      	pop	{r4, pc}
 8005962:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005966:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800596a:	e7f7      	b.n	800595c <memmove+0x24>

0800596c <_free_r>:
 800596c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800596e:	2900      	cmp	r1, #0
 8005970:	d044      	beq.n	80059fc <_free_r+0x90>
 8005972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005976:	9001      	str	r0, [sp, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	f1a1 0404 	sub.w	r4, r1, #4
 800597e:	bfb8      	it	lt
 8005980:	18e4      	addlt	r4, r4, r3
 8005982:	f000 f913 	bl	8005bac <__malloc_lock>
 8005986:	4a1e      	ldr	r2, [pc, #120]	; (8005a00 <_free_r+0x94>)
 8005988:	9801      	ldr	r0, [sp, #4]
 800598a:	6813      	ldr	r3, [r2, #0]
 800598c:	b933      	cbnz	r3, 800599c <_free_r+0x30>
 800598e:	6063      	str	r3, [r4, #4]
 8005990:	6014      	str	r4, [r2, #0]
 8005992:	b003      	add	sp, #12
 8005994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005998:	f000 b90e 	b.w	8005bb8 <__malloc_unlock>
 800599c:	42a3      	cmp	r3, r4
 800599e:	d908      	bls.n	80059b2 <_free_r+0x46>
 80059a0:	6825      	ldr	r5, [r4, #0]
 80059a2:	1961      	adds	r1, r4, r5
 80059a4:	428b      	cmp	r3, r1
 80059a6:	bf01      	itttt	eq
 80059a8:	6819      	ldreq	r1, [r3, #0]
 80059aa:	685b      	ldreq	r3, [r3, #4]
 80059ac:	1949      	addeq	r1, r1, r5
 80059ae:	6021      	streq	r1, [r4, #0]
 80059b0:	e7ed      	b.n	800598e <_free_r+0x22>
 80059b2:	461a      	mov	r2, r3
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	b10b      	cbz	r3, 80059bc <_free_r+0x50>
 80059b8:	42a3      	cmp	r3, r4
 80059ba:	d9fa      	bls.n	80059b2 <_free_r+0x46>
 80059bc:	6811      	ldr	r1, [r2, #0]
 80059be:	1855      	adds	r5, r2, r1
 80059c0:	42a5      	cmp	r5, r4
 80059c2:	d10b      	bne.n	80059dc <_free_r+0x70>
 80059c4:	6824      	ldr	r4, [r4, #0]
 80059c6:	4421      	add	r1, r4
 80059c8:	1854      	adds	r4, r2, r1
 80059ca:	42a3      	cmp	r3, r4
 80059cc:	6011      	str	r1, [r2, #0]
 80059ce:	d1e0      	bne.n	8005992 <_free_r+0x26>
 80059d0:	681c      	ldr	r4, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	6053      	str	r3, [r2, #4]
 80059d6:	4421      	add	r1, r4
 80059d8:	6011      	str	r1, [r2, #0]
 80059da:	e7da      	b.n	8005992 <_free_r+0x26>
 80059dc:	d902      	bls.n	80059e4 <_free_r+0x78>
 80059de:	230c      	movs	r3, #12
 80059e0:	6003      	str	r3, [r0, #0]
 80059e2:	e7d6      	b.n	8005992 <_free_r+0x26>
 80059e4:	6825      	ldr	r5, [r4, #0]
 80059e6:	1961      	adds	r1, r4, r5
 80059e8:	428b      	cmp	r3, r1
 80059ea:	bf04      	itt	eq
 80059ec:	6819      	ldreq	r1, [r3, #0]
 80059ee:	685b      	ldreq	r3, [r3, #4]
 80059f0:	6063      	str	r3, [r4, #4]
 80059f2:	bf04      	itt	eq
 80059f4:	1949      	addeq	r1, r1, r5
 80059f6:	6021      	streq	r1, [r4, #0]
 80059f8:	6054      	str	r4, [r2, #4]
 80059fa:	e7ca      	b.n	8005992 <_free_r+0x26>
 80059fc:	b003      	add	sp, #12
 80059fe:	bd30      	pop	{r4, r5, pc}
 8005a00:	2000045c 	.word	0x2000045c

08005a04 <sbrk_aligned>:
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	4e0e      	ldr	r6, [pc, #56]	; (8005a40 <sbrk_aligned+0x3c>)
 8005a08:	460c      	mov	r4, r1
 8005a0a:	6831      	ldr	r1, [r6, #0]
 8005a0c:	4605      	mov	r5, r0
 8005a0e:	b911      	cbnz	r1, 8005a16 <sbrk_aligned+0x12>
 8005a10:	f000 f8bc 	bl	8005b8c <_sbrk_r>
 8005a14:	6030      	str	r0, [r6, #0]
 8005a16:	4621      	mov	r1, r4
 8005a18:	4628      	mov	r0, r5
 8005a1a:	f000 f8b7 	bl	8005b8c <_sbrk_r>
 8005a1e:	1c43      	adds	r3, r0, #1
 8005a20:	d00a      	beq.n	8005a38 <sbrk_aligned+0x34>
 8005a22:	1cc4      	adds	r4, r0, #3
 8005a24:	f024 0403 	bic.w	r4, r4, #3
 8005a28:	42a0      	cmp	r0, r4
 8005a2a:	d007      	beq.n	8005a3c <sbrk_aligned+0x38>
 8005a2c:	1a21      	subs	r1, r4, r0
 8005a2e:	4628      	mov	r0, r5
 8005a30:	f000 f8ac 	bl	8005b8c <_sbrk_r>
 8005a34:	3001      	adds	r0, #1
 8005a36:	d101      	bne.n	8005a3c <sbrk_aligned+0x38>
 8005a38:	f04f 34ff 	mov.w	r4, #4294967295
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	bd70      	pop	{r4, r5, r6, pc}
 8005a40:	20000460 	.word	0x20000460

08005a44 <_malloc_r>:
 8005a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a48:	1ccd      	adds	r5, r1, #3
 8005a4a:	f025 0503 	bic.w	r5, r5, #3
 8005a4e:	3508      	adds	r5, #8
 8005a50:	2d0c      	cmp	r5, #12
 8005a52:	bf38      	it	cc
 8005a54:	250c      	movcc	r5, #12
 8005a56:	2d00      	cmp	r5, #0
 8005a58:	4607      	mov	r7, r0
 8005a5a:	db01      	blt.n	8005a60 <_malloc_r+0x1c>
 8005a5c:	42a9      	cmp	r1, r5
 8005a5e:	d905      	bls.n	8005a6c <_malloc_r+0x28>
 8005a60:	230c      	movs	r3, #12
 8005a62:	603b      	str	r3, [r7, #0]
 8005a64:	2600      	movs	r6, #0
 8005a66:	4630      	mov	r0, r6
 8005a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a6c:	4e2e      	ldr	r6, [pc, #184]	; (8005b28 <_malloc_r+0xe4>)
 8005a6e:	f000 f89d 	bl	8005bac <__malloc_lock>
 8005a72:	6833      	ldr	r3, [r6, #0]
 8005a74:	461c      	mov	r4, r3
 8005a76:	bb34      	cbnz	r4, 8005ac6 <_malloc_r+0x82>
 8005a78:	4629      	mov	r1, r5
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	f7ff ffc2 	bl	8005a04 <sbrk_aligned>
 8005a80:	1c43      	adds	r3, r0, #1
 8005a82:	4604      	mov	r4, r0
 8005a84:	d14d      	bne.n	8005b22 <_malloc_r+0xde>
 8005a86:	6834      	ldr	r4, [r6, #0]
 8005a88:	4626      	mov	r6, r4
 8005a8a:	2e00      	cmp	r6, #0
 8005a8c:	d140      	bne.n	8005b10 <_malloc_r+0xcc>
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	4631      	mov	r1, r6
 8005a92:	4638      	mov	r0, r7
 8005a94:	eb04 0803 	add.w	r8, r4, r3
 8005a98:	f000 f878 	bl	8005b8c <_sbrk_r>
 8005a9c:	4580      	cmp	r8, r0
 8005a9e:	d13a      	bne.n	8005b16 <_malloc_r+0xd2>
 8005aa0:	6821      	ldr	r1, [r4, #0]
 8005aa2:	3503      	adds	r5, #3
 8005aa4:	1a6d      	subs	r5, r5, r1
 8005aa6:	f025 0503 	bic.w	r5, r5, #3
 8005aaa:	3508      	adds	r5, #8
 8005aac:	2d0c      	cmp	r5, #12
 8005aae:	bf38      	it	cc
 8005ab0:	250c      	movcc	r5, #12
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	4638      	mov	r0, r7
 8005ab6:	f7ff ffa5 	bl	8005a04 <sbrk_aligned>
 8005aba:	3001      	adds	r0, #1
 8005abc:	d02b      	beq.n	8005b16 <_malloc_r+0xd2>
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	442b      	add	r3, r5
 8005ac2:	6023      	str	r3, [r4, #0]
 8005ac4:	e00e      	b.n	8005ae4 <_malloc_r+0xa0>
 8005ac6:	6822      	ldr	r2, [r4, #0]
 8005ac8:	1b52      	subs	r2, r2, r5
 8005aca:	d41e      	bmi.n	8005b0a <_malloc_r+0xc6>
 8005acc:	2a0b      	cmp	r2, #11
 8005ace:	d916      	bls.n	8005afe <_malloc_r+0xba>
 8005ad0:	1961      	adds	r1, r4, r5
 8005ad2:	42a3      	cmp	r3, r4
 8005ad4:	6025      	str	r5, [r4, #0]
 8005ad6:	bf18      	it	ne
 8005ad8:	6059      	strne	r1, [r3, #4]
 8005ada:	6863      	ldr	r3, [r4, #4]
 8005adc:	bf08      	it	eq
 8005ade:	6031      	streq	r1, [r6, #0]
 8005ae0:	5162      	str	r2, [r4, r5]
 8005ae2:	604b      	str	r3, [r1, #4]
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	f104 060b 	add.w	r6, r4, #11
 8005aea:	f000 f865 	bl	8005bb8 <__malloc_unlock>
 8005aee:	f026 0607 	bic.w	r6, r6, #7
 8005af2:	1d23      	adds	r3, r4, #4
 8005af4:	1af2      	subs	r2, r6, r3
 8005af6:	d0b6      	beq.n	8005a66 <_malloc_r+0x22>
 8005af8:	1b9b      	subs	r3, r3, r6
 8005afa:	50a3      	str	r3, [r4, r2]
 8005afc:	e7b3      	b.n	8005a66 <_malloc_r+0x22>
 8005afe:	6862      	ldr	r2, [r4, #4]
 8005b00:	42a3      	cmp	r3, r4
 8005b02:	bf0c      	ite	eq
 8005b04:	6032      	streq	r2, [r6, #0]
 8005b06:	605a      	strne	r2, [r3, #4]
 8005b08:	e7ec      	b.n	8005ae4 <_malloc_r+0xa0>
 8005b0a:	4623      	mov	r3, r4
 8005b0c:	6864      	ldr	r4, [r4, #4]
 8005b0e:	e7b2      	b.n	8005a76 <_malloc_r+0x32>
 8005b10:	4634      	mov	r4, r6
 8005b12:	6876      	ldr	r6, [r6, #4]
 8005b14:	e7b9      	b.n	8005a8a <_malloc_r+0x46>
 8005b16:	230c      	movs	r3, #12
 8005b18:	603b      	str	r3, [r7, #0]
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	f000 f84c 	bl	8005bb8 <__malloc_unlock>
 8005b20:	e7a1      	b.n	8005a66 <_malloc_r+0x22>
 8005b22:	6025      	str	r5, [r4, #0]
 8005b24:	e7de      	b.n	8005ae4 <_malloc_r+0xa0>
 8005b26:	bf00      	nop
 8005b28:	2000045c 	.word	0x2000045c

08005b2c <_realloc_r>:
 8005b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b30:	4680      	mov	r8, r0
 8005b32:	4614      	mov	r4, r2
 8005b34:	460e      	mov	r6, r1
 8005b36:	b921      	cbnz	r1, 8005b42 <_realloc_r+0x16>
 8005b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	f7ff bf81 	b.w	8005a44 <_malloc_r>
 8005b42:	b92a      	cbnz	r2, 8005b50 <_realloc_r+0x24>
 8005b44:	f7ff ff12 	bl	800596c <_free_r>
 8005b48:	4625      	mov	r5, r4
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b50:	f000 f838 	bl	8005bc4 <_malloc_usable_size_r>
 8005b54:	4284      	cmp	r4, r0
 8005b56:	4607      	mov	r7, r0
 8005b58:	d802      	bhi.n	8005b60 <_realloc_r+0x34>
 8005b5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b5e:	d812      	bhi.n	8005b86 <_realloc_r+0x5a>
 8005b60:	4621      	mov	r1, r4
 8005b62:	4640      	mov	r0, r8
 8005b64:	f7ff ff6e 	bl	8005a44 <_malloc_r>
 8005b68:	4605      	mov	r5, r0
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	d0ed      	beq.n	8005b4a <_realloc_r+0x1e>
 8005b6e:	42bc      	cmp	r4, r7
 8005b70:	4622      	mov	r2, r4
 8005b72:	4631      	mov	r1, r6
 8005b74:	bf28      	it	cs
 8005b76:	463a      	movcs	r2, r7
 8005b78:	f7ff fed0 	bl	800591c <memcpy>
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	4640      	mov	r0, r8
 8005b80:	f7ff fef4 	bl	800596c <_free_r>
 8005b84:	e7e1      	b.n	8005b4a <_realloc_r+0x1e>
 8005b86:	4635      	mov	r5, r6
 8005b88:	e7df      	b.n	8005b4a <_realloc_r+0x1e>
	...

08005b8c <_sbrk_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4d06      	ldr	r5, [pc, #24]	; (8005ba8 <_sbrk_r+0x1c>)
 8005b90:	2300      	movs	r3, #0
 8005b92:	4604      	mov	r4, r0
 8005b94:	4608      	mov	r0, r1
 8005b96:	602b      	str	r3, [r5, #0]
 8005b98:	f7fb fa22 	bl	8000fe0 <_sbrk>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d102      	bne.n	8005ba6 <_sbrk_r+0x1a>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	b103      	cbz	r3, 8005ba6 <_sbrk_r+0x1a>
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	20000464 	.word	0x20000464

08005bac <__malloc_lock>:
 8005bac:	4801      	ldr	r0, [pc, #4]	; (8005bb4 <__malloc_lock+0x8>)
 8005bae:	f000 b811 	b.w	8005bd4 <__retarget_lock_acquire_recursive>
 8005bb2:	bf00      	nop
 8005bb4:	20000468 	.word	0x20000468

08005bb8 <__malloc_unlock>:
 8005bb8:	4801      	ldr	r0, [pc, #4]	; (8005bc0 <__malloc_unlock+0x8>)
 8005bba:	f000 b80c 	b.w	8005bd6 <__retarget_lock_release_recursive>
 8005bbe:	bf00      	nop
 8005bc0:	20000468 	.word	0x20000468

08005bc4 <_malloc_usable_size_r>:
 8005bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bc8:	1f18      	subs	r0, r3, #4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	bfbc      	itt	lt
 8005bce:	580b      	ldrlt	r3, [r1, r0]
 8005bd0:	18c0      	addlt	r0, r0, r3
 8005bd2:	4770      	bx	lr

08005bd4 <__retarget_lock_acquire_recursive>:
 8005bd4:	4770      	bx	lr

08005bd6 <__retarget_lock_release_recursive>:
 8005bd6:	4770      	bx	lr

08005bd8 <_init>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	bf00      	nop
 8005bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bde:	bc08      	pop	{r3}
 8005be0:	469e      	mov	lr, r3
 8005be2:	4770      	bx	lr

08005be4 <_fini>:
 8005be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be6:	bf00      	nop
 8005be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bea:	bc08      	pop	{r3}
 8005bec:	469e      	mov	lr, r3
 8005bee:	4770      	bx	lr
