
calculadora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f8c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004114  08004114  00014114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041fc  080041fc  00020404  2**0
                  CONTENTS
  4 .ARM          00000000  080041fc  080041fc  00020404  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041fc  080041fc  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041fc  080041fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004200  08004200  00014200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  08004204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000404  08004608  00020404  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  08004608  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf25  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c66  00000000  00000000  0002d359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002efc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002f9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b377  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e514  00000000  00000000  0004b69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d619  00000000  00000000  00059bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f71cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028a0  00000000  00000000  000f721c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000404 	.word	0x20000404
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080040fc 	.word	0x080040fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000408 	.word	0x20000408
 80001c4:	080040fc 	.word	0x080040fc

080001c8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	f023 030f 	bic.w	r3, r3, #15
 80001d8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	011b      	lsls	r3, r3, #4
 80001de:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80001e0:	7bfb      	ldrb	r3, [r7, #15]
 80001e2:	f043 030c 	orr.w	r3, r3, #12
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80001ea:	7bfb      	ldrb	r3, [r7, #15]
 80001ec:	f043 0308 	orr.w	r3, r3, #8
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80001f4:	7bbb      	ldrb	r3, [r7, #14]
 80001f6:	f043 030c 	orr.w	r3, r3, #12
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80001fe:	7bbb      	ldrb	r3, [r7, #14]
 8000200:	f043 0308 	orr.w	r3, r3, #8
 8000204:	b2db      	uxtb	r3, r3
 8000206:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000208:	f107 0208 	add.w	r2, r7, #8
 800020c:	2364      	movs	r3, #100	; 0x64
 800020e:	9300      	str	r3, [sp, #0]
 8000210:	2304      	movs	r3, #4
 8000212:	214e      	movs	r1, #78	; 0x4e
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <lcd_send_cmd+0x5c>)
 8000216:	f001 fc09 	bl	8001a2c <HAL_I2C_Master_Transmit>
}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	20000420 	.word	0x20000420

08000228 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b086      	sub	sp, #24
 800022c:	af02      	add	r7, sp, #8
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	f023 030f 	bic.w	r3, r3, #15
 8000238:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	011b      	lsls	r3, r3, #4
 800023e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000240:	7bfb      	ldrb	r3, [r7, #15]
 8000242:	f043 030d 	orr.w	r3, r3, #13
 8000246:	b2db      	uxtb	r3, r3
 8000248:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	f043 0309 	orr.w	r3, r3, #9
 8000250:	b2db      	uxtb	r3, r3
 8000252:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000254:	7bbb      	ldrb	r3, [r7, #14]
 8000256:	f043 030d 	orr.w	r3, r3, #13
 800025a:	b2db      	uxtb	r3, r3
 800025c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800025e:	7bbb      	ldrb	r3, [r7, #14]
 8000260:	f043 0309 	orr.w	r3, r3, #9
 8000264:	b2db      	uxtb	r3, r3
 8000266:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000268:	f107 0208 	add.w	r2, r7, #8
 800026c:	2364      	movs	r3, #100	; 0x64
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	2304      	movs	r3, #4
 8000272:	214e      	movs	r1, #78	; 0x4e
 8000274:	4803      	ldr	r0, [pc, #12]	; (8000284 <lcd_send_data+0x5c>)
 8000276:	f001 fbd9 	bl	8001a2c <HAL_I2C_Master_Transmit>
}
 800027a:	bf00      	nop
 800027c:	3710      	adds	r7, #16
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000420 	.word	0x20000420

08000288 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800028c:	2032      	movs	r0, #50	; 0x32
 800028e:	f001 f891 	bl	80013b4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000292:	2030      	movs	r0, #48	; 0x30
 8000294:	f7ff ff98 	bl	80001c8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000298:	2005      	movs	r0, #5
 800029a:	f001 f88b 	bl	80013b4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800029e:	2030      	movs	r0, #48	; 0x30
 80002a0:	f7ff ff92 	bl	80001c8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80002a4:	2001      	movs	r0, #1
 80002a6:	f001 f885 	bl	80013b4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002aa:	2030      	movs	r0, #48	; 0x30
 80002ac:	f7ff ff8c 	bl	80001c8 <lcd_send_cmd>
	HAL_Delay(10);
 80002b0:	200a      	movs	r0, #10
 80002b2:	f001 f87f 	bl	80013b4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80002b6:	2020      	movs	r0, #32
 80002b8:	f7ff ff86 	bl	80001c8 <lcd_send_cmd>
	HAL_Delay(10);
 80002bc:	200a      	movs	r0, #10
 80002be:	f001 f879 	bl	80013b4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80002c2:	2028      	movs	r0, #40	; 0x28
 80002c4:	f7ff ff80 	bl	80001c8 <lcd_send_cmd>
	HAL_Delay(1);
 80002c8:	2001      	movs	r0, #1
 80002ca:	f001 f873 	bl	80013b4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80002ce:	2008      	movs	r0, #8
 80002d0:	f7ff ff7a 	bl	80001c8 <lcd_send_cmd>
	HAL_Delay(1);
 80002d4:	2001      	movs	r0, #1
 80002d6:	f001 f86d 	bl	80013b4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80002da:	2001      	movs	r0, #1
 80002dc:	f7ff ff74 	bl	80001c8 <lcd_send_cmd>
	HAL_Delay(1);
 80002e0:	2001      	movs	r0, #1
 80002e2:	f001 f867 	bl	80013b4 <HAL_Delay>
	HAL_Delay(1);
 80002e6:	2001      	movs	r0, #1
 80002e8:	f001 f864 	bl	80013b4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80002ec:	2006      	movs	r0, #6
 80002ee:	f7ff ff6b 	bl	80001c8 <lcd_send_cmd>
	HAL_Delay(1);
 80002f2:	2001      	movs	r0, #1
 80002f4:	f001 f85e 	bl	80013b4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80002f8:	200c      	movs	r0, #12
 80002fa:	f7ff ff65 	bl	80001c8 <lcd_send_cmd>
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}

08000302 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	b082      	sub	sp, #8
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800030a:	e006      	b.n	800031a <lcd_send_string+0x18>
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	1c5a      	adds	r2, r3, #1
 8000310:	607a      	str	r2, [r7, #4]
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ff87 	bl	8000228 <lcd_send_data>
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d1f4      	bne.n	800030c <lcd_send_string+0xa>
}
 8000322:	bf00      	nop
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <read_keypad>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


char read_keypad (void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2110      	movs	r1, #16
 8000334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000338:	f001 fad0 	bl	80018dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);
 800033c:	2201      	movs	r2, #1
 800033e:	2120      	movs	r1, #32
 8000340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000344:	f001 faca 	bl	80018dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);
 8000348:	2201      	movs	r2, #1
 800034a:	2140      	movs	r1, #64	; 0x40
 800034c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000350:	f001 fac4 	bl	80018dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	2180      	movs	r1, #128	; 0x80
 8000358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035c:	f001 fabe 	bl	80018dc <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))
 8000360:	2101      	movs	r1, #1
 8000362:	48b1      	ldr	r0, [pc, #708]	; (8000628 <read_keypad+0x2fc>)
 8000364:	f001 faa2 	bl	80018ac <HAL_GPIO_ReadPin>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d109      	bne.n	8000382 <read_keypad+0x56>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));
 800036e:	bf00      	nop
 8000370:	2101      	movs	r1, #1
 8000372:	48ad      	ldr	r0, [pc, #692]	; (8000628 <read_keypad+0x2fc>)
 8000374:	f001 fa9a 	bl	80018ac <HAL_GPIO_ReadPin>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f8      	beq.n	8000370 <read_keypad+0x44>
		return '1';
 800037e:	2331      	movs	r3, #49	; 0x31
 8000380:	e14f      	b.n	8000622 <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))
 8000382:	2102      	movs	r1, #2
 8000384:	48a8      	ldr	r0, [pc, #672]	; (8000628 <read_keypad+0x2fc>)
 8000386:	f001 fa91 	bl	80018ac <HAL_GPIO_ReadPin>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d109      	bne.n	80003a4 <read_keypad+0x78>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));
 8000390:	bf00      	nop
 8000392:	2102      	movs	r1, #2
 8000394:	48a4      	ldr	r0, [pc, #656]	; (8000628 <read_keypad+0x2fc>)
 8000396:	f001 fa89 	bl	80018ac <HAL_GPIO_ReadPin>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0f8      	beq.n	8000392 <read_keypad+0x66>
		return '2';
 80003a0:	2332      	movs	r3, #50	; 0x32
 80003a2:	e13e      	b.n	8000622 <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))
 80003a4:	2104      	movs	r1, #4
 80003a6:	48a0      	ldr	r0, [pc, #640]	; (8000628 <read_keypad+0x2fc>)
 80003a8:	f001 fa80 	bl	80018ac <HAL_GPIO_ReadPin>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d109      	bne.n	80003c6 <read_keypad+0x9a>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));
 80003b2:	bf00      	nop
 80003b4:	2104      	movs	r1, #4
 80003b6:	489c      	ldr	r0, [pc, #624]	; (8000628 <read_keypad+0x2fc>)
 80003b8:	f001 fa78 	bl	80018ac <HAL_GPIO_ReadPin>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d0f8      	beq.n	80003b4 <read_keypad+0x88>
		return '3';
 80003c2:	2333      	movs	r3, #51	; 0x33
 80003c4:	e12d      	b.n	8000622 <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))
 80003c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ca:	4897      	ldr	r0, [pc, #604]	; (8000628 <read_keypad+0x2fc>)
 80003cc:	f001 fa6e 	bl	80018ac <HAL_GPIO_ReadPin>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d10a      	bne.n	80003ec <read_keypad+0xc0>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));
 80003d6:	bf00      	nop
 80003d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003dc:	4892      	ldr	r0, [pc, #584]	; (8000628 <read_keypad+0x2fc>)
 80003de:	f001 fa65 	bl	80018ac <HAL_GPIO_ReadPin>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d0f7      	beq.n	80003d8 <read_keypad+0xac>
		return 'A';
 80003e8:	2341      	movs	r3, #65	; 0x41
 80003ea:	e11a      	b.n	8000622 <read_keypad+0x2f6>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);
 80003ec:	2201      	movs	r2, #1
 80003ee:	2110      	movs	r1, #16
 80003f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f4:	f001 fa72 	bl	80018dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2120      	movs	r1, #32
 80003fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000400:	f001 fa6c 	bl	80018dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);
 8000404:	2201      	movs	r2, #1
 8000406:	2140      	movs	r1, #64	; 0x40
 8000408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040c:	f001 fa66 	bl	80018dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);
 8000410:	2201      	movs	r2, #1
 8000412:	2180      	movs	r1, #128	; 0x80
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f001 fa60 	bl	80018dc <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))
 800041c:	2101      	movs	r1, #1
 800041e:	4882      	ldr	r0, [pc, #520]	; (8000628 <read_keypad+0x2fc>)
 8000420:	f001 fa44 	bl	80018ac <HAL_GPIO_ReadPin>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d109      	bne.n	800043e <read_keypad+0x112>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));
 800042a:	bf00      	nop
 800042c:	2101      	movs	r1, #1
 800042e:	487e      	ldr	r0, [pc, #504]	; (8000628 <read_keypad+0x2fc>)
 8000430:	f001 fa3c 	bl	80018ac <HAL_GPIO_ReadPin>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0f8      	beq.n	800042c <read_keypad+0x100>
		return '4';
 800043a:	2334      	movs	r3, #52	; 0x34
 800043c:	e0f1      	b.n	8000622 <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))
 800043e:	2102      	movs	r1, #2
 8000440:	4879      	ldr	r0, [pc, #484]	; (8000628 <read_keypad+0x2fc>)
 8000442:	f001 fa33 	bl	80018ac <HAL_GPIO_ReadPin>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d109      	bne.n	8000460 <read_keypad+0x134>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));
 800044c:	bf00      	nop
 800044e:	2102      	movs	r1, #2
 8000450:	4875      	ldr	r0, [pc, #468]	; (8000628 <read_keypad+0x2fc>)
 8000452:	f001 fa2b 	bl	80018ac <HAL_GPIO_ReadPin>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d0f8      	beq.n	800044e <read_keypad+0x122>
		return '5';
 800045c:	2335      	movs	r3, #53	; 0x35
 800045e:	e0e0      	b.n	8000622 <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))
 8000460:	2104      	movs	r1, #4
 8000462:	4871      	ldr	r0, [pc, #452]	; (8000628 <read_keypad+0x2fc>)
 8000464:	f001 fa22 	bl	80018ac <HAL_GPIO_ReadPin>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d109      	bne.n	8000482 <read_keypad+0x156>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));
 800046e:	bf00      	nop
 8000470:	2104      	movs	r1, #4
 8000472:	486d      	ldr	r0, [pc, #436]	; (8000628 <read_keypad+0x2fc>)
 8000474:	f001 fa1a 	bl	80018ac <HAL_GPIO_ReadPin>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0f8      	beq.n	8000470 <read_keypad+0x144>
		return '6';
 800047e:	2336      	movs	r3, #54	; 0x36
 8000480:	e0cf      	b.n	8000622 <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))
 8000482:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000486:	4868      	ldr	r0, [pc, #416]	; (8000628 <read_keypad+0x2fc>)
 8000488:	f001 fa10 	bl	80018ac <HAL_GPIO_ReadPin>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d10a      	bne.n	80004a8 <read_keypad+0x17c>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));
 8000492:	bf00      	nop
 8000494:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000498:	4863      	ldr	r0, [pc, #396]	; (8000628 <read_keypad+0x2fc>)
 800049a:	f001 fa07 	bl	80018ac <HAL_GPIO_ReadPin>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d0f7      	beq.n	8000494 <read_keypad+0x168>
		return 'B';
 80004a4:	2342      	movs	r3, #66	; 0x42
 80004a6:	e0bc      	b.n	8000622 <read_keypad+0x2f6>
	}



	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	2110      	movs	r1, #16
 80004ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b0:	f001 fa14 	bl	80018dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	2120      	movs	r1, #32
 80004b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004bc:	f001 fa0e 	bl	80018dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2140      	movs	r1, #64	; 0x40
 80004c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c8:	f001 fa08 	bl	80018dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2180      	movs	r1, #128	; 0x80
 80004d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d4:	f001 fa02 	bl	80018dc <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))
 80004d8:	2101      	movs	r1, #1
 80004da:	4853      	ldr	r0, [pc, #332]	; (8000628 <read_keypad+0x2fc>)
 80004dc:	f001 f9e6 	bl	80018ac <HAL_GPIO_ReadPin>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d109      	bne.n	80004fa <read_keypad+0x1ce>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));
 80004e6:	bf00      	nop
 80004e8:	2101      	movs	r1, #1
 80004ea:	484f      	ldr	r0, [pc, #316]	; (8000628 <read_keypad+0x2fc>)
 80004ec:	f001 f9de 	bl	80018ac <HAL_GPIO_ReadPin>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f8      	beq.n	80004e8 <read_keypad+0x1bc>
		return '7';
 80004f6:	2337      	movs	r3, #55	; 0x37
 80004f8:	e093      	b.n	8000622 <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))
 80004fa:	2102      	movs	r1, #2
 80004fc:	484a      	ldr	r0, [pc, #296]	; (8000628 <read_keypad+0x2fc>)
 80004fe:	f001 f9d5 	bl	80018ac <HAL_GPIO_ReadPin>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d109      	bne.n	800051c <read_keypad+0x1f0>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));
 8000508:	bf00      	nop
 800050a:	2102      	movs	r1, #2
 800050c:	4846      	ldr	r0, [pc, #280]	; (8000628 <read_keypad+0x2fc>)
 800050e:	f001 f9cd 	bl	80018ac <HAL_GPIO_ReadPin>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0f8      	beq.n	800050a <read_keypad+0x1de>
		return '8';
 8000518:	2338      	movs	r3, #56	; 0x38
 800051a:	e082      	b.n	8000622 <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))
 800051c:	2104      	movs	r1, #4
 800051e:	4842      	ldr	r0, [pc, #264]	; (8000628 <read_keypad+0x2fc>)
 8000520:	f001 f9c4 	bl	80018ac <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d109      	bne.n	800053e <read_keypad+0x212>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));
 800052a:	bf00      	nop
 800052c:	2104      	movs	r1, #4
 800052e:	483e      	ldr	r0, [pc, #248]	; (8000628 <read_keypad+0x2fc>)
 8000530:	f001 f9bc 	bl	80018ac <HAL_GPIO_ReadPin>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0f8      	beq.n	800052c <read_keypad+0x200>
		return '9';
 800053a:	2339      	movs	r3, #57	; 0x39
 800053c:	e071      	b.n	8000622 <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))
 800053e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000542:	4839      	ldr	r0, [pc, #228]	; (8000628 <read_keypad+0x2fc>)
 8000544:	f001 f9b2 	bl	80018ac <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d10a      	bne.n	8000564 <read_keypad+0x238>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));
 800054e:	bf00      	nop
 8000550:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000554:	4834      	ldr	r0, [pc, #208]	; (8000628 <read_keypad+0x2fc>)
 8000556:	f001 f9a9 	bl	80018ac <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0f7      	beq.n	8000550 <read_keypad+0x224>
		return 'C';
 8000560:	2343      	movs	r3, #67	; 0x43
 8000562:	e05e      	b.n	8000622 <read_keypad+0x2f6>
	}



	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2110      	movs	r1, #16
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f001 f9b6 	bl	80018dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	2120      	movs	r1, #32
 8000574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000578:	f001 f9b0 	bl	80018dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000584:	f001 f9aa 	bl	80018dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2180      	movs	r1, #128	; 0x80
 800058c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000590:	f001 f9a4 	bl	80018dc <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))
 8000594:	2101      	movs	r1, #1
 8000596:	4824      	ldr	r0, [pc, #144]	; (8000628 <read_keypad+0x2fc>)
 8000598:	f001 f988 	bl	80018ac <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d109      	bne.n	80005b6 <read_keypad+0x28a>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));
 80005a2:	bf00      	nop
 80005a4:	2101      	movs	r1, #1
 80005a6:	4820      	ldr	r0, [pc, #128]	; (8000628 <read_keypad+0x2fc>)
 80005a8:	f001 f980 	bl	80018ac <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f8      	beq.n	80005a4 <read_keypad+0x278>
		return '*';
 80005b2:	232a      	movs	r3, #42	; 0x2a
 80005b4:	e035      	b.n	8000622 <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))
 80005b6:	2102      	movs	r1, #2
 80005b8:	481b      	ldr	r0, [pc, #108]	; (8000628 <read_keypad+0x2fc>)
 80005ba:	f001 f977 	bl	80018ac <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d109      	bne.n	80005d8 <read_keypad+0x2ac>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));
 80005c4:	bf00      	nop
 80005c6:	2102      	movs	r1, #2
 80005c8:	4817      	ldr	r0, [pc, #92]	; (8000628 <read_keypad+0x2fc>)
 80005ca:	f001 f96f 	bl	80018ac <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0f8      	beq.n	80005c6 <read_keypad+0x29a>
		return '0';
 80005d4:	2330      	movs	r3, #48	; 0x30
 80005d6:	e024      	b.n	8000622 <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))
 80005d8:	2104      	movs	r1, #4
 80005da:	4813      	ldr	r0, [pc, #76]	; (8000628 <read_keypad+0x2fc>)
 80005dc:	f001 f966 	bl	80018ac <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d109      	bne.n	80005fa <read_keypad+0x2ce>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));
 80005e6:	bf00      	nop
 80005e8:	2104      	movs	r1, #4
 80005ea:	480f      	ldr	r0, [pc, #60]	; (8000628 <read_keypad+0x2fc>)
 80005ec:	f001 f95e 	bl	80018ac <HAL_GPIO_ReadPin>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f8      	beq.n	80005e8 <read_keypad+0x2bc>
		return '#';
 80005f6:	2323      	movs	r3, #35	; 0x23
 80005f8:	e013      	b.n	8000622 <read_keypad+0x2f6>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))
 80005fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fe:	480a      	ldr	r0, [pc, #40]	; (8000628 <read_keypad+0x2fc>)
 8000600:	f001 f954 	bl	80018ac <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d10a      	bne.n	8000620 <read_keypad+0x2f4>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));
 800060a:	bf00      	nop
 800060c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <read_keypad+0x2fc>)
 8000612:	f001 f94b 	bl	80018ac <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d0f7      	beq.n	800060c <read_keypad+0x2e0>
		return 'D';
 800061c:	2344      	movs	r3, #68	; 0x44
 800061e:	e000      	b.n	8000622 <read_keypad+0x2f6>
	}

return '\0';
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	48000400 	.word	0x48000400

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fe59 	bl	80012e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 fa31 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 fafb 	bl	8000c34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063e:	f000 fac9 	bl	8000bd4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000642:	f000 fa87 	bl	8000b54 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init ();
 8000646:	f7ff fe1f 	bl	8000288 <lcd_init>
  max_init(0x03);
 800064a:	2003      	movs	r0, #3
 800064c:	f000 fd1c 	bl	8001088 <max_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
  {
	char operation = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	77fb      	strb	r3, [r7, #31]

	lcd_send_cmd(0x01); // Limpiar la pantalla
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff fdb7 	bl	80001c8 <lcd_send_cmd>

	lcd_send_cmd(0x80); // Establecer cursor en la primera línea
 800065a:	2080      	movs	r0, #128	; 0x80
 800065c:	f7ff fdb4 	bl	80001c8 <lcd_send_cmd>
	lcd_send_string("  A)suma  B)resta");
 8000660:	48ab      	ldr	r0, [pc, #684]	; (8000910 <main+0x2e4>)
 8000662:	f7ff fe4e 	bl	8000302 <lcd_send_string>

	lcd_send_cmd(0xC0); // Establecer cursor en la segunda línea
 8000666:	20c0      	movs	r0, #192	; 0xc0
 8000668:	f7ff fdae 	bl	80001c8 <lcd_send_cmd>
	lcd_send_string("C)multi D)div");
 800066c:	48a9      	ldr	r0, [pc, #676]	; (8000914 <main+0x2e8>)
 800066e:	f7ff fe48 	bl	8000302 <lcd_send_string>

	while (operation == 0) {
 8000672:	e03d      	b.n	80006f0 <main+0xc4>
	    key = read_keypad();
 8000674:	f7ff fe5a 	bl	800032c <read_keypad>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	4ba6      	ldr	r3, [pc, #664]	; (8000918 <main+0x2ec>)
 800067e:	701a      	strb	r2, [r3, #0]

	    if (key != 0x01) {
 8000680:	4ba5      	ldr	r3, [pc, #660]	; (8000918 <main+0x2ec>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d033      	beq.n	80006f0 <main+0xc4>
	        if (key >= 'A' && key <= 'D') {
 8000688:	4ba3      	ldr	r3, [pc, #652]	; (8000918 <main+0x2ec>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b40      	cmp	r3, #64	; 0x40
 800068e:	d907      	bls.n	80006a0 <main+0x74>
 8000690:	4ba1      	ldr	r3, [pc, #644]	; (8000918 <main+0x2ec>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b44      	cmp	r3, #68	; 0x44
 8000696:	d803      	bhi.n	80006a0 <main+0x74>
	            operation = key;
 8000698:	4b9f      	ldr	r3, [pc, #636]	; (8000918 <main+0x2ec>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	77fb      	strb	r3, [r7, #31]
 800069e:	e027      	b.n	80006f0 <main+0xc4>
	        } else {
	            lcd_send_cmd(0x01); // Limpiar la pantalla
 80006a0:	2001      	movs	r0, #1
 80006a2:	f7ff fd91 	bl	80001c8 <lcd_send_cmd>
	            lcd_send_cmd(0x80);
 80006a6:	2080      	movs	r0, #128	; 0x80
 80006a8:	f7ff fd8e 	bl	80001c8 <lcd_send_cmd>
	            lcd_send_string("  invalido");
 80006ac:	489b      	ldr	r0, [pc, #620]	; (800091c <main+0x2f0>)
 80006ae:	f7ff fe28 	bl	8000302 <lcd_send_string>
	            lcd_send_cmd(0xC0);
 80006b2:	20c0      	movs	r0, #192	; 0xc0
 80006b4:	f7ff fd88 	bl	80001c8 <lcd_send_cmd>
	            lcd_send_string("Intente de nuevo");
 80006b8:	4899      	ldr	r0, [pc, #612]	; (8000920 <main+0x2f4>)
 80006ba:	f7ff fe22 	bl	8000302 <lcd_send_string>
	            write_char(88, 1);
 80006be:	2101      	movs	r1, #1
 80006c0:	2058      	movs	r0, #88	; 0x58
 80006c2:	f000 fc79 	bl	8000fb8 <write_char>
	            HAL_Delay(2000);
 80006c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ca:	f000 fe73 	bl	80013b4 <HAL_Delay>
	            max_clear();
 80006ce:	f000 fcad 	bl	800102c <max_clear>
	            lcd_send_cmd(0x01);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f7ff fd78 	bl	80001c8 <lcd_send_cmd>
	            lcd_send_cmd(0x80); // Establecer cursor en la primera línea
 80006d8:	2080      	movs	r0, #128	; 0x80
 80006da:	f7ff fd75 	bl	80001c8 <lcd_send_cmd>
	            lcd_send_string("  A)suma  B)resta");
 80006de:	488c      	ldr	r0, [pc, #560]	; (8000910 <main+0x2e4>)
 80006e0:	f7ff fe0f 	bl	8000302 <lcd_send_string>
	            lcd_send_cmd(0xC0); // Establecer cursor en la segunda línea
 80006e4:	20c0      	movs	r0, #192	; 0xc0
 80006e6:	f7ff fd6f 	bl	80001c8 <lcd_send_cmd>
	            lcd_send_string("C)multi  D)div");
 80006ea:	488e      	ldr	r0, [pc, #568]	; (8000924 <main+0x2f8>)
 80006ec:	f7ff fe09 	bl	8000302 <lcd_send_string>
	while (operation == 0) {
 80006f0:	7ffb      	ldrb	r3, [r7, #31]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0be      	beq.n	8000674 <main+0x48>
	        }
	    }
	}

	max_clear();
 80006f6:	f000 fc99 	bl	800102c <max_clear>

	lcd_send_cmd(0x01); // Limpiar la pantalla
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff fd64 	bl	80001c8 <lcd_send_cmd>

	switch (operation) {
 8000700:	7ffb      	ldrb	r3, [r7, #31]
 8000702:	3b41      	subs	r3, #65	; 0x41
 8000704:	2b03      	cmp	r3, #3
 8000706:	d81f      	bhi.n	8000748 <main+0x11c>
 8000708:	a201      	add	r2, pc, #4	; (adr r2, 8000710 <main+0xe4>)
 800070a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070e:	bf00      	nop
 8000710:	08000721 	.word	0x08000721
 8000714:	0800072b 	.word	0x0800072b
 8000718:	08000735 	.word	0x08000735
 800071c:	0800073f 	.word	0x0800073f
	    case 'A':
	        write_char(43, 1);
 8000720:	2101      	movs	r1, #1
 8000722:	202b      	movs	r0, #43	; 0x2b
 8000724:	f000 fc48 	bl	8000fb8 <write_char>
	        break;
 8000728:	e00e      	b.n	8000748 <main+0x11c>
	    case 'B':
	        write_char(45, 1);
 800072a:	2101      	movs	r1, #1
 800072c:	202d      	movs	r0, #45	; 0x2d
 800072e:	f000 fc43 	bl	8000fb8 <write_char>
	        break;
 8000732:	e009      	b.n	8000748 <main+0x11c>
	    case 'C':
	        write_char(42, 1);
 8000734:	2101      	movs	r1, #1
 8000736:	202a      	movs	r0, #42	; 0x2a
 8000738:	f000 fc3e 	bl	8000fb8 <write_char>
	        break;
 800073c:	e004      	b.n	8000748 <main+0x11c>
	    case 'D':
	        write_char(47, 1);
 800073e:	2101      	movs	r1, #1
 8000740:	202f      	movs	r0, #47	; 0x2f
 8000742:	f000 fc39 	bl	8000fb8 <write_char>
	        break;
 8000746:	bf00      	nop
	}

	int num1 = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
	int num2 = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
	int digits1 = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
	int digits2 = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]

	lcd_send_cmd(0x80);
 8000758:	2080      	movs	r0, #128	; 0x80
 800075a:	f7ff fd35 	bl	80001c8 <lcd_send_cmd>
	lcd_send_string("1ro num:");
 800075e:	4872      	ldr	r0, [pc, #456]	; (8000928 <main+0x2fc>)
 8000760:	f7ff fdcf 	bl	8000302 <lcd_send_string>

	while (1) {
	    key = read_keypad();
 8000764:	f7ff fde2 	bl	800032c <read_keypad>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	4b6a      	ldr	r3, [pc, #424]	; (8000918 <main+0x2ec>)
 800076e:	701a      	strb	r2, [r3, #0]

	    if (key != 0x01) {
 8000770:	4b69      	ldr	r3, [pc, #420]	; (8000918 <main+0x2ec>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d0f5      	beq.n	8000764 <main+0x138>
	        if (key >= '0' && key <= '9' && digits1 < 4) {
 8000778:	4b67      	ldr	r3, [pc, #412]	; (8000918 <main+0x2ec>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b2f      	cmp	r3, #47	; 0x2f
 800077e:	d91c      	bls.n	80007ba <main+0x18e>
 8000780:	4b65      	ldr	r3, [pc, #404]	; (8000918 <main+0x2ec>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b39      	cmp	r3, #57	; 0x39
 8000786:	d818      	bhi.n	80007ba <main+0x18e>
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	2b03      	cmp	r3, #3
 800078c:	dc15      	bgt.n	80007ba <main+0x18e>
	            int digit = key - '0';
 800078e:	4b62      	ldr	r3, [pc, #392]	; (8000918 <main+0x2ec>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	3b30      	subs	r3, #48	; 0x30
 8000794:	607b      	str	r3, [r7, #4]
	            num1 = (num1 * 10) + digit;
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	461a      	mov	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	61bb      	str	r3, [r7, #24]
	            lcd_send_data(key);
 80007a8:	4b5b      	ldr	r3, [pc, #364]	; (8000918 <main+0x2ec>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fd3b 	bl	8000228 <lcd_send_data>
	            digits1++;
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	3301      	adds	r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
	        if (key >= '0' && key <= '9' && digits1 < 4) {
 80007b8:	e01b      	b.n	80007f2 <main+0x1c6>
	        } else if (key == '#') {
 80007ba:	4b57      	ldr	r3, [pc, #348]	; (8000918 <main+0x2ec>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b23      	cmp	r3, #35	; 0x23
 80007c0:	d018      	beq.n	80007f4 <main+0x1c8>
	            break;
	        } else if (key == '*') {
 80007c2:	4b55      	ldr	r3, [pc, #340]	; (8000918 <main+0x2ec>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b2a      	cmp	r3, #42	; 0x2a
 80007c8:	d1cc      	bne.n	8000764 <main+0x138>
	            num1 /= 10;
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	4a57      	ldr	r2, [pc, #348]	; (800092c <main+0x300>)
 80007ce:	fb82 1203 	smull	r1, r2, r2, r3
 80007d2:	1092      	asrs	r2, r2, #2
 80007d4:	17db      	asrs	r3, r3, #31
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	61bb      	str	r3, [r7, #24]
	            lcd_send_cmd(0x10); // Mover cursor hacia la izquierda
 80007da:	2010      	movs	r0, #16
 80007dc:	f7ff fcf4 	bl	80001c8 <lcd_send_cmd>
	            lcd_send_data(' ');
 80007e0:	2020      	movs	r0, #32
 80007e2:	f7ff fd21 	bl	8000228 <lcd_send_data>
	            lcd_send_cmd(0x10);
 80007e6:	2010      	movs	r0, #16
 80007e8:	f7ff fcee 	bl	80001c8 <lcd_send_cmd>
	            digits1--;
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	613b      	str	r3, [r7, #16]
	    key = read_keypad();
 80007f2:	e7b7      	b.n	8000764 <main+0x138>
	            break;
 80007f4:	bf00      	nop
	        }
	    }
	}

	lcd_send_cmd(0x01); // Limpiar la pantalla
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff fce6 	bl	80001c8 <lcd_send_cmd>
	lcd_send_cmd(0x80); // Establecer cursor en la primera línea
 80007fc:	2080      	movs	r0, #128	; 0x80
 80007fe:	f7ff fce3 	bl	80001c8 <lcd_send_cmd>
	lcd_send_string("  2do num:");
 8000802:	484b      	ldr	r0, [pc, #300]	; (8000930 <main+0x304>)
 8000804:	f7ff fd7d 	bl	8000302 <lcd_send_string>

	while (1) {
	    key = read_keypad();
 8000808:	f7ff fd90 	bl	800032c <read_keypad>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	4b41      	ldr	r3, [pc, #260]	; (8000918 <main+0x2ec>)
 8000812:	701a      	strb	r2, [r3, #0]

	    if (key != 0x01) {
 8000814:	4b40      	ldr	r3, [pc, #256]	; (8000918 <main+0x2ec>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d0f5      	beq.n	8000808 <main+0x1dc>
	        if (key >= '0' && key <= '9' && digits2 < 4) {
 800081c:	4b3e      	ldr	r3, [pc, #248]	; (8000918 <main+0x2ec>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b2f      	cmp	r3, #47	; 0x2f
 8000822:	d91c      	bls.n	800085e <main+0x232>
 8000824:	4b3c      	ldr	r3, [pc, #240]	; (8000918 <main+0x2ec>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b39      	cmp	r3, #57	; 0x39
 800082a:	d818      	bhi.n	800085e <main+0x232>
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2b03      	cmp	r3, #3
 8000830:	dc15      	bgt.n	800085e <main+0x232>
	            int digit = key - '0';
 8000832:	4b39      	ldr	r3, [pc, #228]	; (8000918 <main+0x2ec>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	3b30      	subs	r3, #48	; 0x30
 8000838:	603b      	str	r3, [r7, #0]
	            num2 = (num2 * 10) + digit;
 800083a:	697a      	ldr	r2, [r7, #20]
 800083c:	4613      	mov	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	4413      	add	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	461a      	mov	r2, r3
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	4413      	add	r3, r2
 800084a:	617b      	str	r3, [r7, #20]
	            lcd_send_data(key);
 800084c:	4b32      	ldr	r3, [pc, #200]	; (8000918 <main+0x2ec>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fce9 	bl	8000228 <lcd_send_data>
	            digits2++;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	3301      	adds	r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
	        if (key >= '0' && key <= '9' && digits2 < 4) {
 800085c:	e01b      	b.n	8000896 <main+0x26a>
	        } else if (key == '#') {
 800085e:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <main+0x2ec>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b23      	cmp	r3, #35	; 0x23
 8000864:	d018      	beq.n	8000898 <main+0x26c>
	            break;
	        } else if (key == '*') {
 8000866:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <main+0x2ec>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b2a      	cmp	r3, #42	; 0x2a
 800086c:	d1cc      	bne.n	8000808 <main+0x1dc>
	            num2 /= 10;
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	4a2e      	ldr	r2, [pc, #184]	; (800092c <main+0x300>)
 8000872:	fb82 1203 	smull	r1, r2, r2, r3
 8000876:	1092      	asrs	r2, r2, #2
 8000878:	17db      	asrs	r3, r3, #31
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	617b      	str	r3, [r7, #20]
	            lcd_send_cmd(0x10); // Mover cursor hacia la izquierda
 800087e:	2010      	movs	r0, #16
 8000880:	f7ff fca2 	bl	80001c8 <lcd_send_cmd>
	            lcd_send_data(' ');
 8000884:	2020      	movs	r0, #32
 8000886:	f7ff fccf 	bl	8000228 <lcd_send_data>
	            lcd_send_cmd(0x10);
 800088a:	2010      	movs	r0, #16
 800088c:	f7ff fc9c 	bl	80001c8 <lcd_send_cmd>
	            digits2--;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	3b01      	subs	r3, #1
 8000894:	60fb      	str	r3, [r7, #12]
	    key = read_keypad();
 8000896:	e7b7      	b.n	8000808 <main+0x1dc>
	            break;
 8000898:	bf00      	nop
	        }
	    }
	}

	int result = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]

	switch (operation) {
 800089e:	7ffb      	ldrb	r3, [r7, #31]
 80008a0:	3b41      	subs	r3, #65	; 0x41
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	d862      	bhi.n	800096c <main+0x340>
 80008a6:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <main+0x280>)
 80008a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ac:	080008bd 	.word	0x080008bd
 80008b0:	080008cf 	.word	0x080008cf
 80008b4:	080008e1 	.word	0x080008e1
 80008b8:	080008f5 	.word	0x080008f5
	    case 'A':
	        write_char(43, 1);
 80008bc:	2101      	movs	r1, #1
 80008be:	202b      	movs	r0, #43	; 0x2b
 80008c0:	f000 fb7a 	bl	8000fb8 <write_char>
	        result = num1 + num2;
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	4413      	add	r3, r2
 80008ca:	60bb      	str	r3, [r7, #8]
	        break;
 80008cc:	e04e      	b.n	800096c <main+0x340>
	    case 'B':
	        write_char(45, 1);
 80008ce:	2101      	movs	r1, #1
 80008d0:	202d      	movs	r0, #45	; 0x2d
 80008d2:	f000 fb71 	bl	8000fb8 <write_char>
	        result = num1 - num2;
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	60bb      	str	r3, [r7, #8]
	        break;
 80008de:	e045      	b.n	800096c <main+0x340>
	    case 'C':
	        write_char(42, 1);
 80008e0:	2101      	movs	r1, #1
 80008e2:	202a      	movs	r0, #42	; 0x2a
 80008e4:	f000 fb68 	bl	8000fb8 <write_char>
	        result = num1 * num2;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	697a      	ldr	r2, [r7, #20]
 80008ec:	fb02 f303 	mul.w	r3, r2, r3
 80008f0:	60bb      	str	r3, [r7, #8]
	        break;
 80008f2:	e03b      	b.n	800096c <main+0x340>
	    case 'D':
	            write_char(47, 1);
 80008f4:	2101      	movs	r1, #1
 80008f6:	202f      	movs	r0, #47	; 0x2f
 80008f8:	f000 fb5e 	bl	8000fb8 <write_char>
	            if (num2 != 0) {
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d018      	beq.n	8000934 <main+0x308>
	                result = num1 / num2;
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fb92 f3f3 	sdiv	r3, r2, r3
 800090a:	60bb      	str	r3, [r7, #8]
	                        break;
	                    }
	                }

	            }
	            break;
 800090c:	e02e      	b.n	800096c <main+0x340>
 800090e:	bf00      	nop
 8000910:	08004114 	.word	0x08004114
 8000914:	08004128 	.word	0x08004128
 8000918:	200004fc 	.word	0x200004fc
 800091c:	08004138 	.word	0x08004138
 8000920:	08004144 	.word	0x08004144
 8000924:	08004158 	.word	0x08004158
 8000928:	08004168 	.word	0x08004168
 800092c:	66666667 	.word	0x66666667
 8000930:	08004174 	.word	0x08004174
	                lcd_send_cmd(0x01);
 8000934:	2001      	movs	r0, #1
 8000936:	f7ff fc47 	bl	80001c8 <lcd_send_cmd>
	                lcd_send_cmd(0x80);
 800093a:	2080      	movs	r0, #128	; 0x80
 800093c:	f7ff fc44 	bl	80001c8 <lcd_send_cmd>
	                lcd_send_string("  Division por 0");
 8000940:	484e      	ldr	r0, [pc, #312]	; (8000a7c <main+0x450>)
 8000942:	f7ff fcde 	bl	8000302 <lcd_send_string>
	                lcd_send_cmd(0xC0);
 8000946:	20c0      	movs	r0, #192	; 0xc0
 8000948:	f7ff fc3e 	bl	80001c8 <lcd_send_cmd>
	                lcd_send_string("Resultado: Inf");
 800094c:	484c      	ldr	r0, [pc, #304]	; (8000a80 <main+0x454>)
 800094e:	f7ff fcd8 	bl	8000302 <lcd_send_string>
	                    key = read_keypad();
 8000952:	f7ff fceb 	bl	800032c <read_keypad>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	4b4a      	ldr	r3, [pc, #296]	; (8000a84 <main+0x458>)
 800095c:	701a      	strb	r2, [r3, #0]
	                    if (key == '#') {
 800095e:	4b49      	ldr	r3, [pc, #292]	; (8000a84 <main+0x458>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b23      	cmp	r3, #35	; 0x23
 8000964:	d1f5      	bne.n	8000952 <main+0x326>
	                        max_clear();
 8000966:	f000 fb61 	bl	800102c <max_clear>
	                        break;
 800096a:	bf00      	nop
	    }

	lcd_send_cmd(0x01);
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff fc2b 	bl	80001c8 <lcd_send_cmd>
	lcd_send_cmd(0x80);
 8000972:	2080      	movs	r0, #128	; 0x80
 8000974:	f7ff fc28 	bl	80001c8 <lcd_send_cmd>
	if(num2!=0){
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d002      	beq.n	8000984 <main+0x358>
	lcd_send_string("  Resultado:");
 800097e:	4842      	ldr	r0, [pc, #264]	; (8000a88 <main+0x45c>)
 8000980:	f7ff fcbf 	bl	8000302 <lcd_send_string>
	}
	if (result > 9999) {
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	f242 720f 	movw	r2, #9999	; 0x270f
 800098a:	4293      	cmp	r3, r2
 800098c:	dd0a      	ble.n	80009a4 <main+0x378>
	    lcd_send_cmd(0xC0);
 800098e:	20c0      	movs	r0, #192	; 0xc0
 8000990:	f7ff fc1a 	bl	80001c8 <lcd_send_cmd>
	    lcd_send_string("Error Muy Largo");
 8000994:	483d      	ldr	r0, [pc, #244]	; (8000a8c <main+0x460>)
 8000996:	f7ff fcb4 	bl	8000302 <lcd_send_string>
	    write_char(1, 1);
 800099a:	2101      	movs	r1, #1
 800099c:	2001      	movs	r0, #1
 800099e:	f000 fb0b 	bl	8000fb8 <write_char>
 80009a2:	e05d      	b.n	8000a60 <main+0x434>
	} else if (num2 != 0) {
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d05a      	beq.n	8000a60 <main+0x434>
	    lcd_send_cmd(0xC0);
 80009aa:	20c0      	movs	r0, #192	; 0xc0
 80009ac:	f7ff fc0c 	bl	80001c8 <lcd_send_cmd>
	   if (result < 0) {
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	da05      	bge.n	80009c2 <main+0x396>
	      lcd_send_data('-');
 80009b6:	202d      	movs	r0, #45	; 0x2d
 80009b8:	f7ff fc36 	bl	8000228 <lcd_send_data>
	      result = -result;
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	425b      	negs	r3, r3
 80009c0:	60bb      	str	r3, [r7, #8]
	    }
	    lcd_send_data((result / 1000) + '0');
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	4a32      	ldr	r2, [pc, #200]	; (8000a90 <main+0x464>)
 80009c6:	fb82 1203 	smull	r1, r2, r2, r3
 80009ca:	1192      	asrs	r2, r2, #6
 80009cc:	17db      	asrs	r3, r3, #31
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	3330      	adds	r3, #48	; 0x30
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fc26 	bl	8000228 <lcd_send_data>
	    lcd_send_data(((result / 100) % 10) + '0');
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	4a2d      	ldr	r2, [pc, #180]	; (8000a94 <main+0x468>)
 80009e0:	fb82 1203 	smull	r1, r2, r2, r3
 80009e4:	1152      	asrs	r2, r2, #5
 80009e6:	17db      	asrs	r3, r3, #31
 80009e8:	1ad2      	subs	r2, r2, r3
 80009ea:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <main+0x46c>)
 80009ec:	fb83 1302 	smull	r1, r3, r3, r2
 80009f0:	1099      	asrs	r1, r3, #2
 80009f2:	17d3      	asrs	r3, r2, #31
 80009f4:	1ac9      	subs	r1, r1, r3
 80009f6:	460b      	mov	r3, r1
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	440b      	add	r3, r1
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	1ad1      	subs	r1, r2, r3
 8000a00:	b2cb      	uxtb	r3, r1
 8000a02:	3330      	adds	r3, #48	; 0x30
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fc0e 	bl	8000228 <lcd_send_data>
	    lcd_send_data(((result / 10) % 10) + '0');
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	4a22      	ldr	r2, [pc, #136]	; (8000a98 <main+0x46c>)
 8000a10:	fb82 1203 	smull	r1, r2, r2, r3
 8000a14:	1092      	asrs	r2, r2, #2
 8000a16:	17db      	asrs	r3, r3, #31
 8000a18:	1ad2      	subs	r2, r2, r3
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <main+0x46c>)
 8000a1c:	fb83 1302 	smull	r1, r3, r3, r2
 8000a20:	1099      	asrs	r1, r3, #2
 8000a22:	17d3      	asrs	r3, r2, #31
 8000a24:	1ac9      	subs	r1, r1, r3
 8000a26:	460b      	mov	r3, r1
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	1ad1      	subs	r1, r2, r3
 8000a30:	b2cb      	uxtb	r3, r1
 8000a32:	3330      	adds	r3, #48	; 0x30
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fbf6 	bl	8000228 <lcd_send_data>
	    lcd_send_data((result % 10) + '0');
 8000a3c:	68ba      	ldr	r2, [r7, #8]
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <main+0x46c>)
 8000a40:	fb83 1302 	smull	r1, r3, r3, r2
 8000a44:	1099      	asrs	r1, r3, #2
 8000a46:	17d3      	asrs	r3, r2, #31
 8000a48:	1ac9      	subs	r1, r1, r3
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	440b      	add	r3, r1
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	1ad1      	subs	r1, r2, r3
 8000a54:	b2cb      	uxtb	r3, r1
 8000a56:	3330      	adds	r3, #48	; 0x30
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fbe4 	bl	8000228 <lcd_send_data>
	}

	// hasta que se presione #
	while (1) {
	    key = read_keypad();
 8000a60:	f7ff fc64 	bl	800032c <read_keypad>
 8000a64:	4603      	mov	r3, r0
 8000a66:	461a      	mov	r2, r3
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <main+0x458>)
 8000a6a:	701a      	strb	r2, [r3, #0]

	    if (key == '#') {
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <main+0x458>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b23      	cmp	r3, #35	; 0x23
 8000a72:	d1f5      	bne.n	8000a60 <main+0x434>
	        max_clear();
 8000a74:	f000 fada 	bl	800102c <max_clear>
	        break;
 8000a78:	bf00      	nop
  {
 8000a7a:	e5e9      	b.n	8000650 <main+0x24>
 8000a7c:	08004180 	.word	0x08004180
 8000a80:	08004194 	.word	0x08004194
 8000a84:	200004fc 	.word	0x200004fc
 8000a88:	080041a4 	.word	0x080041a4
 8000a8c:	080041b4 	.word	0x080041b4
 8000a90:	10624dd3 	.word	0x10624dd3
 8000a94:	51eb851f 	.word	0x51eb851f
 8000a98:	66666667 	.word	0x66666667

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b09c      	sub	sp, #112	; 0x70
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000aa6:	2228      	movs	r2, #40	; 0x28
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f003 fb1e 	bl	80040ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2234      	movs	r2, #52	; 0x34
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f003 fb10 	bl	80040ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000acc:	2303      	movs	r3, #3
 8000ace:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ada:	2301      	movs	r3, #1
 8000adc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ade:	2310      	movs	r3, #16
 8000ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000af0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 fb34 	bl	8002164 <HAL_RCC_OscConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000b02:	f000 f937 	bl	8000d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b06:	230f      	movs	r3, #15
 8000b08:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b20:	2102      	movs	r1, #2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 fb5c 	bl	80031e0 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b2e:	f000 f921 	bl	8000d74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b32:	2320      	movs	r3, #32
 8000b34:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f002 fd85 	bl	800364c <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000b48:	f000 f914 	bl	8000d74 <Error_Handler>
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	3770      	adds	r7, #112	; 0x70
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b5a:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <MX_I2C1_Init+0x78>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b60:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <MX_I2C1_Init+0x7c>)
 8000b62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b8e:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b90:	f000 febc 	bl	800190c <HAL_I2C_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b9a:	f000 f8eb 	bl	8000d74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000ba2:	f001 fa47 	bl	8002034 <HAL_I2CEx_ConfigAnalogFilter>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bac:	f000 f8e2 	bl	8000d74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000bb4:	f001 fa89 	bl	80020ca <HAL_I2CEx_ConfigDigitalFilter>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bbe:	f000 f8d9 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000420 	.word	0x20000420
 8000bcc:	40005400 	.word	0x40005400
 8000bd0:	2000090e 	.word	0x2000090e

08000bd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000bda:	4a15      	ldr	r2, [pc, #84]	; (8000c30 <MX_USART2_UART_Init+0x5c>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000be0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000be4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c18:	f002 feaa 	bl	8003970 <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c22:	f000 f8a7 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000474 	.word	0x20000474
 8000c30:	40004400 	.word	0x40004400

08000c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	4b47      	ldr	r3, [pc, #284]	; (8000d68 <MX_GPIO_Init+0x134>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	4a46      	ldr	r2, [pc, #280]	; (8000d68 <MX_GPIO_Init+0x134>)
 8000c50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c54:	6153      	str	r3, [r2, #20]
 8000c56:	4b44      	ldr	r3, [pc, #272]	; (8000d68 <MX_GPIO_Init+0x134>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c62:	4b41      	ldr	r3, [pc, #260]	; (8000d68 <MX_GPIO_Init+0x134>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	4a40      	ldr	r2, [pc, #256]	; (8000d68 <MX_GPIO_Init+0x134>)
 8000c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c6c:	6153      	str	r3, [r2, #20]
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	; (8000d68 <MX_GPIO_Init+0x134>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <MX_GPIO_Init+0x134>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	4a3a      	ldr	r2, [pc, #232]	; (8000d68 <MX_GPIO_Init+0x134>)
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c84:	6153      	str	r3, [r2, #20]
 8000c86:	4b38      	ldr	r3, [pc, #224]	; (8000d68 <MX_GPIO_Init+0x134>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4b35      	ldr	r3, [pc, #212]	; (8000d68 <MX_GPIO_Init+0x134>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a34      	ldr	r2, [pc, #208]	; (8000d68 <MX_GPIO_Init+0x134>)
 8000c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b32      	ldr	r3, [pc, #200]	; (8000d68 <MX_GPIO_Init+0x134>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8000cb0:	482e      	ldr	r0, [pc, #184]	; (8000d6c <MX_GPIO_Init+0x138>)
 8000cb2:	f000 fe13 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	21f0      	movs	r1, #240	; 0xf0
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbe:	f000 fe0d 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc8:	4829      	ldr	r0, [pc, #164]	; (8000d70 <MX_GPIO_Init+0x13c>)
 8000cca:	f000 fe07 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cd4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4821      	ldr	r0, [pc, #132]	; (8000d6c <MX_GPIO_Init+0x138>)
 8000ce6:	f000 fc6f 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_8;
 8000cea:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	481a      	ldr	r0, [pc, #104]	; (8000d6c <MX_GPIO_Init+0x138>)
 8000d04:	f000 fc60 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d08:	23f0      	movs	r3, #240	; 0xf0
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d22:	f000 fc51 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 8000d26:	f240 4307 	movw	r3, #1031	; 0x407
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_GPIO_Init+0x13c>)
 8000d3c:	f000 fc44 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_GPIO_Init+0x13c>)
 8000d5a:	f000 fc35 	bl	80015c8 <HAL_GPIO_Init>

}
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	; 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	48000800 	.word	0x48000800
 8000d70:	48000400 	.word	0x48000400

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>
	...

08000d80 <write_byte>:
};



void write_byte (uint8_t byte)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	e018      	b.n	8000dc2 <write_byte+0x42>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8000d90:	2200      	movs	r2, #0
 8000d92:	2180      	movs	r1, #128	; 0x80
 8000d94:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <write_byte+0x54>)
 8000d96:	f000 fda1 	bl	80018dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	2102      	movs	r1, #2
 8000da6:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <write_byte+0x54>)
 8000da8:	f000 fd98 	bl	80018dc <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 8000db2:	2201      	movs	r2, #1
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <write_byte+0x54>)
 8000db8:	f000 fd90 	bl	80018dc <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2b07      	cmp	r3, #7
 8000dc6:	dde3      	ble.n	8000d90 <write_byte+0x10>
	}
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	48000800 	.word	0x48000800

08000dd8 <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	460a      	mov	r2, r1
 8000de2:	71fb      	strb	r3, [r7, #7]
 8000de4:	4613      	mov	r3, r2
 8000de6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dee:	4812      	ldr	r0, [pc, #72]	; (8000e38 <write_max_cmd+0x60>)
 8000df0:	f000 fd74 	bl	80018dc <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	e00a      	b.n	8000e10 <write_max_cmd+0x38>
	{
		write_byte (address);
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ffbf 	bl	8000d80 <write_byte>
		write_byte (cmd); 
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ffbb 	bl	8000d80 <write_byte>
	for (int i=0;i<num; i++)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	ddf1      	ble.n	8000dfa <write_max_cmd+0x22>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	4806      	ldr	r0, [pc, #24]	; (8000e38 <write_max_cmd+0x60>)
 8000e1e:	f000 fd5d 	bl	80018dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e28:	4803      	ldr	r0, [pc, #12]	; (8000e38 <write_max_cmd+0x60>)
 8000e2a:	f000 fd57 	bl	80018dc <HAL_GPIO_WritePin>
}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	48000800 	.word	0x48000800

08000e3c <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	460b      	mov	r3, r1
 8000e48:	71bb      	strb	r3, [r7, #6]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 8000e4e:	797b      	ldrb	r3, [r7, #5]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d00d      	beq.n	8000e70 <setled+0x34>
 8000e54:	79bb      	ldrb	r3, [r7, #6]
 8000e56:	4a2e      	ldr	r2, [pc, #184]	; (8000f10 <setled+0xd4>)
 8000e58:	5cd1      	ldrb	r1, [r2, r3]
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	79bb      	ldrb	r3, [r7, #6]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	b2d1      	uxtb	r1, r2
 8000e6a:	4a29      	ldr	r2, [pc, #164]	; (8000f10 <setled+0xd4>)
 8000e6c:	54d1      	strb	r1, [r2, r3]
 8000e6e:	e00e      	b.n	8000e8e <setled+0x52>
 8000e70:	79bb      	ldrb	r3, [r7, #6]
 8000e72:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <setled+0xd4>)
 8000e74:	5cd1      	ldrb	r1, [r2, r3]
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	79bb      	ldrb	r3, [r7, #6]
 8000e86:	400a      	ands	r2, r1
 8000e88:	b2d1      	uxtb	r1, r2
 8000e8a:	4a21      	ldr	r2, [pc, #132]	; (8000f10 <setled+0xd4>)
 8000e8c:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 8000e8e:	79bb      	ldrb	r3, [r7, #6]
 8000e90:	08db      	lsrs	r3, r3, #3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8000e96:	79bb      	ldrb	r3, [r7, #6]
 8000e98:	f003 0307 	and.w	r3, r3, #7
 8000e9c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea4:	481b      	ldr	r0, [pc, #108]	; (8000f14 <setled+0xd8>)
 8000ea6:	f000 fd19 	bl	80018dc <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	e01b      	b.n	8000ee8 <setled+0xac>
	{
		if (i == (num-(n+1)))
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	425b      	negs	r3, r3
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d10d      	bne.n	8000ed6 <setled+0x9a>
		{
			write_byte (((c+1)));
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff5c 	bl	8000d80 <write_byte>
			write_byte (buffer[col]);
 8000ec8:	79bb      	ldrb	r3, [r7, #6]
 8000eca:	4a11      	ldr	r2, [pc, #68]	; (8000f10 <setled+0xd4>)
 8000ecc:	5cd3      	ldrb	r3, [r2, r3]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff56 	bl	8000d80 <write_byte>
 8000ed4:	e005      	b.n	8000ee2 <setled+0xa6>
		}
		else
		{
			write_byte (0);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f7ff ff52 	bl	8000d80 <write_byte>
			write_byte (0);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f7ff ff4f 	bl	8000d80 <write_byte>
	for (int i=0; i<num; i++) 
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	dde0      	ble.n	8000eb0 <setled+0x74>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef4:	4807      	ldr	r0, [pc, #28]	; (8000f14 <setled+0xd8>)
 8000ef6:	f000 fcf1 	bl	80018dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 8000efa:	2201      	movs	r2, #1
 8000efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <setled+0xd8>)
 8000f02:	f000 fceb 	bl	80018dc <HAL_GPIO_WritePin>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000500 	.word	0x20000500
 8000f14:	48000800 	.word	0x48000800

08000f18 <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460a      	mov	r2, r1
 8000f22:	71fb      	strb	r3, [r7, #7]
 8000f24:	4613      	mov	r3, r2
 8000f26:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	08db      	lsrs	r3, r3, #3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
 8000f40:	e02d      	b.n	8000f9e <setrow+0x86>
	{
		if (i == ((n)))
 8000f42:	69fa      	ldr	r2, [r7, #28]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d120      	bne.n	8000f8c <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	3307      	adds	r3, #7
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	e015      	b.n	8000f80 <setrow+0x68>
			{
				bool b = value&0x80;
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	bf14      	ite	ne
 8000f5e:	2301      	movne	r3, #1
 8000f60:	2300      	moveq	r3, #0
 8000f62:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	b2d1      	uxtb	r1, r2
 8000f6c:	7bba      	ldrb	r2, [r7, #14]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff64 	bl	8000e3c <setled>
				value<<=1;
 8000f74:	79bb      	ldrb	r3, [r7, #6]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	61bb      	str	r3, [r7, #24]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	dae4      	bge.n	8000f54 <setrow+0x3c>
 8000f8a:	e005      	b.n	8000f98 <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff fef7 	bl	8000d80 <write_byte>
			write_byte (0);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff fef4 	bl	8000d80 <write_byte>
	for (int i=0; i<num; i++) 
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	ddce      	ble.n	8000f42 <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	4903      	ldr	r1, [pc, #12]	; (8000fb4 <setrow+0x9c>)
 8000fa8:	7bfa      	ldrb	r2, [r7, #15]
 8000faa:	54ca      	strb	r2, [r1, r3]
}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000550 	.word	0x20000550

08000fb8 <write_char>:
		


void write_char (char c, uint8_t max)  
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	4a16      	ldr	r2, [pc, #88]	; (8001028 <write_char+0x70>)
 8000fce:	5cd3      	ldrb	r3, [r2, r3]
 8000fd0:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
	int row =6;
 8000fda:	2306      	movs	r3, #6
 8000fdc:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	e016      	b.n	8001012 <write_char+0x5a>
//	for (int j=start+7; j>=(start); j--)  // uncomment this if the character looks inverted about Y axis
	{
		setrow (row+(8*(max-1)), CH[j]);
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4413      	add	r3, r2
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	490c      	ldr	r1, [pc, #48]	; (8001028 <write_char+0x70>)
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	440b      	add	r3, r1
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	4619      	mov	r1, r3
 8001000:	4610      	mov	r0, r2
 8001002:	f7ff ff89 	bl	8000f18 <setrow>
		row--;
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3b01      	subs	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	3301      	adds	r3, #1
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	429a      	cmp	r2, r3
 800101c:	dbe2      	blt.n	8000fe4 <write_char+0x2c>
	}
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000000 	.word	0x20000000

0800102c <max_clear>:
}



void max_clear(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	e008      	b.n	800104a <max_clear+0x1e>
		setrow(i,0);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff6a 	bl	8000f18 <setrow>
	for (int i=0; i<num*8; i++) 
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3301      	adds	r3, #1
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b07      	cmp	r3, #7
 800104e:	ddf3      	ble.n	8001038 <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 8001050:	2300      	movs	r3, #0
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	e00c      	b.n	8001070 <max_clear+0x44>
	{
		buffer[i] = 0;
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <max_clear+0x54>)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	4413      	add	r3, r2
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 8001060:	4a08      	ldr	r2, [pc, #32]	; (8001084 <max_clear+0x58>)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	4413      	add	r3, r2
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2b4f      	cmp	r3, #79	; 0x4f
 8001074:	ddef      	ble.n	8001056 <max_clear+0x2a>
	}
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000500 	.word	0x20000500
 8001084:	20000550 	.word	0x20000550

08001088 <max_init>:
}



void max_init (uint8_t brightness)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 8001092:	2100      	movs	r1, #0
 8001094:	2009      	movs	r0, #9
 8001096:	f7ff fe9f 	bl	8000dd8 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 800109a:	2107      	movs	r1, #7
 800109c:	200b      	movs	r0, #11
 800109e:	f7ff fe9b 	bl	8000dd8 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 80010a2:	2101      	movs	r1, #1
 80010a4:	200c      	movs	r0, #12
 80010a6:	f7ff fe97 	bl	8000dd8 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 80010aa:	2100      	movs	r1, #0
 80010ac:	200f      	movs	r0, #15
 80010ae:	f7ff fe93 	bl	8000dd8 <write_max_cmd>
	
	max_clear ();
 80010b2:	f7ff ffbb 	bl	800102c <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4619      	mov	r1, r3
 80010ba:	200a      	movs	r0, #10
 80010bc:	f7ff fe8c 	bl	8000dd8 <write_max_cmd>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <HAL_MspInit+0x44>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	4a0e      	ldr	r2, [pc, #56]	; (800110c <HAL_MspInit+0x44>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6193      	str	r3, [r2, #24]
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <HAL_MspInit+0x44>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <HAL_MspInit+0x44>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a08      	ldr	r2, [pc, #32]	; (800110c <HAL_MspInit+0x44>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	61d3      	str	r3, [r2, #28]
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_MspInit+0x44>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010fe:	2007      	movs	r0, #7
 8001100:	f000 fa2e 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40021000 	.word	0x40021000

08001110 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a17      	ldr	r2, [pc, #92]	; (800118c <HAL_I2C_MspInit+0x7c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d128      	bne.n	8001184 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <HAL_I2C_MspInit+0x80>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	4a16      	ldr	r2, [pc, #88]	; (8001190 <HAL_I2C_MspInit+0x80>)
 8001138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800113c:	6153      	str	r3, [r2, #20]
 800113e:	4b14      	ldr	r3, [pc, #80]	; (8001190 <HAL_I2C_MspInit+0x80>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800114a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800114e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001150:	2312      	movs	r3, #18
 8001152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800115c:	2304      	movs	r3, #4
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	480b      	ldr	r0, [pc, #44]	; (8001194 <HAL_I2C_MspInit+0x84>)
 8001168:	f000 fa2e 	bl	80015c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_I2C_MspInit+0x80>)
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_I2C_MspInit+0x80>)
 8001172:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001176:	61d3      	str	r3, [r2, #28]
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_I2C_MspInit+0x80>)
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40005400 	.word	0x40005400
 8001190:	40021000 	.word	0x40021000
 8001194:	48000400 	.word	0x48000400

08001198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a17      	ldr	r2, [pc, #92]	; (8001214 <HAL_UART_MspInit+0x7c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d128      	bne.n	800120c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_UART_MspInit+0x80>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a16      	ldr	r2, [pc, #88]	; (8001218 <HAL_UART_MspInit+0x80>)
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_UART_MspInit+0x80>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_UART_MspInit+0x80>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	4a10      	ldr	r2, [pc, #64]	; (8001218 <HAL_UART_MspInit+0x80>)
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011dc:	6153      	str	r3, [r2, #20]
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_UART_MspInit+0x80>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ea:	230c      	movs	r3, #12
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011fa:	2307      	movs	r3, #7
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001208:	f000 f9de 	bl	80015c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	; 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40004400 	.word	0x40004400
 8001218:	40021000 	.word	0x40021000

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001268:	f000 f884 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <SystemInit+0x20>)
 8001276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127a:	4a05      	ldr	r2, [pc, #20]	; (8001290 <SystemInit+0x20>)
 800127c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001298:	f7ff ffea 	bl	8001270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800129e:	490d      	ldr	r1, [pc, #52]	; (80012d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <LoopForever+0xe>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a4:	e002      	b.n	80012ac <LoopCopyDataInit>

080012a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012aa:	3304      	adds	r3, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b0:	d3f9      	bcc.n	80012a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b4:	4c0a      	ldr	r4, [pc, #40]	; (80012e0 <LoopForever+0x16>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b8:	e001      	b.n	80012be <LoopFillZerobss>

080012ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012bc:	3204      	adds	r2, #4

080012be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c0:	d3fb      	bcc.n	80012ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c2:	f002 feef 	bl	80040a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012c6:	f7ff f9b1 	bl	800062c <main>

080012ca <LoopForever>:

LoopForever:
    b LoopForever
 80012ca:	e7fe      	b.n	80012ca <LoopForever>
   ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012cc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 80012d8:	08004204 	.word	0x08004204
  ldr r2, =_sbss
 80012dc:	20000404 	.word	0x20000404
  ldr r4, =_ebss
 80012e0:	200005a4 	.word	0x200005a4

080012e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC1_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_Init+0x28>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_Init+0x28>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 f931 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 f808 	bl	8001314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f7ff fee0 	bl	80010c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40022000 	.word	0x40022000

08001314 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x54>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x58>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	fbb3 f3f1 	udiv	r3, r3, r1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f93b 	bl	80015ae <HAL_SYSTICK_Config>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00e      	b.n	8001360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d80a      	bhi.n	800135e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f000 f911 	bl	8001576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001354:	4a06      	ldr	r2, [pc, #24]	; (8001370 <HAL_InitTick+0x5c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200003f8 	.word	0x200003f8
 800136c:	20000400 	.word	0x20000400
 8001370:	200003fc 	.word	0x200003fc

08001374 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x20>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x24>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_IncTick+0x24>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000400 	.word	0x20000400
 8001398:	200005a0 	.word	0x200005a0

0800139c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;  
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_GetTick+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	200005a0 	.word	0x200005a0

080013b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013bc:	f7ff ffee 	bl	800139c <HAL_GetTick>
 80013c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d005      	beq.n	80013da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_Delay+0x44>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013da:	bf00      	nop
 80013dc:	f7ff ffde 	bl	800139c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d8f7      	bhi.n	80013dc <HAL_Delay+0x28>
  {
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000400 	.word	0x20000400

080013fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f7ff ff8e 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff47 	bl	80013fc <__NVIC_SetPriorityGrouping>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff5c 	bl	8001444 <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff8e 	bl	80014b4 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5d 	bl	8001460 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffb0 	bl	800151c <SysTick_Config>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d6:	e14e      	b.n	8001876 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2101      	movs	r1, #1
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	4013      	ands	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8140 	beq.w	8001870 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d005      	beq.n	8001608 <HAL_GPIO_Init+0x40>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d130      	bne.n	800166a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800163e:	2201      	movs	r2, #1
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	f003 0201 	and.w	r2, r3, #1
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	2b03      	cmp	r3, #3
 8001674:	d017      	beq.n	80016a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	2203      	movs	r2, #3
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d123      	bne.n	80016fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	08da      	lsrs	r2, r3, #3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3208      	adds	r2, #8
 80016ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	220f      	movs	r2, #15
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	691a      	ldr	r2, [r3, #16]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	08da      	lsrs	r2, r3, #3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3208      	adds	r2, #8
 80016f4:	6939      	ldr	r1, [r7, #16]
 80016f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0203 	and.w	r2, r3, #3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 809a 	beq.w	8001870 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173c:	4b55      	ldr	r3, [pc, #340]	; (8001894 <HAL_GPIO_Init+0x2cc>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a54      	ldr	r2, [pc, #336]	; (8001894 <HAL_GPIO_Init+0x2cc>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b52      	ldr	r3, [pc, #328]	; (8001894 <HAL_GPIO_Init+0x2cc>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001754:	4a50      	ldr	r2, [pc, #320]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	3302      	adds	r3, #2
 800175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	220f      	movs	r2, #15
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800177e:	d013      	beq.n	80017a8 <HAL_GPIO_Init+0x1e0>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a46      	ldr	r2, [pc, #280]	; (800189c <HAL_GPIO_Init+0x2d4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d00d      	beq.n	80017a4 <HAL_GPIO_Init+0x1dc>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a45      	ldr	r2, [pc, #276]	; (80018a0 <HAL_GPIO_Init+0x2d8>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d007      	beq.n	80017a0 <HAL_GPIO_Init+0x1d8>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a44      	ldr	r2, [pc, #272]	; (80018a4 <HAL_GPIO_Init+0x2dc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d101      	bne.n	800179c <HAL_GPIO_Init+0x1d4>
 8001798:	2303      	movs	r3, #3
 800179a:	e006      	b.n	80017aa <HAL_GPIO_Init+0x1e2>
 800179c:	2305      	movs	r3, #5
 800179e:	e004      	b.n	80017aa <HAL_GPIO_Init+0x1e2>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e002      	b.n	80017aa <HAL_GPIO_Init+0x1e2>
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <HAL_GPIO_Init+0x1e2>
 80017a8:	2300      	movs	r3, #0
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	f002 0203 	and.w	r2, r2, #3
 80017b0:	0092      	lsls	r2, r2, #2
 80017b2:	4093      	lsls	r3, r2
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017ba:	4937      	ldr	r1, [pc, #220]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017c8:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <HAL_GPIO_Init+0x2e0>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017ec:	4a2e      	ldr	r2, [pc, #184]	; (80018a8 <HAL_GPIO_Init+0x2e0>)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f2:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <HAL_GPIO_Init+0x2e0>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001816:	4a24      	ldr	r2, [pc, #144]	; (80018a8 <HAL_GPIO_Init+0x2e0>)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800181c:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <HAL_GPIO_Init+0x2e0>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001840:	4a19      	ldr	r2, [pc, #100]	; (80018a8 <HAL_GPIO_Init+0x2e0>)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <HAL_GPIO_Init+0x2e0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800186a:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <HAL_GPIO_Init+0x2e0>)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3301      	adds	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	fa22 f303 	lsr.w	r3, r2, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	f47f aea9 	bne.w	80015d8 <HAL_GPIO_Init+0x10>
  }
}
 8001886:	bf00      	nop
 8001888:	bf00      	nop
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40021000 	.word	0x40021000
 8001898:	40010000 	.word	0x40010000
 800189c:	48000400 	.word	0x48000400
 80018a0:	48000800 	.word	0x48000800
 80018a4:	48000c00 	.word	0x48000c00
 80018a8:	40010400 	.word	0x40010400

080018ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	887b      	ldrh	r3, [r7, #2]
 80018be:	4013      	ands	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d002      	beq.n	80018ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	e001      	b.n	80018ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
 80018e8:	4613      	mov	r3, r2
 80018ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018ec:	787b      	ldrb	r3, [r7, #1]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018f2:	887a      	ldrh	r2, [r7, #2]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018f8:	e002      	b.n	8001900 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018fa:	887a      	ldrh	r2, [r7, #2]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e081      	b.n	8001a22 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d106      	bne.n	8001938 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff fbec 	bl	8001110 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2224      	movs	r2, #36	; 0x24
 800193c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0201 	bic.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800195c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800196c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d107      	bne.n	8001986 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	e006      	b.n	8001994 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001992:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d104      	bne.n	80019a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69d9      	ldr	r1, [r3, #28]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1a      	ldr	r2, [r3, #32]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0201 	orr.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	461a      	mov	r2, r3
 8001a38:	460b      	mov	r3, r1
 8001a3a:	817b      	strh	r3, [r7, #10]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b20      	cmp	r3, #32
 8001a4a:	f040 80da 	bne.w	8001c02 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_I2C_Master_Transmit+0x30>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e0d3      	b.n	8001c04 <HAL_I2C_Master_Transmit+0x1d8>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a64:	f7ff fc9a 	bl	800139c <HAL_GetTick>
 8001a68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2319      	movs	r3, #25
 8001a70:	2201      	movs	r2, #1
 8001a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f8f0 	bl	8001c5c <I2C_WaitOnFlagUntilTimeout>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0be      	b.n	8001c04 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2221      	movs	r2, #33	; 0x21
 8001a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2210      	movs	r2, #16
 8001a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	893a      	ldrh	r2, [r7, #8]
 8001aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	2bff      	cmp	r3, #255	; 0xff
 8001ab6:	d90e      	bls.n	8001ad6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	22ff      	movs	r2, #255	; 0xff
 8001abc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	8979      	ldrh	r1, [r7, #10]
 8001ac6:	4b51      	ldr	r3, [pc, #324]	; (8001c0c <HAL_I2C_Master_Transmit+0x1e0>)
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 fa7e 	bl	8001fd0 <I2C_TransferConfig>
 8001ad4:	e06c      	b.n	8001bb0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	8979      	ldrh	r1, [r7, #10]
 8001ae8:	4b48      	ldr	r3, [pc, #288]	; (8001c0c <HAL_I2C_Master_Transmit+0x1e0>)
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 fa6d 	bl	8001fd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001af6:	e05b      	b.n	8001bb0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	6a39      	ldr	r1, [r7, #32]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 f8fc 	bl	8001cfa <I2C_WaitOnTXISFlagUntilTimeout>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e07b      	b.n	8001c04 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d034      	beq.n	8001bb0 <HAL_I2C_Master_Transmit+0x184>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d130      	bne.n	8001bb0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	2200      	movs	r2, #0
 8001b56:	2180      	movs	r1, #128	; 0x80
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 f87f 	bl	8001c5c <I2C_WaitOnFlagUntilTimeout>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e04d      	b.n	8001c04 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2bff      	cmp	r3, #255	; 0xff
 8001b70:	d90e      	bls.n	8001b90 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	22ff      	movs	r2, #255	; 0xff
 8001b76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	8979      	ldrh	r1, [r7, #10]
 8001b80:	2300      	movs	r3, #0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 fa21 	bl	8001fd0 <I2C_TransferConfig>
 8001b8e:	e00f      	b.n	8001bb0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	8979      	ldrh	r1, [r7, #10]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 fa10 	bl	8001fd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d19e      	bne.n	8001af8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	6a39      	ldr	r1, [r7, #32]
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 f8e2 	bl	8001d88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e01a      	b.n	8001c04 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6859      	ldr	r1, [r3, #4]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_I2C_Master_Transmit+0x1e4>)
 8001be2:	400b      	ands	r3, r1
 8001be4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2220      	movs	r2, #32
 8001bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e000      	b.n	8001c04 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001c02:	2302      	movs	r3, #2
  }
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	80002000 	.word	0x80002000
 8001c10:	fe00e800 	.word	0xfe00e800

08001c14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d103      	bne.n	8001c32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d007      	beq.n	8001c50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699a      	ldr	r2, [r3, #24]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	619a      	str	r2, [r3, #24]
  }
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c6c:	e031      	b.n	8001cd2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	d02d      	beq.n	8001cd2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c76:	f7ff fb91 	bl	800139c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d302      	bcc.n	8001c8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d122      	bne.n	8001cd2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699a      	ldr	r2, [r3, #24]
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	4013      	ands	r3, r2
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	bf0c      	ite	eq
 8001c9c:	2301      	moveq	r3, #1
 8001c9e:	2300      	movne	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d113      	bne.n	8001cd2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f043 0220 	orr.w	r2, r3, #32
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00f      	b.n	8001cf2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699a      	ldr	r2, [r3, #24]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	bf0c      	ite	eq
 8001ce2:	2301      	moveq	r3, #1
 8001ce4:	2300      	movne	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d0be      	beq.n	8001c6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d06:	e033      	b.n	8001d70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f87f 	bl	8001e10 <I2C_IsErrorOccurred>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e031      	b.n	8001d80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d22:	d025      	beq.n	8001d70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d24:	f7ff fb3a 	bl	800139c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d302      	bcc.n	8001d3a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d11a      	bne.n	8001d70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d013      	beq.n	8001d70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	f043 0220 	orr.w	r2, r3, #32
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e007      	b.n	8001d80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d1c4      	bne.n	8001d08 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d94:	e02f      	b.n	8001df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f838 	bl	8001e10 <I2C_IsErrorOccurred>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e02d      	b.n	8001e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001daa:	f7ff faf7 	bl	800139c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d302      	bcc.n	8001dc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d11a      	bne.n	8001df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d013      	beq.n	8001df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f043 0220 	orr.w	r2, r3, #32
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e007      	b.n	8001e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d1c8      	bne.n	8001d96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d068      	beq.n	8001f0e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2210      	movs	r2, #16
 8001e42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e44:	e049      	b.n	8001eda <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d045      	beq.n	8001eda <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e4e:	f7ff faa5 	bl	800139c <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d302      	bcc.n	8001e64 <I2C_IsErrorOccurred+0x54>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d13a      	bne.n	8001eda <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e86:	d121      	bne.n	8001ecc <I2C_IsErrorOccurred+0xbc>
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e8e:	d01d      	beq.n	8001ecc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001e90:	7cfb      	ldrb	r3, [r7, #19]
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d01a      	beq.n	8001ecc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ea4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ea6:	f7ff fa79 	bl	800139c <HAL_GetTick>
 8001eaa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eac:	e00e      	b.n	8001ecc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001eae:	f7ff fa75 	bl	800139c <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b19      	cmp	r3, #25
 8001eba:	d907      	bls.n	8001ecc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	f043 0320 	orr.w	r3, r3, #32
 8001ec2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001eca:	e006      	b.n	8001eda <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d1e9      	bne.n	8001eae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b20      	cmp	r3, #32
 8001ee6:	d003      	beq.n	8001ef0 <I2C_IsErrorOccurred+0xe0>
 8001ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0aa      	beq.n	8001e46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d103      	bne.n	8001f00 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2220      	movs	r2, #32
 8001efe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	f043 0304 	orr.w	r3, r3, #4
 8001f06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00b      	beq.n	8001f38 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	f043 0308 	orr.w	r3, r3, #8
 8001f48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00b      	beq.n	8001f7c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	f043 0302 	orr.w	r3, r3, #2
 8001f6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d01c      	beq.n	8001fbe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f7ff fe45 	bl	8001c14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6859      	ldr	r1, [r3, #4]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <I2C_IsErrorOccurred+0x1bc>)
 8001f96:	400b      	ands	r3, r1
 8001f98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3728      	adds	r7, #40	; 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	fe00e800 	.word	0xfe00e800

08001fd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	817b      	strh	r3, [r7, #10]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fe2:	897b      	ldrh	r3, [r7, #10]
 8001fe4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fe8:	7a7b      	ldrb	r3, [r7, #9]
 8001fea:	041b      	lsls	r3, r3, #16
 8001fec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ff0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ffe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	0d5b      	lsrs	r3, r3, #21
 800200a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <I2C_TransferConfig+0x60>)
 8002010:	430b      	orrs	r3, r1
 8002012:	43db      	mvns	r3, r3
 8002014:	ea02 0103 	and.w	r1, r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	430a      	orrs	r2, r1
 8002020:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002022:	bf00      	nop
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	03ff63ff 	.word	0x03ff63ff

08002034 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b20      	cmp	r3, #32
 8002048:	d138      	bne.n	80020bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002054:	2302      	movs	r3, #2
 8002056:	e032      	b.n	80020be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2224      	movs	r2, #36	; 0x24
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002086:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6819      	ldr	r1, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e000      	b.n	80020be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020bc:	2302      	movs	r3, #2
  }
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b085      	sub	sp, #20
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b20      	cmp	r3, #32
 80020de:	d139      	bne.n	8002154 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e033      	b.n	8002156 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2224      	movs	r2, #36	; 0x24
 80020fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800211c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	021b      	lsls	r3, r3, #8
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	e000      	b.n	8002156 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002154:	2302      	movs	r3, #2
  }
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800216a:	af00      	add	r7, sp, #0
 800216c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002170:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002174:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	f001 b823 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 817d 	beq.w	800249a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021a0:	4bbc      	ldr	r3, [pc, #752]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d00c      	beq.n	80021c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021ac:	4bb9      	ldr	r3, [pc, #740]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d15c      	bne.n	8002272 <HAL_RCC_OscConfig+0x10e>
 80021b8:	4bb6      	ldr	r3, [pc, #728]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c4:	d155      	bne.n	8002272 <HAL_RCC_OscConfig+0x10e>
 80021c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d102      	bne.n	80021f8 <HAL_RCC_OscConfig+0x94>
 80021f2:	4ba8      	ldr	r3, [pc, #672]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	e015      	b.n	8002224 <HAL_RCC_OscConfig+0xc0>
 80021f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021fc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800220c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002210:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002214:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002218:	fa93 f3a3 	rbit	r3, r3
 800221c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002220:	4b9c      	ldr	r3, [pc, #624]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002228:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800222c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002230:	fa92 f2a2 	rbit	r2, r2
 8002234:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002238:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800223c:	fab2 f282 	clz	r2, r2
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	f042 0220 	orr.w	r2, r2, #32
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	f002 021f 	and.w	r2, r2, #31
 800224c:	2101      	movs	r1, #1
 800224e:	fa01 f202 	lsl.w	r2, r1, r2
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 811f 	beq.w	8002498 <HAL_RCC_OscConfig+0x334>
 800225a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f040 8116 	bne.w	8002498 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	f000 bfaf 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002276:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002282:	d106      	bne.n	8002292 <HAL_RCC_OscConfig+0x12e>
 8002284:	4b83      	ldr	r3, [pc, #524]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a82      	ldr	r2, [pc, #520]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	e036      	b.n	8002300 <HAL_RCC_OscConfig+0x19c>
 8002292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x158>
 80022a2:	4b7c      	ldr	r3, [pc, #496]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a7b      	ldr	r2, [pc, #492]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b79      	ldr	r3, [pc, #484]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a78      	ldr	r2, [pc, #480]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e021      	b.n	8002300 <HAL_RCC_OscConfig+0x19c>
 80022bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x184>
 80022ce:	4b71      	ldr	r3, [pc, #452]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a70      	ldr	r2, [pc, #448]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b6e      	ldr	r3, [pc, #440]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6d      	ldr	r2, [pc, #436]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e00b      	b.n	8002300 <HAL_RCC_OscConfig+0x19c>
 80022e8:	4b6a      	ldr	r3, [pc, #424]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a69      	ldr	r2, [pc, #420]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b67      	ldr	r3, [pc, #412]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a66      	ldr	r2, [pc, #408]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002300:	4b64      	ldr	r3, [pc, #400]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	f023 020f 	bic.w	r2, r3, #15
 8002308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	495f      	ldr	r1, [pc, #380]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 8002316:	4313      	orrs	r3, r2
 8002318:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800231a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d059      	beq.n	80023de <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7ff f837 	bl	800139c <HAL_GetTick>
 800232e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	e00a      	b.n	800234a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002334:	f7ff f832 	bl	800139c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b64      	cmp	r3, #100	; 0x64
 8002342:	d902      	bls.n	800234a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	f000 bf43 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>
 800234a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800234e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800235e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d102      	bne.n	800237c <HAL_RCC_OscConfig+0x218>
 8002376:	4b47      	ldr	r3, [pc, #284]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	e015      	b.n	80023a8 <HAL_RCC_OscConfig+0x244>
 800237c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002380:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002388:	fa93 f3a3 	rbit	r3, r3
 800238c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002394:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002398:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80023a4:	4b3b      	ldr	r3, [pc, #236]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023ac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80023b0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80023b4:	fa92 f2a2 	rbit	r2, r2
 80023b8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80023bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80023c0:	fab2 f282 	clz	r2, r2
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	f042 0220 	orr.w	r2, r2, #32
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	f002 021f 	and.w	r2, r2, #31
 80023d0:	2101      	movs	r1, #1
 80023d2:	fa01 f202 	lsl.w	r2, r1, r2
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ab      	beq.n	8002334 <HAL_RCC_OscConfig+0x1d0>
 80023dc:	e05d      	b.n	800249a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7fe ffdd 	bl	800139c <HAL_GetTick>
 80023e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e8:	f7fe ffd8 	bl	800139c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b64      	cmp	r3, #100	; 0x64
 80023f6:	d902      	bls.n	80023fe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	f000 bee9 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>
 80023fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002402:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002412:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	095b      	lsrs	r3, r3, #5
 800241e:	b2db      	uxtb	r3, r3
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d102      	bne.n	8002430 <HAL_RCC_OscConfig+0x2cc>
 800242a:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	e015      	b.n	800245c <HAL_RCC_OscConfig+0x2f8>
 8002430:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002434:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002448:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800244c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002458:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002460:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002464:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002468:	fa92 f2a2 	rbit	r2, r2
 800246c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002470:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002474:	fab2 f282 	clz	r2, r2
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	f042 0220 	orr.w	r2, r2, #32
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	f002 021f 	and.w	r2, r2, #31
 8002484:	2101      	movs	r1, #1
 8002486:	fa01 f202 	lsl.w	r2, r1, r2
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1ab      	bne.n	80023e8 <HAL_RCC_OscConfig+0x284>
 8002490:	e003      	b.n	800249a <HAL_RCC_OscConfig+0x336>
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 817d 	beq.w	80027aa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024b0:	4ba6      	ldr	r3, [pc, #664]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00b      	beq.n	80024d4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024bc:	4ba3      	ldr	r3, [pc, #652]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d172      	bne.n	80025ae <HAL_RCC_OscConfig+0x44a>
 80024c8:	4ba0      	ldr	r3, [pc, #640]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d16c      	bne.n	80025ae <HAL_RCC_OscConfig+0x44a>
 80024d4:	2302      	movs	r3, #2
 80024d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80024e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d102      	bne.n	8002504 <HAL_RCC_OscConfig+0x3a0>
 80024fe:	4b93      	ldr	r3, [pc, #588]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	e013      	b.n	800252c <HAL_RCC_OscConfig+0x3c8>
 8002504:	2302      	movs	r3, #2
 8002506:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002516:	2302      	movs	r3, #2
 8002518:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800251c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002528:	4b88      	ldr	r3, [pc, #544]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	2202      	movs	r2, #2
 800252e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002532:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002536:	fa92 f2a2 	rbit	r2, r2
 800253a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800253e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002542:	fab2 f282 	clz	r2, r2
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	f042 0220 	orr.w	r2, r2, #32
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	f002 021f 	and.w	r2, r2, #31
 8002552:	2101      	movs	r1, #1
 8002554:	fa01 f202 	lsl.w	r2, r1, r2
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCC_OscConfig+0x410>
 800255e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002562:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d002      	beq.n	8002574 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	f000 be2e 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002574:	4b75      	ldr	r3, [pc, #468]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002580:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	21f8      	movs	r1, #248	; 0xf8
 800258a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002592:	fa91 f1a1 	rbit	r1, r1
 8002596:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800259a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800259e:	fab1 f181 	clz	r1, r1
 80025a2:	b2c9      	uxtb	r1, r1
 80025a4:	408b      	lsls	r3, r1
 80025a6:	4969      	ldr	r1, [pc, #420]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ac:	e0fd      	b.n	80027aa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8088 	beq.w	80026d0 <HAL_RCC_OscConfig+0x56c>
 80025c0:	2301      	movs	r3, #1
 80025c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80025d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	461a      	mov	r2, r3
 80025e8:	2301      	movs	r3, #1
 80025ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7fe fed6 	bl	800139c <HAL_GetTick>
 80025f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f6:	f7fe fed1 	bl	800139c <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d902      	bls.n	800260c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	f000 bde2 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>
 800260c:	2302      	movs	r3, #2
 800260e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800261e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b01      	cmp	r3, #1
 8002634:	d102      	bne.n	800263c <HAL_RCC_OscConfig+0x4d8>
 8002636:	4b45      	ldr	r3, [pc, #276]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	e013      	b.n	8002664 <HAL_RCC_OscConfig+0x500>
 800263c:	2302      	movs	r3, #2
 800263e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800264e:	2302      	movs	r3, #2
 8002650:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002654:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002660:	4b3a      	ldr	r3, [pc, #232]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	2202      	movs	r2, #2
 8002666:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800266a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800266e:	fa92 f2a2 	rbit	r2, r2
 8002672:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002676:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800267a:	fab2 f282 	clz	r2, r2
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	f042 0220 	orr.w	r2, r2, #32
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	f002 021f 	and.w	r2, r2, #31
 800268a:	2101      	movs	r1, #1
 800268c:	fa01 f202 	lsl.w	r2, r1, r2
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0af      	beq.n	80025f6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002696:	4b2d      	ldr	r3, [pc, #180]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800269e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	21f8      	movs	r1, #248	; 0xf8
 80026ac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80026b4:	fa91 f1a1 	rbit	r1, r1
 80026b8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80026bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80026c0:	fab1 f181 	clz	r1, r1
 80026c4:	b2c9      	uxtb	r1, r1
 80026c6:	408b      	lsls	r3, r1
 80026c8:	4920      	ldr	r1, [pc, #128]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
 80026ce:	e06c      	b.n	80027aa <HAL_RCC_OscConfig+0x646>
 80026d0:	2301      	movs	r3, #1
 80026d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80026e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	461a      	mov	r2, r3
 80026f8:	2300      	movs	r3, #0
 80026fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7fe fe4e 	bl	800139c <HAL_GetTick>
 8002700:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002704:	e00a      	b.n	800271c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002706:	f7fe fe49 	bl	800139c <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d902      	bls.n	800271c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	f000 bd5a 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>
 800271c:	2302      	movs	r3, #2
 800271e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800272e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d104      	bne.n	8002750 <HAL_RCC_OscConfig+0x5ec>
 8002746:	4b01      	ldr	r3, [pc, #4]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	e015      	b.n	8002778 <HAL_RCC_OscConfig+0x614>
 800274c:	40021000 	.word	0x40021000
 8002750:	2302      	movs	r3, #2
 8002752:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002762:	2302      	movs	r3, #2
 8002764:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002768:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800276c:	fa93 f3a3 	rbit	r3, r3
 8002770:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002774:	4bc8      	ldr	r3, [pc, #800]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	2202      	movs	r2, #2
 800277a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800277e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002782:	fa92 f2a2 	rbit	r2, r2
 8002786:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800278a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800278e:	fab2 f282 	clz	r2, r2
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	f042 0220 	orr.w	r2, r2, #32
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	f002 021f 	and.w	r2, r2, #31
 800279e:	2101      	movs	r1, #1
 80027a0:	fa01 f202 	lsl.w	r2, r1, r2
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ad      	bne.n	8002706 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8110 	beq.w	80029e0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d079      	beq.n	80028c4 <HAL_RCC_OscConfig+0x760>
 80027d0:	2301      	movs	r3, #1
 80027d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80027e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	4bab      	ldr	r3, [pc, #684]	; (8002a9c <HAL_RCC_OscConfig+0x938>)
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	461a      	mov	r2, r3
 80027f6:	2301      	movs	r3, #1
 80027f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fa:	f7fe fdcf 	bl	800139c <HAL_GetTick>
 80027fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002802:	e00a      	b.n	800281a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002804:	f7fe fdca 	bl	800139c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d902      	bls.n	800281a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	f000 bcdb 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>
 800281a:	2302      	movs	r3, #2
 800281c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800282c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002830:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002834:	2202      	movs	r2, #2
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	fa93 f2a3 	rbit	r2, r3
 8002846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002858:	2202      	movs	r2, #2
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	fa93 f2a3 	rbit	r2, r3
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002872:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002874:	4b88      	ldr	r3, [pc, #544]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 8002876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002880:	2102      	movs	r1, #2
 8002882:	6019      	str	r1, [r3, #0]
 8002884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002888:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	fa93 f1a3 	rbit	r1, r3
 8002892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002896:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800289a:	6019      	str	r1, [r3, #0]
  return result;
 800289c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0a0      	beq.n	8002804 <HAL_RCC_OscConfig+0x6a0>
 80028c2:	e08d      	b.n	80029e0 <HAL_RCC_OscConfig+0x87c>
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028cc:	2201      	movs	r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	fa93 f2a3 	rbit	r2, r3
 80028de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028e6:	601a      	str	r2, [r3, #0]
  return result;
 80028e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b68      	ldr	r3, [pc, #416]	; (8002a9c <HAL_RCC_OscConfig+0x938>)
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	461a      	mov	r2, r3
 8002902:	2300      	movs	r3, #0
 8002904:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002906:	f7fe fd49 	bl	800139c <HAL_GetTick>
 800290a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290e:	e00a      	b.n	8002926 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002910:	f7fe fd44 	bl	800139c <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d902      	bls.n	8002926 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	f000 bc55 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800292e:	2202      	movs	r2, #2
 8002930:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002936:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	fa93 f2a3 	rbit	r2, r3
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002952:	2202      	movs	r2, #2
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	fa93 f2a3 	rbit	r2, r3
 8002964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002968:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002976:	2202      	movs	r2, #2
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	fa93 f2a3 	rbit	r2, r3
 8002988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002990:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002992:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 8002994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800299e:	2102      	movs	r1, #2
 80029a0:	6019      	str	r1, [r3, #0]
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	fa93 f1a3 	rbit	r1, r3
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029b8:	6019      	str	r1, [r3, #0]
  return result;
 80029ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	fab3 f383 	clz	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2101      	movs	r1, #1
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d197      	bne.n	8002910 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 81a1 	beq.w	8002d38 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f6:	2300      	movs	r3, #0
 80029f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fc:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d116      	bne.n	8002a36 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	4b23      	ldr	r3, [pc, #140]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	4a22      	ldr	r2, [pc, #136]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a12:	61d3      	str	r3, [r2, #28]
 8002a14:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a20:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a2e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a30:	2301      	movs	r3, #1
 8002a32:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a36:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_RCC_OscConfig+0x93c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d11a      	bne.n	8002a78 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a42:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <HAL_RCC_OscConfig+0x93c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a16      	ldr	r2, [pc, #88]	; (8002aa0 <HAL_RCC_OscConfig+0x93c>)
 8002a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fca5 	bl	800139c <HAL_GetTick>
 8002a52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a56:	e009      	b.n	8002a6c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a58:	f7fe fca0 	bl	800139c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b64      	cmp	r3, #100	; 0x64
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e3b1      	b.n	80031d0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_RCC_OscConfig+0x93c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ef      	beq.n	8002a58 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d10d      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x940>
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a02      	ldr	r2, [pc, #8]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6213      	str	r3, [r2, #32]
 8002a94:	e03c      	b.n	8002b10 <HAL_RCC_OscConfig+0x9ac>
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	10908120 	.word	0x10908120
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10c      	bne.n	8002ace <HAL_RCC_OscConfig+0x96a>
 8002ab4:	4bc1      	ldr	r3, [pc, #772]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4ac0      	ldr	r2, [pc, #768]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	6213      	str	r3, [r2, #32]
 8002ac0:	4bbe      	ldr	r3, [pc, #760]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4abd      	ldr	r2, [pc, #756]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002ac6:	f023 0304 	bic.w	r3, r3, #4
 8002aca:	6213      	str	r3, [r2, #32]
 8002acc:	e020      	b.n	8002b10 <HAL_RCC_OscConfig+0x9ac>
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x994>
 8002ade:	4bb7      	ldr	r3, [pc, #732]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	4ab6      	ldr	r2, [pc, #728]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6213      	str	r3, [r2, #32]
 8002aea:	4bb4      	ldr	r3, [pc, #720]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	4ab3      	ldr	r2, [pc, #716]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6213      	str	r3, [r2, #32]
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0x9ac>
 8002af8:	4bb0      	ldr	r3, [pc, #704]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4aaf      	ldr	r2, [pc, #700]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	6213      	str	r3, [r2, #32]
 8002b04:	4bad      	ldr	r3, [pc, #692]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4aac      	ldr	r2, [pc, #688]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002b0a:	f023 0304 	bic.w	r3, r3, #4
 8002b0e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8081 	beq.w	8002c24 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b22:	f7fe fc3b 	bl	800139c <HAL_GetTick>
 8002b26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7fe fc36 	bl	800139c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e345      	b.n	80031d0 <HAL_RCC_OscConfig+0x106c>
 8002b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b48:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b54:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	fa93 f2a3 	rbit	r2, r3
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b70:	2202      	movs	r2, #2
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b78:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	fa93 f2a3 	rbit	r2, r3
 8002b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b86:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b8a:	601a      	str	r2, [r3, #0]
  return result;
 8002b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b90:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b94:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d102      	bne.n	8002bb0 <HAL_RCC_OscConfig+0xa4c>
 8002baa:	4b84      	ldr	r3, [pc, #528]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	e013      	b.n	8002bd8 <HAL_RCC_OscConfig+0xa74>
 8002bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bb8:	2202      	movs	r2, #2
 8002bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	fa93 f2a3 	rbit	r2, r3
 8002bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	4b79      	ldr	r3, [pc, #484]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bdc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002be0:	2102      	movs	r1, #2
 8002be2:	6011      	str	r1, [r2, #0]
 8002be4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002be8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	fa92 f1a2 	rbit	r1, r2
 8002bf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bf6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002bfa:	6011      	str	r1, [r2, #0]
  return result;
 8002bfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c00:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	fab2 f282 	clz	r2, r2
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	f002 021f 	and.w	r2, r2, #31
 8002c16:	2101      	movs	r1, #1
 8002c18:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d084      	beq.n	8002b2c <HAL_RCC_OscConfig+0x9c8>
 8002c22:	e07f      	b.n	8002d24 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c24:	f7fe fbba 	bl	800139c <HAL_GetTick>
 8002c28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c2c:	e00b      	b.n	8002c46 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7fe fbb5 	bl	800139c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e2c4      	b.n	80031d0 <HAL_RCC_OscConfig+0x106c>
 8002c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c4e:	2202      	movs	r2, #2
 8002c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	fa93 f2a3 	rbit	r2, r3
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c72:	2202      	movs	r2, #2
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	fa93 f2a3 	rbit	r2, r3
 8002c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c8c:	601a      	str	r2, [r3, #0]
  return result;
 8002c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c92:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c96:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c98:	fab3 f383 	clz	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f043 0302 	orr.w	r3, r3, #2
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d102      	bne.n	8002cb2 <HAL_RCC_OscConfig+0xb4e>
 8002cac:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	e013      	b.n	8002cda <HAL_RCC_OscConfig+0xb76>
 8002cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002cba:	2202      	movs	r2, #2
 8002cbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	fa93 f2a3 	rbit	r2, r3
 8002ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	4b39      	ldr	r3, [pc, #228]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cde:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	6011      	str	r1, [r2, #0]
 8002ce6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	fa92 f1a2 	rbit	r1, r2
 8002cf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cf8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002cfc:	6011      	str	r1, [r2, #0]
  return result;
 8002cfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d02:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	fab2 f282 	clz	r2, r2
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	f002 021f 	and.w	r2, r2, #31
 8002d18:	2101      	movs	r1, #1
 8002d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d184      	bne.n	8002c2e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d24:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d105      	bne.n	8002d38 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2c:	4b23      	ldr	r3, [pc, #140]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	4a22      	ldr	r2, [pc, #136]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d36:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8242 	beq.w	80031ce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d4a:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	f000 8213 	beq.w	800317e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	f040 8162 	bne.w	800302e <HAL_RCC_OscConfig+0xeca>
 8002d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	fa93 f2a3 	rbit	r2, r3
 8002d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d8e:	601a      	str	r2, [r3, #0]
  return result;
 8002d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d94:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d98:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002da4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	461a      	mov	r2, r3
 8002dac:	2300      	movs	r3, #0
 8002dae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe faf4 	bl	800139c <HAL_GetTick>
 8002db4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db8:	e00c      	b.n	8002dd4 <HAL_RCC_OscConfig+0xc70>
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fe faec 	bl	800139c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1fd      	b.n	80031d0 <HAL_RCC_OscConfig+0x106c>
 8002dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ddc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	fa93 f2a3 	rbit	r2, r3
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002df8:	601a      	str	r2, [r3, #0]
  return result;
 8002dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e04:	fab3 f383 	clz	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d102      	bne.n	8002e1e <HAL_RCC_OscConfig+0xcba>
 8002e18:	4bb0      	ldr	r3, [pc, #704]	; (80030dc <HAL_RCC_OscConfig+0xf78>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	e027      	b.n	8002e6e <HAL_RCC_OscConfig+0xd0a>
 8002e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e22:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e30:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	fa93 f2a3 	rbit	r2, r3
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e48:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e56:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	fa93 f2a3 	rbit	r2, r3
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	4b9c      	ldr	r3, [pc, #624]	; (80030dc <HAL_RCC_OscConfig+0xf78>)
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e72:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e76:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e7a:	6011      	str	r1, [r2, #0]
 8002e7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e80:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	fa92 f1a2 	rbit	r1, r2
 8002e8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e8e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e92:	6011      	str	r1, [r2, #0]
  return result;
 8002e94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e98:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	fab2 f282 	clz	r2, r2
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	f042 0220 	orr.w	r2, r2, #32
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	f002 021f 	and.w	r2, r2, #31
 8002eae:	2101      	movs	r1, #1
 8002eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d182      	bne.n	8002dc0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eba:	4b88      	ldr	r3, [pc, #544]	; (80030dc <HAL_RCC_OscConfig+0xf78>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	430b      	orrs	r3, r1
 8002edc:	497f      	ldr	r1, [pc, #508]	; (80030dc <HAL_RCC_OscConfig+0xf78>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002eea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	fa93 f2a3 	rbit	r2, r3
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f06:	601a      	str	r2, [r3, #0]
  return result;
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f10:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	461a      	mov	r2, r3
 8002f24:	2301      	movs	r3, #1
 8002f26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fe fa38 	bl	800139c <HAL_GetTick>
 8002f2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f30:	e009      	b.n	8002f46 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f32:	f7fe fa33 	bl	800139c <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e144      	b.n	80031d0 <HAL_RCC_OscConfig+0x106c>
 8002f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f58:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	fa93 f2a3 	rbit	r2, r3
 8002f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f66:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f6a:	601a      	str	r2, [r3, #0]
  return result;
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d102      	bne.n	8002f90 <HAL_RCC_OscConfig+0xe2c>
 8002f8a:	4b54      	ldr	r3, [pc, #336]	; (80030dc <HAL_RCC_OscConfig+0xf78>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	e027      	b.n	8002fe0 <HAL_RCC_OscConfig+0xe7c>
 8002f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f94:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	fa93 f2a3 	rbit	r2, r3
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002fbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	fa93 f2a3 	rbit	r2, r3
 8002fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	4b3f      	ldr	r3, [pc, #252]	; (80030dc <HAL_RCC_OscConfig+0xf78>)
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fe4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002fe8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fec:	6011      	str	r1, [r2, #0]
 8002fee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	fa92 f1a2 	rbit	r1, r2
 8002ffc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003000:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003004:	6011      	str	r1, [r2, #0]
  return result;
 8003006:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800300a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	fab2 f282 	clz	r2, r2
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	f042 0220 	orr.w	r2, r2, #32
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	f002 021f 	and.w	r2, r2, #31
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f202 	lsl.w	r2, r1, r2
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d082      	beq.n	8002f32 <HAL_RCC_OscConfig+0xdce>
 800302c:	e0cf      	b.n	80031ce <HAL_RCC_OscConfig+0x106a>
 800302e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003032:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003036:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800303a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003040:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	fa93 f2a3 	rbit	r2, r3
 800304a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003052:	601a      	str	r2, [r3, #0]
  return result;
 8003054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003058:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800305c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003068:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	461a      	mov	r2, r3
 8003070:	2300      	movs	r3, #0
 8003072:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe f992 	bl	800139c <HAL_GetTick>
 8003078:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307c:	e009      	b.n	8003092 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307e:	f7fe f98d 	bl	800139c <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e09e      	b.n	80031d0 <HAL_RCC_OscConfig+0x106c>
 8003092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003096:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800309a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800309e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	fa93 f2a3 	rbit	r2, r3
 80030ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030b6:	601a      	str	r2, [r3, #0]
  return result;
 80030b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d104      	bne.n	80030e0 <HAL_RCC_OscConfig+0xf7c>
 80030d6:	4b01      	ldr	r3, [pc, #4]	; (80030dc <HAL_RCC_OscConfig+0xf78>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	e029      	b.n	8003130 <HAL_RCC_OscConfig+0xfcc>
 80030dc:	40021000 	.word	0x40021000
 80030e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80030e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	fa93 f2a3 	rbit	r2, r3
 80030fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003100:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800310e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003118:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	fa93 f2a3 	rbit	r2, r3
 8003122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003126:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_RCC_OscConfig+0x1078>)
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003134:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003138:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800313c:	6011      	str	r1, [r2, #0]
 800313e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003142:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	fa92 f1a2 	rbit	r1, r2
 800314c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003150:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003154:	6011      	str	r1, [r2, #0]
  return result;
 8003156:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800315a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	fab2 f282 	clz	r2, r2
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	f042 0220 	orr.w	r2, r2, #32
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	f002 021f 	and.w	r2, r2, #31
 8003170:	2101      	movs	r1, #1
 8003172:	fa01 f202 	lsl.w	r2, r1, r2
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d180      	bne.n	800307e <HAL_RCC_OscConfig+0xf1a>
 800317c:	e027      	b.n	80031ce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800317e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e01e      	b.n	80031d0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003192:	4b12      	ldr	r3, [pc, #72]	; (80031dc <HAL_RCC_OscConfig+0x1078>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800319a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800319e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d10b      	bne.n	80031ca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d001      	beq.n	80031ce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000

080031e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b09e      	sub	sp, #120	; 0x78
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e162      	b.n	80034be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f8:	4b90      	ldr	r3, [pc, #576]	; (800343c <HAL_RCC_ClockConfig+0x25c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d910      	bls.n	8003228 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b8d      	ldr	r3, [pc, #564]	; (800343c <HAL_RCC_ClockConfig+0x25c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 0207 	bic.w	r2, r3, #7
 800320e:	498b      	ldr	r1, [pc, #556]	; (800343c <HAL_RCC_ClockConfig+0x25c>)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b89      	ldr	r3, [pc, #548]	; (800343c <HAL_RCC_ClockConfig+0x25c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e14a      	b.n	80034be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003234:	4b82      	ldr	r3, [pc, #520]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	497f      	ldr	r1, [pc, #508]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80dc 	beq.w	800340c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d13c      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xf6>
 800325c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003260:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800326a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b01      	cmp	r3, #1
 800327e:	d102      	bne.n	8003286 <HAL_RCC_ClockConfig+0xa6>
 8003280:	4b6f      	ldr	r3, [pc, #444]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	e00f      	b.n	80032a6 <HAL_RCC_ClockConfig+0xc6>
 8003286:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800328a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	667b      	str	r3, [r7, #100]	; 0x64
 8003294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003298:	663b      	str	r3, [r7, #96]	; 0x60
 800329a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800329c:	fa93 f3a3 	rbit	r3, r3
 80032a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032a2:	4b67      	ldr	r3, [pc, #412]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80032ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032ae:	fa92 f2a2 	rbit	r2, r2
 80032b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80032b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032b6:	fab2 f282 	clz	r2, r2
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	f042 0220 	orr.w	r2, r2, #32
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	f002 021f 	and.w	r2, r2, #31
 80032c6:	2101      	movs	r1, #1
 80032c8:	fa01 f202 	lsl.w	r2, r1, r2
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d17b      	bne.n	80033ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e0f3      	b.n	80034be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d13c      	bne.n	8003358 <HAL_RCC_ClockConfig+0x178>
 80032de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d102      	bne.n	8003308 <HAL_RCC_ClockConfig+0x128>
 8003302:	4b4f      	ldr	r3, [pc, #316]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	e00f      	b.n	8003328 <HAL_RCC_ClockConfig+0x148>
 8003308:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800330c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	647b      	str	r3, [r7, #68]	; 0x44
 8003316:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800331a:	643b      	str	r3, [r7, #64]	; 0x40
 800331c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003324:	4b46      	ldr	r3, [pc, #280]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800332c:	63ba      	str	r2, [r7, #56]	; 0x38
 800332e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003330:	fa92 f2a2 	rbit	r2, r2
 8003334:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003338:	fab2 f282 	clz	r2, r2
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	f042 0220 	orr.w	r2, r2, #32
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	f002 021f 	and.w	r2, r2, #31
 8003348:	2101      	movs	r1, #1
 800334a:	fa01 f202 	lsl.w	r2, r1, r2
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d13a      	bne.n	80033ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0b2      	b.n	80034be <HAL_RCC_ClockConfig+0x2de>
 8003358:	2302      	movs	r3, #2
 800335a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d102      	bne.n	8003380 <HAL_RCC_ClockConfig+0x1a0>
 800337a:	4b31      	ldr	r3, [pc, #196]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	e00d      	b.n	800339c <HAL_RCC_ClockConfig+0x1bc>
 8003380:	2302      	movs	r3, #2
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
 800338c:	2302      	movs	r3, #2
 800338e:	623b      	str	r3, [r7, #32]
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	4b29      	ldr	r3, [pc, #164]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	2202      	movs	r2, #2
 800339e:	61ba      	str	r2, [r7, #24]
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	fa92 f2a2 	rbit	r2, r2
 80033a6:	617a      	str	r2, [r7, #20]
  return result;
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	fab2 f282 	clz	r2, r2
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	f042 0220 	orr.w	r2, r2, #32
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	f002 021f 	and.w	r2, r2, #31
 80033ba:	2101      	movs	r1, #1
 80033bc:	fa01 f202 	lsl.w	r2, r1, r2
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e079      	b.n	80034be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ca:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f023 0203 	bic.w	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	491a      	ldr	r1, [pc, #104]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033dc:	f7fd ffde 	bl	800139c <HAL_GetTick>
 80033e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7fd ffda 	bl	800139c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e061      	b.n	80034be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 020c 	and.w	r2, r3, #12
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	429a      	cmp	r2, r3
 800340a:	d1eb      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_ClockConfig+0x25c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d214      	bcs.n	8003444 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b08      	ldr	r3, [pc, #32]	; (800343c <HAL_RCC_ClockConfig+0x25c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 0207 	bic.w	r2, r3, #7
 8003422:	4906      	ldr	r1, [pc, #24]	; (800343c <HAL_RCC_ClockConfig+0x25c>)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b04      	ldr	r3, [pc, #16]	; (800343c <HAL_RCC_ClockConfig+0x25c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d005      	beq.n	8003444 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e040      	b.n	80034be <HAL_RCC_ClockConfig+0x2de>
 800343c:	40022000 	.word	0x40022000
 8003440:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003450:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <HAL_RCC_ClockConfig+0x2e8>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	491a      	ldr	r1, [pc, #104]	; (80034c8 <HAL_RCC_ClockConfig+0x2e8>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800346e:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <HAL_RCC_ClockConfig+0x2e8>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4912      	ldr	r1, [pc, #72]	; (80034c8 <HAL_RCC_ClockConfig+0x2e8>)
 800347e:	4313      	orrs	r3, r2
 8003480:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003482:	f000 f829 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003486:	4601      	mov	r1, r0
 8003488:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <HAL_RCC_ClockConfig+0x2e8>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003490:	22f0      	movs	r2, #240	; 0xf0
 8003492:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	fa92 f2a2 	rbit	r2, r2
 800349a:	60fa      	str	r2, [r7, #12]
  return result;
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	fab2 f282 	clz	r2, r2
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	40d3      	lsrs	r3, r2
 80034a6:	4a09      	ldr	r2, [pc, #36]	; (80034cc <HAL_RCC_ClockConfig+0x2ec>)
 80034a8:	5cd3      	ldrb	r3, [r2, r3]
 80034aa:	fa21 f303 	lsr.w	r3, r1, r3
 80034ae:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <HAL_RCC_ClockConfig+0x2f0>)
 80034b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034b2:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <HAL_RCC_ClockConfig+0x2f4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd ff2c 	bl	8001314 <HAL_InitTick>
  
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3778      	adds	r7, #120	; 0x78
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000
 80034cc:	080041c4 	.word	0x080041c4
 80034d0:	200003f8 	.word	0x200003f8
 80034d4:	200003fc 	.word	0x200003fc

080034d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	b08b      	sub	sp, #44	; 0x2c
 80034dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80034f2:	4b29      	ldr	r3, [pc, #164]	; (8003598 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d002      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0x30>
 8003502:	2b08      	cmp	r3, #8
 8003504:	d003      	beq.n	800350e <HAL_RCC_GetSysClockFreq+0x36>
 8003506:	e03c      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003508:	4b24      	ldr	r3, [pc, #144]	; (800359c <HAL_RCC_GetSysClockFreq+0xc4>)
 800350a:	623b      	str	r3, [r7, #32]
      break;
 800350c:	e03c      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003514:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003518:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	fa92 f2a2 	rbit	r2, r2
 8003520:	607a      	str	r2, [r7, #4]
  return result;
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	fab2 f282 	clz	r2, r2
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	40d3      	lsrs	r3, r2
 800352c:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800352e:	5cd3      	ldrb	r3, [r2, r3]
 8003530:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003532:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	220f      	movs	r2, #15
 800353c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	fa92 f2a2 	rbit	r2, r2
 8003544:	60fa      	str	r2, [r7, #12]
  return result;
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	fab2 f282 	clz	r2, r2
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	40d3      	lsrs	r3, r2
 8003550:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003552:	5cd3      	ldrb	r3, [r2, r3]
 8003554:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003560:	4a0e      	ldr	r2, [pc, #56]	; (800359c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	fbb2 f2f3 	udiv	r2, r2, r3
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
 8003570:	e004      	b.n	800357c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	4a0c      	ldr	r2, [pc, #48]	; (80035a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	623b      	str	r3, [r7, #32]
      break;
 8003580:	e002      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003584:	623b      	str	r3, [r7, #32]
      break;
 8003586:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003588:	6a3b      	ldr	r3, [r7, #32]
}
 800358a:	4618      	mov	r0, r3
 800358c:	372c      	adds	r7, #44	; 0x2c
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000
 800359c:	007a1200 	.word	0x007a1200
 80035a0:	080041dc 	.word	0x080041dc
 80035a4:	080041ec 	.word	0x080041ec
 80035a8:	003d0900 	.word	0x003d0900

080035ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b0:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035b2:	681b      	ldr	r3, [r3, #0]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	200003f8 	.word	0x200003f8

080035c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80035ca:	f7ff ffef 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 80035ce:	4601      	mov	r1, r0
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80035dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	fa92 f2a2 	rbit	r2, r2
 80035e4:	603a      	str	r2, [r7, #0]
  return result;
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	fab2 f282 	clz	r2, r2
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	40d3      	lsrs	r3, r2
 80035f0:	4a04      	ldr	r2, [pc, #16]	; (8003604 <HAL_RCC_GetPCLK1Freq+0x40>)
 80035f2:	5cd3      	ldrb	r3, [r2, r3]
 80035f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000
 8003604:	080041d4 	.word	0x080041d4

08003608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800360e:	f7ff ffcd 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 8003612:	4601      	mov	r1, r0
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800361c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003620:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	fa92 f2a2 	rbit	r2, r2
 8003628:	603a      	str	r2, [r7, #0]
  return result;
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	fab2 f282 	clz	r2, r2
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	40d3      	lsrs	r3, r2
 8003634:	4a04      	ldr	r2, [pc, #16]	; (8003648 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003636:	5cd3      	ldrb	r3, [r2, r3]
 8003638:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40021000 	.word	0x40021000
 8003648:	080041d4 	.word	0x080041d4

0800364c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b092      	sub	sp, #72	; 0x48
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800365c:	2300      	movs	r3, #0
 800365e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80d4 	beq.w	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003670:	4b4e      	ldr	r3, [pc, #312]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10e      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800367c:	4b4b      	ldr	r3, [pc, #300]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	4a4a      	ldr	r2, [pc, #296]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003686:	61d3      	str	r3, [r2, #28]
 8003688:	4b48      	ldr	r3, [pc, #288]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003694:	2301      	movs	r3, #1
 8003696:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369a:	4b45      	ldr	r3, [pc, #276]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d118      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036a6:	4b42      	ldr	r3, [pc, #264]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a41      	ldr	r2, [pc, #260]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b2:	f7fd fe73 	bl	800139c <HAL_GetTick>
 80036b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b8:	e008      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ba:	f7fd fe6f 	bl	800139c <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b64      	cmp	r3, #100	; 0x64
 80036c6:	d901      	bls.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e14b      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036cc:	4b38      	ldr	r3, [pc, #224]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036d8:	4b34      	ldr	r3, [pc, #208]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8084 	beq.w	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d07c      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036f8:	4b2c      	ldr	r3, [pc, #176]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003706:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003712:	fab3 f383 	clz	r3, r3
 8003716:	b2db      	uxtb	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	461a      	mov	r2, r3
 8003722:	2301      	movs	r3, #1
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800372a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	461a      	mov	r2, r3
 8003746:	2300      	movs	r3, #0
 8003748:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800374a:	4a18      	ldr	r2, [pc, #96]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800374e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d04b      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7fd fe1f 	bl	800139c <HAL_GetTick>
 800375e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003760:	e00a      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003762:	f7fd fe1b 	bl	800139c <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e0f5      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003778:	2302      	movs	r3, #2
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
 8003784:	2302      	movs	r3, #2
 8003786:	623b      	str	r3, [r7, #32]
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	61fb      	str	r3, [r7, #28]
  return result;
 8003790:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f043 0302 	orr.w	r3, r3, #2
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d108      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80037a6:	4b01      	ldr	r3, [pc, #4]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	e00d      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40007000 	.word	0x40007000
 80037b4:	10908100 	.word	0x10908100
 80037b8:	2302      	movs	r3, #2
 80037ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	4b69      	ldr	r3, [pc, #420]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	2202      	movs	r2, #2
 80037ca:	613a      	str	r2, [r7, #16]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	fa92 f2a2 	rbit	r2, r2
 80037d2:	60fa      	str	r2, [r7, #12]
  return result;
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	fab2 f282 	clz	r2, r2
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	f002 021f 	and.w	r2, r2, #31
 80037e6:	2101      	movs	r1, #1
 80037e8:	fa01 f202 	lsl.w	r2, r1, r2
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0b7      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037f2:	4b5e      	ldr	r3, [pc, #376]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	495b      	ldr	r1, [pc, #364]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003800:	4313      	orrs	r3, r2
 8003802:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003804:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003808:	2b01      	cmp	r3, #1
 800380a:	d105      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380c:	4b57      	ldr	r3, [pc, #348]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	4a56      	ldr	r2, [pc, #344]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003816:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003824:	4b51      	ldr	r3, [pc, #324]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	f023 0203 	bic.w	r2, r3, #3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	494e      	ldr	r1, [pc, #312]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003832:	4313      	orrs	r3, r2
 8003834:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003842:	4b4a      	ldr	r3, [pc, #296]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f023 0210 	bic.w	r2, r3, #16
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	4947      	ldr	r1, [pc, #284]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003850:	4313      	orrs	r3, r2
 8003852:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003860:	4b42      	ldr	r3, [pc, #264]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	493f      	ldr	r1, [pc, #252]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800386e:	4313      	orrs	r3, r2
 8003870:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800387e:	4b3b      	ldr	r3, [pc, #236]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	f023 0220 	bic.w	r2, r3, #32
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	4938      	ldr	r1, [pc, #224]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800388c:	4313      	orrs	r3, r2
 800388e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800389c:	4b33      	ldr	r3, [pc, #204]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	4930      	ldr	r1, [pc, #192]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038ba:	4b2c      	ldr	r3, [pc, #176]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	4929      	ldr	r1, [pc, #164]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80038d8:	4b24      	ldr	r3, [pc, #144]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	4921      	ldr	r1, [pc, #132]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d008      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038f6:	4b1d      	ldr	r3, [pc, #116]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	491a      	ldr	r1, [pc, #104]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003904:	4313      	orrs	r3, r2
 8003906:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003914:	4b15      	ldr	r3, [pc, #84]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	4912      	ldr	r1, [pc, #72]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003922:	4313      	orrs	r3, r2
 8003924:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003932:	4b0e      	ldr	r3, [pc, #56]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	490b      	ldr	r1, [pc, #44]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003940:	4313      	orrs	r3, r2
 8003942:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	4903      	ldr	r1, [pc, #12]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800395e:	4313      	orrs	r3, r2
 8003960:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3748      	adds	r7, #72	; 0x48
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000

08003970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e040      	b.n	8003a04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd fc00 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2224      	movs	r2, #36	; 0x24
 800399c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0201 	bic.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f82c 	bl	8003a0c <UART_SetConfig>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e022      	b.n	8003a04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f956 	bl	8003c78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f9dd 	bl	8003dbc <UART_CheckIdleState>
 8003a02:	4603      	mov	r3, r0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4b8a      	ldr	r3, [pc, #552]	; (8003c60 <UART_SetConfig+0x254>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	6979      	ldr	r1, [r7, #20]
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a78      	ldr	r2, [pc, #480]	; (8003c64 <UART_SetConfig+0x258>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d120      	bne.n	8003aca <UART_SetConfig+0xbe>
 8003a88:	4b77      	ldr	r3, [pc, #476]	; (8003c68 <UART_SetConfig+0x25c>)
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d817      	bhi.n	8003ac4 <UART_SetConfig+0xb8>
 8003a94:	a201      	add	r2, pc, #4	; (adr r2, 8003a9c <UART_SetConfig+0x90>)
 8003a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9a:	bf00      	nop
 8003a9c:	08003aad 	.word	0x08003aad
 8003aa0:	08003ab9 	.word	0x08003ab9
 8003aa4:	08003abf 	.word	0x08003abf
 8003aa8:	08003ab3 	.word	0x08003ab3
 8003aac:	2300      	movs	r3, #0
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e01d      	b.n	8003aee <UART_SetConfig+0xe2>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	77fb      	strb	r3, [r7, #31]
 8003ab6:	e01a      	b.n	8003aee <UART_SetConfig+0xe2>
 8003ab8:	2304      	movs	r3, #4
 8003aba:	77fb      	strb	r3, [r7, #31]
 8003abc:	e017      	b.n	8003aee <UART_SetConfig+0xe2>
 8003abe:	2308      	movs	r3, #8
 8003ac0:	77fb      	strb	r3, [r7, #31]
 8003ac2:	e014      	b.n	8003aee <UART_SetConfig+0xe2>
 8003ac4:	2310      	movs	r3, #16
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e011      	b.n	8003aee <UART_SetConfig+0xe2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a67      	ldr	r2, [pc, #412]	; (8003c6c <UART_SetConfig+0x260>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d102      	bne.n	8003ada <UART_SetConfig+0xce>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e009      	b.n	8003aee <UART_SetConfig+0xe2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a64      	ldr	r2, [pc, #400]	; (8003c70 <UART_SetConfig+0x264>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d102      	bne.n	8003aea <UART_SetConfig+0xde>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e001      	b.n	8003aee <UART_SetConfig+0xe2>
 8003aea:	2310      	movs	r3, #16
 8003aec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af6:	d15a      	bne.n	8003bae <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003af8:	7ffb      	ldrb	r3, [r7, #31]
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d827      	bhi.n	8003b4e <UART_SetConfig+0x142>
 8003afe:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <UART_SetConfig+0xf8>)
 8003b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b04:	08003b29 	.word	0x08003b29
 8003b08:	08003b31 	.word	0x08003b31
 8003b0c:	08003b39 	.word	0x08003b39
 8003b10:	08003b4f 	.word	0x08003b4f
 8003b14:	08003b3f 	.word	0x08003b3f
 8003b18:	08003b4f 	.word	0x08003b4f
 8003b1c:	08003b4f 	.word	0x08003b4f
 8003b20:	08003b4f 	.word	0x08003b4f
 8003b24:	08003b47 	.word	0x08003b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b28:	f7ff fd4c 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8003b2c:	61b8      	str	r0, [r7, #24]
        break;
 8003b2e:	e013      	b.n	8003b58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b30:	f7ff fd6a 	bl	8003608 <HAL_RCC_GetPCLK2Freq>
 8003b34:	61b8      	str	r0, [r7, #24]
        break;
 8003b36:	e00f      	b.n	8003b58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b38:	4b4e      	ldr	r3, [pc, #312]	; (8003c74 <UART_SetConfig+0x268>)
 8003b3a:	61bb      	str	r3, [r7, #24]
        break;
 8003b3c:	e00c      	b.n	8003b58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b3e:	f7ff fccb 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003b42:	61b8      	str	r0, [r7, #24]
        break;
 8003b44:	e008      	b.n	8003b58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b4a:	61bb      	str	r3, [r7, #24]
        break;
 8003b4c:	e004      	b.n	8003b58 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	77bb      	strb	r3, [r7, #30]
        break;
 8003b56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d074      	beq.n	8003c48 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	005a      	lsls	r2, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	085b      	lsrs	r3, r3, #1
 8003b68:	441a      	add	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	2b0f      	cmp	r3, #15
 8003b78:	d916      	bls.n	8003ba8 <UART_SetConfig+0x19c>
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b80:	d212      	bcs.n	8003ba8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f023 030f 	bic.w	r3, r3, #15
 8003b8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	085b      	lsrs	r3, r3, #1
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	89fb      	ldrh	r3, [r7, #14]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	89fa      	ldrh	r2, [r7, #14]
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	e04f      	b.n	8003c48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	77bb      	strb	r3, [r7, #30]
 8003bac:	e04c      	b.n	8003c48 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bae:	7ffb      	ldrb	r3, [r7, #31]
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d828      	bhi.n	8003c06 <UART_SetConfig+0x1fa>
 8003bb4:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <UART_SetConfig+0x1b0>)
 8003bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bba:	bf00      	nop
 8003bbc:	08003be1 	.word	0x08003be1
 8003bc0:	08003be9 	.word	0x08003be9
 8003bc4:	08003bf1 	.word	0x08003bf1
 8003bc8:	08003c07 	.word	0x08003c07
 8003bcc:	08003bf7 	.word	0x08003bf7
 8003bd0:	08003c07 	.word	0x08003c07
 8003bd4:	08003c07 	.word	0x08003c07
 8003bd8:	08003c07 	.word	0x08003c07
 8003bdc:	08003bff 	.word	0x08003bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003be0:	f7ff fcf0 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8003be4:	61b8      	str	r0, [r7, #24]
        break;
 8003be6:	e013      	b.n	8003c10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003be8:	f7ff fd0e 	bl	8003608 <HAL_RCC_GetPCLK2Freq>
 8003bec:	61b8      	str	r0, [r7, #24]
        break;
 8003bee:	e00f      	b.n	8003c10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf0:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <UART_SetConfig+0x268>)
 8003bf2:	61bb      	str	r3, [r7, #24]
        break;
 8003bf4:	e00c      	b.n	8003c10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bf6:	f7ff fc6f 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003bfa:	61b8      	str	r0, [r7, #24]
        break;
 8003bfc:	e008      	b.n	8003c10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c02:	61bb      	str	r3, [r7, #24]
        break;
 8003c04:	e004      	b.n	8003c10 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c0e:	bf00      	nop
    }

    if (pclk != 0U)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d018      	beq.n	8003c48 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	085a      	lsrs	r2, r3, #1
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	441a      	add	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b0f      	cmp	r3, #15
 8003c2e:	d909      	bls.n	8003c44 <UART_SetConfig+0x238>
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c36:	d205      	bcs.n	8003c44 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60da      	str	r2, [r3, #12]
 8003c42:	e001      	b.n	8003c48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c54:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3720      	adds	r7, #32
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	efff69f3 	.word	0xefff69f3
 8003c64:	40013800 	.word	0x40013800
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40004400 	.word	0x40004400
 8003c70:	40004800 	.word	0x40004800
 8003c74:	007a1200 	.word	0x007a1200

08003c78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01a      	beq.n	8003d8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d76:	d10a      	bne.n	8003d8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	605a      	str	r2, [r3, #4]
  }
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b098      	sub	sp, #96	; 0x60
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dcc:	f7fd fae6 	bl	800139c <HAL_GetTick>
 8003dd0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d12e      	bne.n	8003e3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003de0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de8:	2200      	movs	r2, #0
 8003dea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f88c 	bl	8003f0c <UART_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d021      	beq.n	8003e3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e0e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e18:	647b      	str	r3, [r7, #68]	; 0x44
 8003e1a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e6      	bne.n	8003dfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e062      	b.n	8003f04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d149      	bne.n	8003ee0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e54:	2200      	movs	r2, #0
 8003e56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f856 	bl	8003f0c <UART_WaitOnFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d03c      	beq.n	8003ee0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	e853 3f00 	ldrex	r3, [r3]
 8003e72:	623b      	str	r3, [r7, #32]
   return(result);
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e84:	633b      	str	r3, [r7, #48]	; 0x30
 8003e86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e8c:	e841 2300 	strex	r3, r2, [r1]
 8003e90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e6      	bne.n	8003e66 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0301 	bic.w	r3, r3, #1
 8003eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3308      	adds	r3, #8
 8003eb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eb8:	61fa      	str	r2, [r7, #28]
 8003eba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebc:	69b9      	ldr	r1, [r7, #24]
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	e841 2300 	strex	r3, r2, [r1]
 8003ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e5      	bne.n	8003e98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e011      	b.n	8003f04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3758      	adds	r7, #88	; 0x58
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	603b      	str	r3, [r7, #0]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1c:	e049      	b.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f24:	d045      	beq.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f26:	f7fd fa39 	bl	800139c <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d302      	bcc.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e048      	b.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d031      	beq.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d110      	bne.n	8003f7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2208      	movs	r2, #8
 8003f62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f838 	bl	8003fda <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e029      	b.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f8c:	d111      	bne.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f81e 	bl	8003fda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e00f      	b.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69da      	ldr	r2, [r3, #28]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	bf0c      	ite	eq
 8003fc2:	2301      	moveq	r3, #1
 8003fc4:	2300      	movne	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d0a6      	beq.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b095      	sub	sp, #84	; 0x54
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004000:	643b      	str	r3, [r7, #64]	; 0x40
 8004002:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004006:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800400e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e6      	bne.n	8003fe2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3308      	adds	r3, #8
 800401a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	e853 3f00 	ldrex	r3, [r3]
 8004022:	61fb      	str	r3, [r7, #28]
   return(result);
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	64bb      	str	r3, [r7, #72]	; 0x48
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3308      	adds	r3, #8
 8004032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004034:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800403a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800403c:	e841 2300 	strex	r3, r2, [r1]
 8004040:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e5      	bne.n	8004014 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404c:	2b01      	cmp	r3, #1
 800404e:	d118      	bne.n	8004082 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	60bb      	str	r3, [r7, #8]
   return(result);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f023 0310 	bic.w	r3, r3, #16
 8004064:	647b      	str	r3, [r7, #68]	; 0x44
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800406e:	61bb      	str	r3, [r7, #24]
 8004070:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	6979      	ldr	r1, [r7, #20]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	613b      	str	r3, [r7, #16]
   return(result);
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1e6      	bne.n	8004050 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004096:	bf00      	nop
 8004098:	3754      	adds	r7, #84	; 0x54
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
	...

080040a4 <__libc_init_array>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	4d0d      	ldr	r5, [pc, #52]	; (80040dc <__libc_init_array+0x38>)
 80040a8:	4c0d      	ldr	r4, [pc, #52]	; (80040e0 <__libc_init_array+0x3c>)
 80040aa:	1b64      	subs	r4, r4, r5
 80040ac:	10a4      	asrs	r4, r4, #2
 80040ae:	2600      	movs	r6, #0
 80040b0:	42a6      	cmp	r6, r4
 80040b2:	d109      	bne.n	80040c8 <__libc_init_array+0x24>
 80040b4:	4d0b      	ldr	r5, [pc, #44]	; (80040e4 <__libc_init_array+0x40>)
 80040b6:	4c0c      	ldr	r4, [pc, #48]	; (80040e8 <__libc_init_array+0x44>)
 80040b8:	f000 f820 	bl	80040fc <_init>
 80040bc:	1b64      	subs	r4, r4, r5
 80040be:	10a4      	asrs	r4, r4, #2
 80040c0:	2600      	movs	r6, #0
 80040c2:	42a6      	cmp	r6, r4
 80040c4:	d105      	bne.n	80040d2 <__libc_init_array+0x2e>
 80040c6:	bd70      	pop	{r4, r5, r6, pc}
 80040c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040cc:	4798      	blx	r3
 80040ce:	3601      	adds	r6, #1
 80040d0:	e7ee      	b.n	80040b0 <__libc_init_array+0xc>
 80040d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d6:	4798      	blx	r3
 80040d8:	3601      	adds	r6, #1
 80040da:	e7f2      	b.n	80040c2 <__libc_init_array+0x1e>
 80040dc:	080041fc 	.word	0x080041fc
 80040e0:	080041fc 	.word	0x080041fc
 80040e4:	080041fc 	.word	0x080041fc
 80040e8:	08004200 	.word	0x08004200

080040ec <memset>:
 80040ec:	4402      	add	r2, r0
 80040ee:	4603      	mov	r3, r0
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d100      	bne.n	80040f6 <memset+0xa>
 80040f4:	4770      	bx	lr
 80040f6:	f803 1b01 	strb.w	r1, [r3], #1
 80040fa:	e7f9      	b.n	80040f0 <memset+0x4>

080040fc <_init>:
 80040fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fe:	bf00      	nop
 8004100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004102:	bc08      	pop	{r3}
 8004104:	469e      	mov	lr, r3
 8004106:	4770      	bx	lr

08004108 <_fini>:
 8004108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410a:	bf00      	nop
 800410c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410e:	bc08      	pop	{r3}
 8004110:	469e      	mov	lr, r3
 8004112:	4770      	bx	lr
