
BRINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000265c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080027e4  080027e4  000127e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800281c  0800281c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800281c  0800281c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800281c  0800281c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800281c  0800281c  0001281c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002830  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002830  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008073  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000122c  00000000  00000000  000280f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000608  00000000  00000000  00029320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004a0  00000000  00000000  00029928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019cbe  00000000  00000000  00029dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008530  00000000  00000000  00043a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098172  00000000  00000000  0004bfb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001770  00000000  00000000  000e4128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000e5898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080027cc 	.word	0x080027cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080027cc 	.word	0x080027cc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9ca 	bl	8000564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81c 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f88c 	bl	80002f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f85a 	bl	8000290 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80001dc:	2201      	movs	r2, #1
 80001de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e2:	4809      	ldr	r0, [pc, #36]	; (8000208 <main+0x40>)
 80001e4:	f000 fca0 	bl	8000b28 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80001e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ec:	f000 fa20 	bl	8000630 <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80001f0:	2200      	movs	r2, #0
 80001f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <main+0x40>)
 80001f8:	f000 fc96 	bl	8000b28 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80001fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000200:	f000 fa16 	bl	8000630 <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000204:	e7ea      	b.n	80001dc <main+0x14>
 8000206:	bf00      	nop
 8000208:	48000400 	.word	0x48000400

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b090      	sub	sp, #64	; 0x40
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f002 faa9 	bl	8002772 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000236:	2310      	movs	r3, #16
 8000238:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800023e:	2300      	movs	r3, #0
 8000240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000242:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000246:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	f107 0318 	add.w	r3, r7, #24
 800024c:	4618      	mov	r0, r3
 800024e:	f000 fc83 	bl	8000b58 <HAL_RCC_OscConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000258:	f000 f8b2 	bl	80003c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
 800025e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000260:	2302      	movs	r3, #2
 8000262:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2102      	movs	r1, #2
 8000276:	4618      	mov	r0, r3
 8000278:	f001 fcac 	bl	8001bd4 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000282:	f000 f89d 	bl	80003c0 <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3740      	adds	r7, #64	; 0x40
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000294:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <MX_USART2_UART_Init+0x58>)
 8000296:	4a15      	ldr	r2, [pc, #84]	; (80002ec <MX_USART2_UART_Init+0x5c>)
 8000298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800029a:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <MX_USART2_UART_Init+0x58>)
 800029c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80002a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002a2:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <MX_USART2_UART_Init+0x58>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002a8:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <MX_USART2_UART_Init+0x58>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <MX_USART2_UART_Init+0x58>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <MX_USART2_UART_Init+0x58>)
 80002b6:	220c      	movs	r2, #12
 80002b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <MX_USART2_UART_Init+0x58>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <MX_USART2_UART_Init+0x58>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <MX_USART2_UART_Init+0x58>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_USART2_UART_Init+0x58>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002d2:	4805      	ldr	r0, [pc, #20]	; (80002e8 <MX_USART2_UART_Init+0x58>)
 80002d4:	f001 feb4 	bl	8002040 <HAL_UART_Init>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80002de:	f000 f86f 	bl	80003c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000028 	.word	0x20000028
 80002ec:	40004400 	.word	0x40004400

080002f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b08a      	sub	sp, #40	; 0x28
 80002f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000306:	4b2b      	ldr	r3, [pc, #172]	; (80003b4 <MX_GPIO_Init+0xc4>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a2a      	ldr	r2, [pc, #168]	; (80003b4 <MX_GPIO_Init+0xc4>)
 800030c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000310:	6153      	str	r3, [r2, #20]
 8000312:	4b28      	ldr	r3, [pc, #160]	; (80003b4 <MX_GPIO_Init+0xc4>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800031a:	613b      	str	r3, [r7, #16]
 800031c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800031e:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <MX_GPIO_Init+0xc4>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a24      	ldr	r2, [pc, #144]	; (80003b4 <MX_GPIO_Init+0xc4>)
 8000324:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000328:	6153      	str	r3, [r2, #20]
 800032a:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <MX_GPIO_Init+0xc4>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000336:	4b1f      	ldr	r3, [pc, #124]	; (80003b4 <MX_GPIO_Init+0xc4>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a1e      	ldr	r2, [pc, #120]	; (80003b4 <MX_GPIO_Init+0xc4>)
 800033c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b1c      	ldr	r3, [pc, #112]	; (80003b4 <MX_GPIO_Init+0xc4>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800034e:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <MX_GPIO_Init+0xc4>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a18      	ldr	r2, [pc, #96]	; (80003b4 <MX_GPIO_Init+0xc4>)
 8000354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000358:	6153      	str	r3, [r2, #20]
 800035a:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <MX_GPIO_Init+0xc4>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036c:	4812      	ldr	r0, [pc, #72]	; (80003b8 <MX_GPIO_Init+0xc8>)
 800036e:	f000 fbdb 	bl	8000b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000378:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800037c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	4619      	mov	r1, r3
 8000388:	480c      	ldr	r0, [pc, #48]	; (80003bc <MX_GPIO_Init+0xcc>)
 800038a:	f000 fa5b 	bl	8000844 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800038e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000394:	2301      	movs	r3, #1
 8000396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039c:	2300      	movs	r3, #0
 800039e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003a0:	f107 0314 	add.w	r3, r7, #20
 80003a4:	4619      	mov	r1, r3
 80003a6:	4804      	ldr	r0, [pc, #16]	; (80003b8 <MX_GPIO_Init+0xc8>)
 80003a8:	f000 fa4c 	bl	8000844 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ac:	bf00      	nop
 80003ae:	3728      	adds	r7, #40	; 0x28
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40021000 	.word	0x40021000
 80003b8:	48000400 	.word	0x48000400
 80003bc:	48000800 	.word	0x48000800

080003c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c4:	b672      	cpsid	i
}
 80003c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c8:	e7fe      	b.n	80003c8 <Error_Handler+0x8>
	...

080003cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <HAL_MspInit+0x44>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <HAL_MspInit+0x44>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <HAL_MspInit+0x44>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <HAL_MspInit+0x44>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	4a08      	ldr	r2, [pc, #32]	; (8000410 <HAL_MspInit+0x44>)
 80003f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f4:	61d3      	str	r3, [r2, #28]
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <HAL_MspInit+0x44>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fe:	603b      	str	r3, [r7, #0]
 8000400:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000402:	2007      	movs	r0, #7
 8000404:	f000 f9ea 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40021000 	.word	0x40021000

08000414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b08a      	sub	sp, #40	; 0x28
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041c:	f107 0314 	add.w	r3, r7, #20
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
 800042a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a17      	ldr	r2, [pc, #92]	; (8000490 <HAL_UART_MspInit+0x7c>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d128      	bne.n	8000488 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <HAL_UART_MspInit+0x80>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	4a16      	ldr	r2, [pc, #88]	; (8000494 <HAL_UART_MspInit+0x80>)
 800043c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000440:	61d3      	str	r3, [r2, #28]
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <HAL_UART_MspInit+0x80>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800044a:	613b      	str	r3, [r7, #16]
 800044c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <HAL_UART_MspInit+0x80>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a10      	ldr	r2, [pc, #64]	; (8000494 <HAL_UART_MspInit+0x80>)
 8000454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <HAL_UART_MspInit+0x80>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000466:	230c      	movs	r3, #12
 8000468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046a:	2302      	movs	r3, #2
 800046c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	2300      	movs	r3, #0
 8000470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000472:	2300      	movs	r3, #0
 8000474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000476:	2307      	movs	r3, #7
 8000478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	4619      	mov	r1, r3
 8000480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000484:	f000 f9de 	bl	8000844 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000488:	bf00      	nop
 800048a:	3728      	adds	r7, #40	; 0x28
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40004400 	.word	0x40004400
 8000494:	40021000 	.word	0x40021000

08000498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800049c:	e7fe      	b.n	800049c <NMI_Handler+0x4>

0800049e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <HardFault_Handler+0x4>

080004a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <MemManage_Handler+0x4>

080004aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ae:	e7fe      	b.n	80004ae <BusFault_Handler+0x4>

080004b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <UsageFault_Handler+0x4>

080004b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e4:	f000 f884 	bl	80005f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}

080004ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <SystemInit+0x20>)
 80004f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004f6:	4a05      	ldr	r2, [pc, #20]	; (800050c <SystemInit+0x20>)
 80004f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000ed00 	.word	0xe000ed00

08000510 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000548 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000514:	f7ff ffea 	bl	80004ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000518:	480c      	ldr	r0, [pc, #48]	; (800054c <LoopForever+0x6>)
  ldr r1, =_edata
 800051a:	490d      	ldr	r1, [pc, #52]	; (8000550 <LoopForever+0xa>)
  ldr r2, =_sidata
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <LoopForever+0xe>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000520:	e002      	b.n	8000528 <LoopCopyDataInit>

08000522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000526:	3304      	adds	r3, #4

08000528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800052c:	d3f9      	bcc.n	8000522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052e:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000530:	4c0a      	ldr	r4, [pc, #40]	; (800055c <LoopForever+0x16>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000534:	e001      	b.n	800053a <LoopFillZerobss>

08000536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000538:	3204      	adds	r2, #4

0800053a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800053c:	d3fb      	bcc.n	8000536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800053e:	f002 f921 	bl	8002784 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000542:	f7ff fe41 	bl	80001c8 <main>

08000546 <LoopForever>:

LoopForever:
    b LoopForever
 8000546:	e7fe      	b.n	8000546 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000548:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000554:	08002824 	.word	0x08002824
  ldr r2, =_sbss
 8000558:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800055c:	200000b4 	.word	0x200000b4

08000560 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <ADC1_IRQHandler>
	...

08000564 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <HAL_Init+0x28>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <HAL_Init+0x28>)
 800056e:	f043 0310 	orr.w	r3, r3, #16
 8000572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000574:	2003      	movs	r0, #3
 8000576:	f000 f931 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800057a:	2000      	movs	r0, #0
 800057c:	f000 f808 	bl	8000590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000580:	f7ff ff24 	bl	80003cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000584:	2300      	movs	r3, #0
}
 8000586:	4618      	mov	r0, r3
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40022000 	.word	0x40022000

08000590 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <HAL_InitTick+0x54>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <HAL_InitTick+0x58>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4619      	mov	r1, r3
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f93b 	bl	800082a <HAL_SYSTICK_Config>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	e00e      	b.n	80005dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b0f      	cmp	r3, #15
 80005c2:	d80a      	bhi.n	80005da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	2200      	movs	r2, #0
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f000 f911 	bl	80007f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <HAL_InitTick+0x5c>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005d6:	2300      	movs	r3, #0
 80005d8:	e000      	b.n	80005dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005da:	2301      	movs	r3, #1
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000008 	.word	0x20000008
 80005ec:	20000004 	.word	0x20000004

080005f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_IncTick+0x20>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_IncTick+0x24>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4413      	add	r3, r2
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <HAL_IncTick+0x24>)
 8000602:	6013      	str	r3, [r2, #0]
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000008 	.word	0x20000008
 8000614:	200000b0 	.word	0x200000b0

08000618 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return uwTick;  
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <HAL_GetTick+0x14>)
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	200000b0 	.word	0x200000b0

08000630 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000638:	f7ff ffee 	bl	8000618 <HAL_GetTick>
 800063c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000648:	d005      	beq.n	8000656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <HAL_Delay+0x44>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	4413      	add	r3, r2
 8000654:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000656:	bf00      	nop
 8000658:	f7ff ffde 	bl	8000618 <HAL_GetTick>
 800065c:	4602      	mov	r2, r0
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	d8f7      	bhi.n	8000658 <HAL_Delay+0x28>
  {
  }
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000008 	.word	0x20000008

08000678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006aa:	4a04      	ldr	r2, [pc, #16]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	60d3      	str	r3, [r2, #12]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <__NVIC_GetPriorityGrouping+0x18>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	f003 0307 	and.w	r3, r3, #7
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db0a      	blt.n	8000706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	490c      	ldr	r1, [pc, #48]	; (8000728 <__NVIC_SetPriority+0x4c>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	0112      	lsls	r2, r2, #4
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	440b      	add	r3, r1
 8000700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000704:	e00a      	b.n	800071c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4908      	ldr	r1, [pc, #32]	; (800072c <__NVIC_SetPriority+0x50>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	3b04      	subs	r3, #4
 8000714:	0112      	lsls	r2, r2, #4
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	440b      	add	r3, r1
 800071a:	761a      	strb	r2, [r3, #24]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000e100 	.word	0xe000e100
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	f1c3 0307 	rsb	r3, r3, #7
 800074a:	2b04      	cmp	r3, #4
 800074c:	bf28      	it	cs
 800074e:	2304      	movcs	r3, #4
 8000750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3304      	adds	r3, #4
 8000756:	2b06      	cmp	r3, #6
 8000758:	d902      	bls.n	8000760 <NVIC_EncodePriority+0x30>
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3b03      	subs	r3, #3
 800075e:	e000      	b.n	8000762 <NVIC_EncodePriority+0x32>
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	f04f 32ff 	mov.w	r2, #4294967295
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43da      	mvns	r2, r3
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	401a      	ands	r2, r3
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000778:	f04f 31ff 	mov.w	r1, #4294967295
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	43d9      	mvns	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	4313      	orrs	r3, r2
         );
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a8:	d301      	bcc.n	80007ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00f      	b.n	80007ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <SysTick_Config+0x40>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b6:	210f      	movs	r1, #15
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295
 80007bc:	f7ff ff8e 	bl	80006dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <SysTick_Config+0x40>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <SysTick_Config+0x40>)
 80007c8:	2207      	movs	r2, #7
 80007ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	e000e010 	.word	0xe000e010

080007dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ff47 	bl	8000678 <__NVIC_SetPriorityGrouping>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000804:	f7ff ff5c 	bl	80006c0 <__NVIC_GetPriorityGrouping>
 8000808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff ff8e 	bl	8000730 <NVIC_EncodePriority>
 8000814:	4602      	mov	r2, r0
 8000816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff5d 	bl	80006dc <__NVIC_SetPriority>
}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ffb0 	bl	8000798 <SysTick_Config>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000844:	b480      	push	{r7}
 8000846:	b087      	sub	sp, #28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000852:	e14e      	b.n	8000af2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	2101      	movs	r1, #1
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	fa01 f303 	lsl.w	r3, r1, r3
 8000860:	4013      	ands	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b00      	cmp	r3, #0
 8000868:	f000 8140 	beq.w	8000aec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	2b01      	cmp	r3, #1
 8000876:	d005      	beq.n	8000884 <HAL_GPIO_Init+0x40>
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f003 0303 	and.w	r3, r3, #3
 8000880:	2b02      	cmp	r3, #2
 8000882:	d130      	bne.n	80008e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2203      	movs	r2, #3
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	4013      	ands	r3, r2
 800089a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	68da      	ldr	r2, [r3, #12]
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008ba:	2201      	movs	r2, #1
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43db      	mvns	r3, r3
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	4013      	ands	r3, r2
 80008c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	091b      	lsrs	r3, r3, #4
 80008d0:	f003 0201 	and.w	r2, r3, #1
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4313      	orrs	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f003 0303 	and.w	r3, r3, #3
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d017      	beq.n	8000922 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	2203      	movs	r2, #3
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43db      	mvns	r3, r3
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4013      	ands	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4313      	orrs	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f003 0303 	and.w	r3, r3, #3
 800092a:	2b02      	cmp	r3, #2
 800092c:	d123      	bne.n	8000976 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	08da      	lsrs	r2, r3, #3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3208      	adds	r2, #8
 8000936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	220f      	movs	r2, #15
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	4013      	ands	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	691a      	ldr	r2, [r3, #16]
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	f003 0307 	and.w	r3, r3, #7
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4313      	orrs	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	08da      	lsrs	r2, r3, #3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3208      	adds	r2, #8
 8000970:	6939      	ldr	r1, [r7, #16]
 8000972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	2203      	movs	r2, #3
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	4013      	ands	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f003 0203 	and.w	r2, r3, #3
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 809a 	beq.w	8000aec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b8:	4b55      	ldr	r3, [pc, #340]	; (8000b10 <HAL_GPIO_Init+0x2cc>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a54      	ldr	r2, [pc, #336]	; (8000b10 <HAL_GPIO_Init+0x2cc>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b52      	ldr	r3, [pc, #328]	; (8000b10 <HAL_GPIO_Init+0x2cc>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009d0:	4a50      	ldr	r2, [pc, #320]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	089b      	lsrs	r3, r3, #2
 80009d6:	3302      	adds	r3, #2
 80009d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	220f      	movs	r2, #15
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009fa:	d013      	beq.n	8000a24 <HAL_GPIO_Init+0x1e0>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a46      	ldr	r2, [pc, #280]	; (8000b18 <HAL_GPIO_Init+0x2d4>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d00d      	beq.n	8000a20 <HAL_GPIO_Init+0x1dc>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a45      	ldr	r2, [pc, #276]	; (8000b1c <HAL_GPIO_Init+0x2d8>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d007      	beq.n	8000a1c <HAL_GPIO_Init+0x1d8>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a44      	ldr	r2, [pc, #272]	; (8000b20 <HAL_GPIO_Init+0x2dc>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d101      	bne.n	8000a18 <HAL_GPIO_Init+0x1d4>
 8000a14:	2303      	movs	r3, #3
 8000a16:	e006      	b.n	8000a26 <HAL_GPIO_Init+0x1e2>
 8000a18:	2305      	movs	r3, #5
 8000a1a:	e004      	b.n	8000a26 <HAL_GPIO_Init+0x1e2>
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	e002      	b.n	8000a26 <HAL_GPIO_Init+0x1e2>
 8000a20:	2301      	movs	r3, #1
 8000a22:	e000      	b.n	8000a26 <HAL_GPIO_Init+0x1e2>
 8000a24:	2300      	movs	r3, #0
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	f002 0203 	and.w	r2, r2, #3
 8000a2c:	0092      	lsls	r2, r2, #2
 8000a2e:	4093      	lsls	r3, r2
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a36:	4937      	ldr	r1, [pc, #220]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a44:	4b37      	ldr	r3, [pc, #220]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d003      	beq.n	8000a68 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a68:	4a2e      	ldr	r2, [pc, #184]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	43db      	mvns	r3, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d003      	beq.n	8000a92 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a92:	4a24      	ldr	r2, [pc, #144]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000abc:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	3301      	adds	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	fa22 f303 	lsr.w	r3, r2, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	f47f aea9 	bne.w	8000854 <HAL_GPIO_Init+0x10>
  }
}
 8000b02:	bf00      	nop
 8000b04:	bf00      	nop
 8000b06:	371c      	adds	r7, #28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010000 	.word	0x40010000
 8000b18:	48000400 	.word	0x48000400
 8000b1c:	48000800 	.word	0x48000800
 8000b20:	48000c00 	.word	0x48000c00
 8000b24:	40010400 	.word	0x40010400

08000b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]
 8000b34:	4613      	mov	r3, r2
 8000b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b38:	787b      	ldrb	r3, [r7, #1]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b3e:	887a      	ldrh	r2, [r7, #2]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b44:	e002      	b.n	8000b4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b68:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f001 b823 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 817d 	beq.w	8000e8e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b94:	4bbc      	ldr	r3, [pc, #752]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 030c 	and.w	r3, r3, #12
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d00c      	beq.n	8000bba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ba0:	4bb9      	ldr	r3, [pc, #740]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 030c 	and.w	r3, r3, #12
 8000ba8:	2b08      	cmp	r3, #8
 8000baa:	d15c      	bne.n	8000c66 <HAL_RCC_OscConfig+0x10e>
 8000bac:	4bb6      	ldr	r3, [pc, #728]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb8:	d155      	bne.n	8000c66 <HAL_RCC_OscConfig+0x10e>
 8000bba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bbe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000bc6:	fa93 f3a3 	rbit	r3, r3
 8000bca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000bce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd2:	fab3 f383 	clz	r3, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	095b      	lsrs	r3, r3, #5
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d102      	bne.n	8000bec <HAL_RCC_OscConfig+0x94>
 8000be6:	4ba8      	ldr	r3, [pc, #672]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	e015      	b.n	8000c18 <HAL_RCC_OscConfig+0xc0>
 8000bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bf0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000bf8:	fa93 f3a3 	rbit	r3, r3
 8000bfc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c04:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c08:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000c0c:	fa93 f3a3 	rbit	r3, r3
 8000c10:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000c14:	4b9c      	ldr	r3, [pc, #624]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c1c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000c20:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c24:	fa92 f2a2 	rbit	r2, r2
 8000c28:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000c2c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	f042 0220 	orr.w	r2, r2, #32
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	f002 021f 	and.w	r2, r2, #31
 8000c40:	2101      	movs	r1, #1
 8000c42:	fa01 f202 	lsl.w	r2, r1, r2
 8000c46:	4013      	ands	r3, r2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f000 811f 	beq.w	8000e8c <HAL_RCC_OscConfig+0x334>
 8000c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 8116 	bne.w	8000e8c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	f000 bfaf 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c76:	d106      	bne.n	8000c86 <HAL_RCC_OscConfig+0x12e>
 8000c78:	4b83      	ldr	r3, [pc, #524]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a82      	ldr	r2, [pc, #520]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	e036      	b.n	8000cf4 <HAL_RCC_OscConfig+0x19c>
 8000c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d10c      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x158>
 8000c96:	4b7c      	ldr	r3, [pc, #496]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a7b      	ldr	r2, [pc, #492]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	4b79      	ldr	r3, [pc, #484]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a78      	ldr	r2, [pc, #480]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	e021      	b.n	8000cf4 <HAL_RCC_OscConfig+0x19c>
 8000cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cc0:	d10c      	bne.n	8000cdc <HAL_RCC_OscConfig+0x184>
 8000cc2:	4b71      	ldr	r3, [pc, #452]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a70      	ldr	r2, [pc, #448]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	4b6e      	ldr	r3, [pc, #440]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a6d      	ldr	r2, [pc, #436]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	e00b      	b.n	8000cf4 <HAL_RCC_OscConfig+0x19c>
 8000cdc:	4b6a      	ldr	r3, [pc, #424]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a69      	ldr	r2, [pc, #420]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	4b67      	ldr	r3, [pc, #412]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a66      	ldr	r2, [pc, #408]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cf4:	4b64      	ldr	r3, [pc, #400]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf8:	f023 020f 	bic.w	r2, r3, #15
 8000cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	495f      	ldr	r1, [pc, #380]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d059      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1e:	f7ff fc7b 	bl	8000618 <HAL_GetTick>
 8000d22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d26:	e00a      	b.n	8000d3e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d28:	f7ff fc76 	bl	8000618 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b64      	cmp	r3, #100	; 0x64
 8000d36:	d902      	bls.n	8000d3e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	f000 bf43 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>
 8000d3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d42:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d46:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000d4a:	fa93 f3a3 	rbit	r3, r3
 8000d4e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000d52:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d56:	fab3 f383 	clz	r3, r3
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	095b      	lsrs	r3, r3, #5
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d102      	bne.n	8000d70 <HAL_RCC_OscConfig+0x218>
 8000d6a:	4b47      	ldr	r3, [pc, #284]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	e015      	b.n	8000d9c <HAL_RCC_OscConfig+0x244>
 8000d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d74:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d78:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000d7c:	fa93 f3a3 	rbit	r3, r3
 8000d80:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d88:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d8c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000d90:	fa93 f3a3 	rbit	r3, r3
 8000d94:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000d98:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000da0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000da4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000da8:	fa92 f2a2 	rbit	r2, r2
 8000dac:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000db0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	f042 0220 	orr.w	r2, r2, #32
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	f002 021f 	and.w	r2, r2, #31
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0ab      	beq.n	8000d28 <HAL_RCC_OscConfig+0x1d0>
 8000dd0:	e05d      	b.n	8000e8e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd2:	f7ff fc21 	bl	8000618 <HAL_GetTick>
 8000dd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dda:	e00a      	b.n	8000df2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ddc:	f7ff fc1c 	bl	8000618 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b64      	cmp	r3, #100	; 0x64
 8000dea:	d902      	bls.n	8000df2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	f000 bee9 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>
 8000df2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000dfe:	fa93 f3a3 	rbit	r3, r3
 8000e02:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000e06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e0a:	fab3 f383 	clz	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	095b      	lsrs	r3, r3, #5
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d102      	bne.n	8000e24 <HAL_RCC_OscConfig+0x2cc>
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	e015      	b.n	8000e50 <HAL_RCC_OscConfig+0x2f8>
 8000e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e28:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000e30:	fa93 f3a3 	rbit	r3, r3
 8000e34:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e3c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e40:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000e44:	fa93 f3a3 	rbit	r3, r3
 8000e48:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e54:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000e58:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e5c:	fa92 f2a2 	rbit	r2, r2
 8000e60:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000e64:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000e68:	fab2 f282 	clz	r2, r2
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	f042 0220 	orr.w	r2, r2, #32
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	f002 021f 	and.w	r2, r2, #31
 8000e78:	2101      	movs	r1, #1
 8000e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1ab      	bne.n	8000ddc <HAL_RCC_OscConfig+0x284>
 8000e84:	e003      	b.n	8000e8e <HAL_RCC_OscConfig+0x336>
 8000e86:	bf00      	nop
 8000e88:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 817d 	beq.w	800119e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ea4:	4ba6      	ldr	r3, [pc, #664]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 030c 	and.w	r3, r3, #12
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00b      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eb0:	4ba3      	ldr	r3, [pc, #652]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 030c 	and.w	r3, r3, #12
 8000eb8:	2b08      	cmp	r3, #8
 8000eba:	d172      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x44a>
 8000ebc:	4ba0      	ldr	r3, [pc, #640]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d16c      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x44a>
 8000ec8:	2302      	movs	r3, #2
 8000eca:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ece:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000ed2:	fa93 f3a3 	rbit	r3, r3
 8000ed6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000eda:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ede:	fab3 f383 	clz	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	095b      	lsrs	r3, r3, #5
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d102      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x3a0>
 8000ef2:	4b93      	ldr	r3, [pc, #588]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	e013      	b.n	8000f20 <HAL_RCC_OscConfig+0x3c8>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f02:	fa93 f3a3 	rbit	r3, r3
 8000f06:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000f14:	fa93 f3a3 	rbit	r3, r3
 8000f18:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000f1c:	4b88      	ldr	r3, [pc, #544]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f20:	2202      	movs	r2, #2
 8000f22:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000f26:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f2a:	fa92 f2a2 	rbit	r2, r2
 8000f2e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000f32:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000f36:	fab2 f282 	clz	r2, r2
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	f042 0220 	orr.w	r2, r2, #32
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	f002 021f 	and.w	r2, r2, #31
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00a      	beq.n	8000f68 <HAL_RCC_OscConfig+0x410>
 8000f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d002      	beq.n	8000f68 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	f000 be2e 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f68:	4b75      	ldr	r3, [pc, #468]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	21f8      	movs	r1, #248	; 0xf8
 8000f7e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f82:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f86:	fa91 f1a1 	rbit	r1, r1
 8000f8a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000f8e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000f92:	fab1 f181 	clz	r1, r1
 8000f96:	b2c9      	uxtb	r1, r1
 8000f98:	408b      	lsls	r3, r1
 8000f9a:	4969      	ldr	r1, [pc, #420]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa0:	e0fd      	b.n	800119e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 8088 	beq.w	80010c4 <HAL_RCC_OscConfig+0x56c>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000fc6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fca:	fab3 f383 	clz	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	461a      	mov	r2, r3
 8000fdc:	2301      	movs	r3, #1
 8000fde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fb1a 	bl	8000618 <HAL_GetTick>
 8000fe4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe8:	e00a      	b.n	8001000 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fea:	f7ff fb15 	bl	8000618 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d902      	bls.n	8001000 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	f000 bde2 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>
 8001000:	2302      	movs	r3, #2
 8001002:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001006:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800100a:	fa93 f3a3 	rbit	r3, r3
 800100e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001012:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001016:	fab3 f383 	clz	r3, r3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	095b      	lsrs	r3, r3, #5
 800101e:	b2db      	uxtb	r3, r3
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d102      	bne.n	8001030 <HAL_RCC_OscConfig+0x4d8>
 800102a:	4b45      	ldr	r3, [pc, #276]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	e013      	b.n	8001058 <HAL_RCC_OscConfig+0x500>
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001036:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001048:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800104c:	fa93 f3a3 	rbit	r3, r3
 8001050:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001054:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	2202      	movs	r2, #2
 800105a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800105e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001062:	fa92 f2a2 	rbit	r2, r2
 8001066:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800106a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800106e:	fab2 f282 	clz	r2, r2
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	f042 0220 	orr.w	r2, r2, #32
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	f002 021f 	and.w	r2, r2, #31
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	4013      	ands	r3, r2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0af      	beq.n	8000fea <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108a:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001096:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	21f8      	movs	r1, #248	; 0xf8
 80010a0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80010a8:	fa91 f1a1 	rbit	r1, r1
 80010ac:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80010b0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80010b4:	fab1 f181 	clz	r1, r1
 80010b8:	b2c9      	uxtb	r1, r1
 80010ba:	408b      	lsls	r3, r1
 80010bc:	4920      	ldr	r1, [pc, #128]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	600b      	str	r3, [r1, #0]
 80010c2:	e06c      	b.n	800119e <HAL_RCC_OscConfig+0x646>
 80010c4:	2301      	movs	r3, #1
 80010c6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80010ce:	fa93 f3a3 	rbit	r3, r3
 80010d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80010d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010da:	fab3 f383 	clz	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	461a      	mov	r2, r3
 80010ec:	2300      	movs	r3, #0
 80010ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fa92 	bl	8000618 <HAL_GetTick>
 80010f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010fa:	f7ff fa8d 	bl	8000618 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d902      	bls.n	8001110 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	f000 bd5a 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>
 8001110:	2302      	movs	r3, #2
 8001112:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001116:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800111a:	fa93 f3a3 	rbit	r3, r3
 800111e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001126:	fab3 f383 	clz	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	095b      	lsrs	r3, r3, #5
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d104      	bne.n	8001144 <HAL_RCC_OscConfig+0x5ec>
 800113a:	4b01      	ldr	r3, [pc, #4]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	e015      	b.n	800116c <HAL_RCC_OscConfig+0x614>
 8001140:	40021000 	.word	0x40021000
 8001144:	2302      	movs	r3, #2
 8001146:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800114e:	fa93 f3a3 	rbit	r3, r3
 8001152:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800115c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001160:	fa93 f3a3 	rbit	r3, r3
 8001164:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001168:	4bc8      	ldr	r3, [pc, #800]	; (800148c <HAL_RCC_OscConfig+0x934>)
 800116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116c:	2202      	movs	r2, #2
 800116e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001172:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001176:	fa92 f2a2 	rbit	r2, r2
 800117a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800117e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001182:	fab2 f282 	clz	r2, r2
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	f042 0220 	orr.w	r2, r2, #32
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	f002 021f 	and.w	r2, r2, #31
 8001192:	2101      	movs	r1, #1
 8001194:	fa01 f202 	lsl.w	r2, r1, r2
 8001198:	4013      	ands	r3, r2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1ad      	bne.n	80010fa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8110 	beq.w	80013d4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d079      	beq.n	80012b8 <HAL_RCC_OscConfig+0x760>
 80011c4:	2301      	movs	r3, #1
 80011c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011ce:	fa93 f3a3 	rbit	r3, r3
 80011d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80011d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011da:	fab3 f383 	clz	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	461a      	mov	r2, r3
 80011e2:	4bab      	ldr	r3, [pc, #684]	; (8001490 <HAL_RCC_OscConfig+0x938>)
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	461a      	mov	r2, r3
 80011ea:	2301      	movs	r3, #1
 80011ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fa13 	bl	8000618 <HAL_GetTick>
 80011f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f6:	e00a      	b.n	800120e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f8:	f7ff fa0e 	bl	8000618 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d902      	bls.n	800120e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	f000 bcdb 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001214:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001218:	fa93 f3a3 	rbit	r3, r3
 800121c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001224:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001228:	2202      	movs	r2, #2
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001230:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	fa93 f2a3 	rbit	r2, r3
 800123a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800123e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800124c:	2202      	movs	r2, #2
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	fa93 f2a3 	rbit	r2, r3
 800125e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001262:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001266:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001268:	4b88      	ldr	r3, [pc, #544]	; (800148c <HAL_RCC_OscConfig+0x934>)
 800126a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800126c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001270:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001274:	2102      	movs	r1, #2
 8001276:	6019      	str	r1, [r3, #0]
 8001278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800127c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	fa93 f1a3 	rbit	r1, r3
 8001286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800128a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800128e:	6019      	str	r1, [r3, #0]
  return result;
 8001290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001294:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	fab3 f383 	clz	r3, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f003 031f 	and.w	r3, r3, #31
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f303 	lsl.w	r3, r1, r3
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0a0      	beq.n	80011f8 <HAL_RCC_OscConfig+0x6a0>
 80012b6:	e08d      	b.n	80013d4 <HAL_RCC_OscConfig+0x87c>
 80012b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	fa93 f2a3 	rbit	r2, r3
 80012d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80012da:	601a      	str	r2, [r3, #0]
  return result;
 80012dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80012e4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e6:	fab3 f383 	clz	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b68      	ldr	r3, [pc, #416]	; (8001490 <HAL_RCC_OscConfig+0x938>)
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	461a      	mov	r2, r3
 80012f6:	2300      	movs	r3, #0
 80012f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fa:	f7ff f98d 	bl	8000618 <HAL_GetTick>
 80012fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001302:	e00a      	b.n	800131a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001304:	f7ff f988 	bl	8000618 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d902      	bls.n	800131a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	f000 bc55 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>
 800131a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001322:	2202      	movs	r2, #2
 8001324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800132a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	fa93 f2a3 	rbit	r2, r3
 8001334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001338:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001342:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001346:	2202      	movs	r2, #2
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800134e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	fa93 f2a3 	rbit	r2, r3
 8001358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800135c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800136a:	2202      	movs	r2, #2
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	fa93 f2a3 	rbit	r2, r3
 800137c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001380:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001384:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001386:	4b41      	ldr	r3, [pc, #260]	; (800148c <HAL_RCC_OscConfig+0x934>)
 8001388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800138a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800138e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001392:	2102      	movs	r1, #2
 8001394:	6019      	str	r1, [r3, #0]
 8001396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800139a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	fa93 f1a3 	rbit	r1, r3
 80013a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80013ac:	6019      	str	r1, [r3, #0]
  return result;
 80013ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	fab3 f383 	clz	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	2101      	movs	r1, #1
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d197      	bne.n	8001304 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 81a1 	beq.w	800172c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f0:	4b26      	ldr	r3, [pc, #152]	; (800148c <HAL_RCC_OscConfig+0x934>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d116      	bne.n	800142a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fc:	4b23      	ldr	r3, [pc, #140]	; (800148c <HAL_RCC_OscConfig+0x934>)
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	4a22      	ldr	r2, [pc, #136]	; (800148c <HAL_RCC_OscConfig+0x934>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001406:	61d3      	str	r3, [r2, #28]
 8001408:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_RCC_OscConfig+0x934>)
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001414:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001422:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001424:	2301      	movs	r3, #1
 8001426:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <HAL_RCC_OscConfig+0x93c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001432:	2b00      	cmp	r3, #0
 8001434:	d11a      	bne.n	800146c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_RCC_OscConfig+0x93c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a16      	ldr	r2, [pc, #88]	; (8001494 <HAL_RCC_OscConfig+0x93c>)
 800143c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001440:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001442:	f7ff f8e9 	bl	8000618 <HAL_GetTick>
 8001446:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144a:	e009      	b.n	8001460 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144c:	f7ff f8e4 	bl	8000618 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b64      	cmp	r3, #100	; 0x64
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e3b1      	b.n	8001bc4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_RCC_OscConfig+0x93c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0ef      	beq.n	800144c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001470:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d10d      	bne.n	8001498 <HAL_RCC_OscConfig+0x940>
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <HAL_RCC_OscConfig+0x934>)
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	4a02      	ldr	r2, [pc, #8]	; (800148c <HAL_RCC_OscConfig+0x934>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6213      	str	r3, [r2, #32]
 8001488:	e03c      	b.n	8001504 <HAL_RCC_OscConfig+0x9ac>
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	10908120 	.word	0x10908120
 8001494:	40007000 	.word	0x40007000
 8001498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10c      	bne.n	80014c2 <HAL_RCC_OscConfig+0x96a>
 80014a8:	4bc1      	ldr	r3, [pc, #772]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4ac0      	ldr	r2, [pc, #768]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014ae:	f023 0301 	bic.w	r3, r3, #1
 80014b2:	6213      	str	r3, [r2, #32]
 80014b4:	4bbe      	ldr	r3, [pc, #760]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4abd      	ldr	r2, [pc, #756]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014ba:	f023 0304 	bic.w	r3, r3, #4
 80014be:	6213      	str	r3, [r2, #32]
 80014c0:	e020      	b.n	8001504 <HAL_RCC_OscConfig+0x9ac>
 80014c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x994>
 80014d2:	4bb7      	ldr	r3, [pc, #732]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	4ab6      	ldr	r2, [pc, #728]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6213      	str	r3, [r2, #32]
 80014de:	4bb4      	ldr	r3, [pc, #720]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4ab3      	ldr	r2, [pc, #716]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6213      	str	r3, [r2, #32]
 80014ea:	e00b      	b.n	8001504 <HAL_RCC_OscConfig+0x9ac>
 80014ec:	4bb0      	ldr	r3, [pc, #704]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4aaf      	ldr	r2, [pc, #700]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	6213      	str	r3, [r2, #32]
 80014f8:	4bad      	ldr	r3, [pc, #692]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4aac      	ldr	r2, [pc, #688]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014fe:	f023 0304 	bic.w	r3, r3, #4
 8001502:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001508:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 8081 	beq.w	8001618 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff f87f 	bl	8000618 <HAL_GetTick>
 800151a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151e:	e00b      	b.n	8001538 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001520:	f7ff f87a 	bl	8000618 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001530:	4293      	cmp	r3, r2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e345      	b.n	8001bc4 <HAL_RCC_OscConfig+0x106c>
 8001538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001540:	2202      	movs	r2, #2
 8001542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001548:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fa93 f2a3 	rbit	r2, r3
 8001552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001556:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001560:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001564:	2202      	movs	r2, #2
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	fa93 f2a3 	rbit	r2, r3
 8001576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800157e:	601a      	str	r2, [r3, #0]
  return result;
 8001580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001584:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001588:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158a:	fab3 f383 	clz	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	095b      	lsrs	r3, r3, #5
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d102      	bne.n	80015a4 <HAL_RCC_OscConfig+0xa4c>
 800159e:	4b84      	ldr	r3, [pc, #528]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	e013      	b.n	80015cc <HAL_RCC_OscConfig+0xa74>
 80015a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80015ac:	2202      	movs	r2, #2
 80015ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	fa93 f2a3 	rbit	r2, r3
 80015be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	4b79      	ldr	r3, [pc, #484]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015d0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80015d4:	2102      	movs	r1, #2
 80015d6:	6011      	str	r1, [r2, #0]
 80015d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	fa92 f1a2 	rbit	r1, r2
 80015e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015ea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80015ee:	6011      	str	r1, [r2, #0]
  return result;
 80015f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015f4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	fab2 f282 	clz	r2, r2
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	f002 021f 	and.w	r2, r2, #31
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d084      	beq.n	8001520 <HAL_RCC_OscConfig+0x9c8>
 8001616:	e07f      	b.n	8001718 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7fe fffe 	bl	8000618 <HAL_GetTick>
 800161c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001620:	e00b      	b.n	800163a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f7fe fff9 	bl	8000618 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e2c4      	b.n	8001bc4 <HAL_RCC_OscConfig+0x106c>
 800163a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001642:	2202      	movs	r2, #2
 8001644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	fa93 f2a3 	rbit	r2, r3
 8001654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001658:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001662:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001666:	2202      	movs	r2, #2
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	fa93 f2a3 	rbit	r2, r3
 8001678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001680:	601a      	str	r2, [r3, #0]
  return result;
 8001682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001686:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800168a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168c:	fab3 f383 	clz	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f043 0302 	orr.w	r3, r3, #2
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d102      	bne.n	80016a6 <HAL_RCC_OscConfig+0xb4e>
 80016a0:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	e013      	b.n	80016ce <HAL_RCC_OscConfig+0xb76>
 80016a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80016ae:	2202      	movs	r2, #2
 80016b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	fa93 f2a3 	rbit	r2, r3
 80016c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016d2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80016d6:	2102      	movs	r1, #2
 80016d8:	6011      	str	r1, [r2, #0]
 80016da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	fa92 f1a2 	rbit	r1, r2
 80016e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016ec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80016f0:	6011      	str	r1, [r2, #0]
  return result;
 80016f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016f6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	fab2 f282 	clz	r2, r2
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	f002 021f 	and.w	r2, r2, #31
 800170c:	2101      	movs	r1, #1
 800170e:	fa01 f202 	lsl.w	r2, r1, r2
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d184      	bne.n	8001622 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001718:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	4a22      	ldr	r2, [pc, #136]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 8001726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800172c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001730:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 8242 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b08      	cmp	r3, #8
 8001748:	f000 8213 	beq.w	8001b72 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001750:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	2b02      	cmp	r3, #2
 800175a:	f040 8162 	bne.w	8001a22 <HAL_RCC_OscConfig+0xeca>
 800175e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001762:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001766:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800176a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001770:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	fa93 f2a3 	rbit	r2, r3
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001782:	601a      	str	r2, [r3, #0]
  return result;
 8001784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001788:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800178c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001798:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	461a      	mov	r2, r3
 80017a0:	2300      	movs	r3, #0
 80017a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7fe ff38 	bl	8000618 <HAL_GetTick>
 80017a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ac:	e00c      	b.n	80017c8 <HAL_RCC_OscConfig+0xc70>
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b4:	f7fe ff30 	bl	8000618 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e1fd      	b.n	8001bc4 <HAL_RCC_OscConfig+0x106c>
 80017c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017cc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80017d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017da:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fa93 f2a3 	rbit	r2, r3
 80017e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017ec:	601a      	str	r2, [r3, #0]
  return result;
 80017ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f8:	fab3 f383 	clz	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b01      	cmp	r3, #1
 800180a:	d102      	bne.n	8001812 <HAL_RCC_OscConfig+0xcba>
 800180c:	4bb0      	ldr	r3, [pc, #704]	; (8001ad0 <HAL_RCC_OscConfig+0xf78>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	e027      	b.n	8001862 <HAL_RCC_OscConfig+0xd0a>
 8001812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001816:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800181a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800181e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001824:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	fa93 f2a3 	rbit	r2, r3
 800182e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001832:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001840:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	fa93 f2a3 	rbit	r2, r3
 8001854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001858:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	4b9c      	ldr	r3, [pc, #624]	; (8001ad0 <HAL_RCC_OscConfig+0xf78>)
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001866:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800186a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800186e:	6011      	str	r1, [r2, #0]
 8001870:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001874:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	fa92 f1a2 	rbit	r1, r2
 800187e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001882:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001886:	6011      	str	r1, [r2, #0]
  return result;
 8001888:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800188c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	fab2 f282 	clz	r2, r2
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	f042 0220 	orr.w	r2, r2, #32
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	f002 021f 	and.w	r2, r2, #31
 80018a2:	2101      	movs	r1, #1
 80018a4:	fa01 f202 	lsl.w	r2, r1, r2
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d182      	bne.n	80017b4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ae:	4b88      	ldr	r3, [pc, #544]	; (8001ad0 <HAL_RCC_OscConfig+0xf78>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80018c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	430b      	orrs	r3, r1
 80018d0:	497f      	ldr	r1, [pc, #508]	; (8001ad0 <HAL_RCC_OscConfig+0xf78>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	604b      	str	r3, [r1, #4]
 80018d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018da:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80018de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	fa93 f2a3 	rbit	r2, r3
 80018f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80018fa:	601a      	str	r2, [r3, #0]
  return result;
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001904:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001906:	fab3 f383 	clz	r3, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001910:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	461a      	mov	r2, r3
 8001918:	2301      	movs	r3, #1
 800191a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7fe fe7c 	bl	8000618 <HAL_GetTick>
 8001920:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001924:	e009      	b.n	800193a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001926:	f7fe fe77 	bl	8000618 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e144      	b.n	8001bc4 <HAL_RCC_OscConfig+0x106c>
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001942:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	fa93 f2a3 	rbit	r2, r3
 8001956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800195e:	601a      	str	r2, [r3, #0]
  return result;
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001968:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800196a:	fab3 f383 	clz	r3, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	095b      	lsrs	r3, r3, #5
 8001972:	b2db      	uxtb	r3, r3
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d102      	bne.n	8001984 <HAL_RCC_OscConfig+0xe2c>
 800197e:	4b54      	ldr	r3, [pc, #336]	; (8001ad0 <HAL_RCC_OscConfig+0xf78>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	e027      	b.n	80019d4 <HAL_RCC_OscConfig+0xe7c>
 8001984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001988:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800198c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fa93 f2a3 	rbit	r2, r3
 80019a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ae:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80019b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019bc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	fa93 f2a3 	rbit	r2, r3
 80019c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ca:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	4b3f      	ldr	r3, [pc, #252]	; (8001ad0 <HAL_RCC_OscConfig+0xf78>)
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019d8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80019dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019e0:	6011      	str	r1, [r2, #0]
 80019e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019e6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	fa92 f1a2 	rbit	r1, r2
 80019f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019f4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80019f8:	6011      	str	r1, [r2, #0]
  return result;
 80019fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019fe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	fab2 f282 	clz	r2, r2
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	f042 0220 	orr.w	r2, r2, #32
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	f002 021f 	and.w	r2, r2, #31
 8001a14:	2101      	movs	r1, #1
 8001a16:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d082      	beq.n	8001926 <HAL_RCC_OscConfig+0xdce>
 8001a20:	e0cf      	b.n	8001bc2 <HAL_RCC_OscConfig+0x106a>
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001a2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a34:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	fa93 f2a3 	rbit	r2, r3
 8001a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a42:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001a46:	601a      	str	r2, [r3, #0]
  return result;
 8001a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001a50:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	fab3 f383 	clz	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	461a      	mov	r2, r3
 8001a64:	2300      	movs	r3, #0
 8001a66:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7fe fdd6 	bl	8000618 <HAL_GetTick>
 8001a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a70:	e009      	b.n	8001a86 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a72:	f7fe fdd1 	bl	8000618 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e09e      	b.n	8001bc4 <HAL_RCC_OscConfig+0x106c>
 8001a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001a8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a98:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	fa93 f2a3 	rbit	r2, r3
 8001aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001aaa:	601a      	str	r2, [r3, #0]
  return result;
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ab4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	095b      	lsrs	r3, r3, #5
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d104      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xf7c>
 8001aca:	4b01      	ldr	r3, [pc, #4]	; (8001ad0 <HAL_RCC_OscConfig+0xf78>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	e029      	b.n	8001b24 <HAL_RCC_OscConfig+0xfcc>
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001adc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	fa93 f2a3 	rbit	r2, r3
 8001af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	fa93 f2a3 	rbit	r2, r3
 8001b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <HAL_RCC_OscConfig+0x1078>)
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b28:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001b2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b30:	6011      	str	r1, [r2, #0]
 8001b32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b36:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	fa92 f1a2 	rbit	r1, r2
 8001b40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b44:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001b48:	6011      	str	r1, [r2, #0]
  return result;
 8001b4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b4e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	fab2 f282 	clz	r2, r2
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	f042 0220 	orr.w	r2, r2, #32
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	f002 021f 	and.w	r2, r2, #31
 8001b64:	2101      	movs	r1, #1
 8001b66:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d180      	bne.n	8001a72 <HAL_RCC_OscConfig+0xf1a>
 8001b70:	e027      	b.n	8001bc2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e01e      	b.n	8001bc4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_RCC_OscConfig+0x1078>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b92:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d10b      	bne.n	8001bbe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ba6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001baa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b09e      	sub	sp, #120	; 0x78
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e162      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bec:	4b90      	ldr	r3, [pc, #576]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d910      	bls.n	8001c1c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b8d      	ldr	r3, [pc, #564]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 0207 	bic.w	r2, r3, #7
 8001c02:	498b      	ldr	r1, [pc, #556]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b89      	ldr	r3, [pc, #548]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e14a      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c28:	4b82      	ldr	r3, [pc, #520]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	497f      	ldr	r1, [pc, #508]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 80dc 	beq.w	8001e00 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d13c      	bne.n	8001cca <HAL_RCC_ClockConfig+0xf6>
 8001c50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c54:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d102      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xa6>
 8001c74:	4b6f      	ldr	r3, [pc, #444]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	e00f      	b.n	8001c9a <HAL_RCC_ClockConfig+0xc6>
 8001c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	667b      	str	r3, [r7, #100]	; 0x64
 8001c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c8c:	663b      	str	r3, [r7, #96]	; 0x60
 8001c8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c96:	4b67      	ldr	r3, [pc, #412]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c9e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ca0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ca2:	fa92 f2a2 	rbit	r2, r2
 8001ca6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ca8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001caa:	fab2 f282 	clz	r2, r2
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	f042 0220 	orr.w	r2, r2, #32
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	f002 021f 	and.w	r2, r2, #31
 8001cba:	2101      	movs	r1, #1
 8001cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d17b      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e0f3      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d13c      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x178>
 8001cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	095b      	lsrs	r3, r3, #5
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d102      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x128>
 8001cf6:	4b4f      	ldr	r3, [pc, #316]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	e00f      	b.n	8001d1c <HAL_RCC_ClockConfig+0x148>
 8001cfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	647b      	str	r3, [r7, #68]	; 0x44
 8001d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d0e:	643b      	str	r3, [r7, #64]	; 0x40
 8001d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d18:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d20:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d24:	fa92 f2a2 	rbit	r2, r2
 8001d28:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d2c:	fab2 f282 	clz	r2, r2
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	f042 0220 	orr.w	r2, r2, #32
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	f002 021f 	and.w	r2, r2, #31
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d13a      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0b2      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	095b      	lsrs	r3, r3, #5
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d102      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x1a0>
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	e00d      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1bc>
 8001d74:	2302      	movs	r3, #2
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d80:	2302      	movs	r3, #2
 8001d82:	623b      	str	r3, [r7, #32]
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	2202      	movs	r2, #2
 8001d92:	61ba      	str	r2, [r7, #24]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	fa92 f2a2 	rbit	r2, r2
 8001d9a:	617a      	str	r2, [r7, #20]
  return result;
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	fab2 f282 	clz	r2, r2
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f042 0220 	orr.w	r2, r2, #32
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f002 021f 	and.w	r2, r2, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f202 	lsl.w	r2, r1, r2
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e079      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f023 0203 	bic.w	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	491a      	ldr	r1, [pc, #104]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd0:	f7fe fc22 	bl	8000618 <HAL_GetTick>
 8001dd4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd8:	f7fe fc1e 	bl	8000618 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e061      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 020c 	and.w	r2, r3, #12
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d1eb      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d214      	bcs.n	8001e38 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 0207 	bic.w	r2, r3, #7
 8001e16:	4906      	ldr	r1, [pc, #24]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e040      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
 8001e30:	40022000 	.word	0x40022000
 8001e34:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_RCC_ClockConfig+0x2e8>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	491a      	ldr	r1, [pc, #104]	; (8001ebc <HAL_RCC_ClockConfig+0x2e8>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <HAL_RCC_ClockConfig+0x2e8>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4912      	ldr	r1, [pc, #72]	; (8001ebc <HAL_RCC_ClockConfig+0x2e8>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e76:	f000 f829 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e7a:	4601      	mov	r1, r0
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_RCC_ClockConfig+0x2e8>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e84:	22f0      	movs	r2, #240	; 0xf0
 8001e86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	fa92 f2a2 	rbit	r2, r2
 8001e8e:	60fa      	str	r2, [r7, #12]
  return result;
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	fab2 f282 	clz	r2, r2
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	40d3      	lsrs	r3, r2
 8001e9a:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <HAL_RCC_ClockConfig+0x2ec>)
 8001e9c:	5cd3      	ldrb	r3, [r2, r3]
 8001e9e:	fa21 f303 	lsr.w	r3, r1, r3
 8001ea2:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <HAL_RCC_ClockConfig+0x2f0>)
 8001ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_RCC_ClockConfig+0x2f4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fb70 	bl	8000590 <HAL_InitTick>
  
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3778      	adds	r7, #120	; 0x78
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	080027e4 	.word	0x080027e4
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b08b      	sub	sp, #44	; 0x2c
 8001ed0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	2300      	movs	r3, #0
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001ee6:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d002      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x30>
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d003      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x36>
 8001efa:	e03c      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001efc:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001efe:	623b      	str	r3, [r7, #32]
      break;
 8001f00:	e03c      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f08:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f0c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	fa92 f2a2 	rbit	r2, r2
 8001f14:	607a      	str	r2, [r7, #4]
  return result;
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	fab2 f282 	clz	r2, r2
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	40d3      	lsrs	r3, r2
 8001f20:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f26:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	220f      	movs	r2, #15
 8001f30:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	fa92 f2a2 	rbit	r2, r2
 8001f38:	60fa      	str	r2, [r7, #12]
  return result;
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	fab2 f282 	clz	r2, r2
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	40d3      	lsrs	r3, r2
 8001f44:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f54:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
 8001f64:	e004      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	4a0c      	ldr	r2, [pc, #48]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	623b      	str	r3, [r7, #32]
      break;
 8001f74:	e002      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f78:	623b      	str	r3, [r7, #32]
      break;
 8001f7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	372c      	adds	r7, #44	; 0x2c
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	007a1200 	.word	0x007a1200
 8001f94:	080027fc 	.word	0x080027fc
 8001f98:	0800280c 	.word	0x0800280c
 8001f9c:	003d0900 	.word	0x003d0900

08001fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000000 	.word	0x20000000

08001fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001fbe:	f7ff ffef 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fc2:	4601      	mov	r1, r0
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fcc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	fa92 f2a2 	rbit	r2, r2
 8001fd8:	603a      	str	r2, [r7, #0]
  return result;
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	fab2 f282 	clz	r2, r2
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	40d3      	lsrs	r3, r2
 8001fe4:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001fe6:	5cd3      	ldrb	r3, [r2, r3]
 8001fe8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	080027f4 	.word	0x080027f4

08001ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002002:	f7ff ffcd 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8002006:	4601      	mov	r1, r0
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002010:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002014:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	fa92 f2a2 	rbit	r2, r2
 800201c:	603a      	str	r2, [r7, #0]
  return result;
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	fab2 f282 	clz	r2, r2
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	40d3      	lsrs	r3, r2
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <HAL_RCC_GetPCLK2Freq+0x40>)
 800202a:	5cd3      	ldrb	r3, [r2, r3]
 800202c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	080027f4 	.word	0x080027f4

08002040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e040      	b.n	80020d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe f9d6 	bl	8000414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2224      	movs	r2, #36	; 0x24
 800206c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0201 	bic.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f82c 	bl	80020dc <UART_SetConfig>
 8002084:	4603      	mov	r3, r0
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e022      	b.n	80020d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f956 	bl	8002348 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f9dd 	bl	800248c <UART_CheckIdleState>
 80020d2:	4603      	mov	r3, r0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b8a      	ldr	r3, [pc, #552]	; (8002330 <UART_SetConfig+0x254>)
 8002108:	4013      	ands	r3, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	6979      	ldr	r1, [r7, #20]
 8002110:	430b      	orrs	r3, r1
 8002112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	4313      	orrs	r3, r2
 8002138:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	430a      	orrs	r2, r1
 800214c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a78      	ldr	r2, [pc, #480]	; (8002334 <UART_SetConfig+0x258>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d120      	bne.n	800219a <UART_SetConfig+0xbe>
 8002158:	4b77      	ldr	r3, [pc, #476]	; (8002338 <UART_SetConfig+0x25c>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b03      	cmp	r3, #3
 8002162:	d817      	bhi.n	8002194 <UART_SetConfig+0xb8>
 8002164:	a201      	add	r2, pc, #4	; (adr r2, 800216c <UART_SetConfig+0x90>)
 8002166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216a:	bf00      	nop
 800216c:	0800217d 	.word	0x0800217d
 8002170:	08002189 	.word	0x08002189
 8002174:	0800218f 	.word	0x0800218f
 8002178:	08002183 	.word	0x08002183
 800217c:	2300      	movs	r3, #0
 800217e:	77fb      	strb	r3, [r7, #31]
 8002180:	e01d      	b.n	80021be <UART_SetConfig+0xe2>
 8002182:	2302      	movs	r3, #2
 8002184:	77fb      	strb	r3, [r7, #31]
 8002186:	e01a      	b.n	80021be <UART_SetConfig+0xe2>
 8002188:	2304      	movs	r3, #4
 800218a:	77fb      	strb	r3, [r7, #31]
 800218c:	e017      	b.n	80021be <UART_SetConfig+0xe2>
 800218e:	2308      	movs	r3, #8
 8002190:	77fb      	strb	r3, [r7, #31]
 8002192:	e014      	b.n	80021be <UART_SetConfig+0xe2>
 8002194:	2310      	movs	r3, #16
 8002196:	77fb      	strb	r3, [r7, #31]
 8002198:	e011      	b.n	80021be <UART_SetConfig+0xe2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a67      	ldr	r2, [pc, #412]	; (800233c <UART_SetConfig+0x260>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d102      	bne.n	80021aa <UART_SetConfig+0xce>
 80021a4:	2300      	movs	r3, #0
 80021a6:	77fb      	strb	r3, [r7, #31]
 80021a8:	e009      	b.n	80021be <UART_SetConfig+0xe2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a64      	ldr	r2, [pc, #400]	; (8002340 <UART_SetConfig+0x264>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d102      	bne.n	80021ba <UART_SetConfig+0xde>
 80021b4:	2300      	movs	r3, #0
 80021b6:	77fb      	strb	r3, [r7, #31]
 80021b8:	e001      	b.n	80021be <UART_SetConfig+0xe2>
 80021ba:	2310      	movs	r3, #16
 80021bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c6:	d15a      	bne.n	800227e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80021c8:	7ffb      	ldrb	r3, [r7, #31]
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d827      	bhi.n	800221e <UART_SetConfig+0x142>
 80021ce:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <UART_SetConfig+0xf8>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	080021f9 	.word	0x080021f9
 80021d8:	08002201 	.word	0x08002201
 80021dc:	08002209 	.word	0x08002209
 80021e0:	0800221f 	.word	0x0800221f
 80021e4:	0800220f 	.word	0x0800220f
 80021e8:	0800221f 	.word	0x0800221f
 80021ec:	0800221f 	.word	0x0800221f
 80021f0:	0800221f 	.word	0x0800221f
 80021f4:	08002217 	.word	0x08002217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021f8:	f7ff fede 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 80021fc:	61b8      	str	r0, [r7, #24]
        break;
 80021fe:	e013      	b.n	8002228 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002200:	f7ff fefc 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 8002204:	61b8      	str	r0, [r7, #24]
        break;
 8002206:	e00f      	b.n	8002228 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002208:	4b4e      	ldr	r3, [pc, #312]	; (8002344 <UART_SetConfig+0x268>)
 800220a:	61bb      	str	r3, [r7, #24]
        break;
 800220c:	e00c      	b.n	8002228 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800220e:	f7ff fe5d 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8002212:	61b8      	str	r0, [r7, #24]
        break;
 8002214:	e008      	b.n	8002228 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800221a:	61bb      	str	r3, [r7, #24]
        break;
 800221c:	e004      	b.n	8002228 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	77bb      	strb	r3, [r7, #30]
        break;
 8002226:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d074      	beq.n	8002318 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	005a      	lsls	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	085b      	lsrs	r3, r3, #1
 8002238:	441a      	add	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	2b0f      	cmp	r3, #15
 8002248:	d916      	bls.n	8002278 <UART_SetConfig+0x19c>
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002250:	d212      	bcs.n	8002278 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	b29b      	uxth	r3, r3
 8002256:	f023 030f 	bic.w	r3, r3, #15
 800225a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	b29b      	uxth	r3, r3
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	b29a      	uxth	r2, r3
 8002268:	89fb      	ldrh	r3, [r7, #14]
 800226a:	4313      	orrs	r3, r2
 800226c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	89fa      	ldrh	r2, [r7, #14]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	e04f      	b.n	8002318 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	77bb      	strb	r3, [r7, #30]
 800227c:	e04c      	b.n	8002318 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800227e:	7ffb      	ldrb	r3, [r7, #31]
 8002280:	2b08      	cmp	r3, #8
 8002282:	d828      	bhi.n	80022d6 <UART_SetConfig+0x1fa>
 8002284:	a201      	add	r2, pc, #4	; (adr r2, 800228c <UART_SetConfig+0x1b0>)
 8002286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228a:	bf00      	nop
 800228c:	080022b1 	.word	0x080022b1
 8002290:	080022b9 	.word	0x080022b9
 8002294:	080022c1 	.word	0x080022c1
 8002298:	080022d7 	.word	0x080022d7
 800229c:	080022c7 	.word	0x080022c7
 80022a0:	080022d7 	.word	0x080022d7
 80022a4:	080022d7 	.word	0x080022d7
 80022a8:	080022d7 	.word	0x080022d7
 80022ac:	080022cf 	.word	0x080022cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022b0:	f7ff fe82 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 80022b4:	61b8      	str	r0, [r7, #24]
        break;
 80022b6:	e013      	b.n	80022e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80022b8:	f7ff fea0 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 80022bc:	61b8      	str	r0, [r7, #24]
        break;
 80022be:	e00f      	b.n	80022e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022c0:	4b20      	ldr	r3, [pc, #128]	; (8002344 <UART_SetConfig+0x268>)
 80022c2:	61bb      	str	r3, [r7, #24]
        break;
 80022c4:	e00c      	b.n	80022e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022c6:	f7ff fe01 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 80022ca:	61b8      	str	r0, [r7, #24]
        break;
 80022cc:	e008      	b.n	80022e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d2:	61bb      	str	r3, [r7, #24]
        break;
 80022d4:	e004      	b.n	80022e0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	77bb      	strb	r3, [r7, #30]
        break;
 80022de:	bf00      	nop
    }

    if (pclk != 0U)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d018      	beq.n	8002318 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	085a      	lsrs	r2, r3, #1
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	441a      	add	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b0f      	cmp	r3, #15
 80022fe:	d909      	bls.n	8002314 <UART_SetConfig+0x238>
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002306:	d205      	bcs.n	8002314 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	b29a      	uxth	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	e001      	b.n	8002318 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002324:	7fbb      	ldrb	r3, [r7, #30]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3720      	adds	r7, #32
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	efff69f3 	.word	0xefff69f3
 8002334:	40013800 	.word	0x40013800
 8002338:	40021000 	.word	0x40021000
 800233c:	40004400 	.word	0x40004400
 8002340:	40004800 	.word	0x40004800
 8002344:	007a1200 	.word	0x007a1200

08002348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01a      	beq.n	800245e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002446:	d10a      	bne.n	800245e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]
  }
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b098      	sub	sp, #96	; 0x60
 8002490:	af02      	add	r7, sp, #8
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800249c:	f7fe f8bc 	bl	8000618 <HAL_GetTick>
 80024a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d12e      	bne.n	800250e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b8:	2200      	movs	r2, #0
 80024ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f88c 	bl	80025dc <UART_WaitOnFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d021      	beq.n	800250e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d2:	e853 3f00 	ldrex	r3, [r3]
 80024d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80024d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024de:	653b      	str	r3, [r7, #80]	; 0x50
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024e8:	647b      	str	r3, [r7, #68]	; 0x44
 80024ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80024ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024f0:	e841 2300 	strex	r3, r2, [r1]
 80024f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80024f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1e6      	bne.n	80024ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2220      	movs	r2, #32
 8002500:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e062      	b.n	80025d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b04      	cmp	r3, #4
 800251a:	d149      	bne.n	80025b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800251c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002524:	2200      	movs	r2, #0
 8002526:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f856 	bl	80025dc <UART_WaitOnFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d03c      	beq.n	80025b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	e853 3f00 	ldrex	r3, [r3]
 8002542:	623b      	str	r3, [r7, #32]
   return(result);
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800254a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
 8002556:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002558:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800255a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800255c:	e841 2300 	strex	r3, r2, [r1]
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1e6      	bne.n	8002536 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3308      	adds	r3, #8
 800256e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	e853 3f00 	ldrex	r3, [r3]
 8002576:	60fb      	str	r3, [r7, #12]
   return(result);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0301 	bic.w	r3, r3, #1
 800257e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	3308      	adds	r3, #8
 8002586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002588:	61fa      	str	r2, [r7, #28]
 800258a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258c:	69b9      	ldr	r1, [r7, #24]
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	e841 2300 	strex	r3, r2, [r1]
 8002594:	617b      	str	r3, [r7, #20]
   return(result);
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1e5      	bne.n	8002568 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2220      	movs	r2, #32
 80025a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e011      	b.n	80025d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3758      	adds	r7, #88	; 0x58
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	4613      	mov	r3, r2
 80025ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ec:	e049      	b.n	8002682 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f4:	d045      	beq.n	8002682 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f6:	f7fe f80f 	bl	8000618 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	429a      	cmp	r2, r3
 8002604:	d302      	bcc.n	800260c <UART_WaitOnFlagUntilTimeout+0x30>
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e048      	b.n	80026a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d031      	beq.n	8002682 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b08      	cmp	r3, #8
 800262a:	d110      	bne.n	800264e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2208      	movs	r2, #8
 8002632:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f838 	bl	80026aa <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2208      	movs	r2, #8
 800263e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e029      	b.n	80026a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800265c:	d111      	bne.n	8002682 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002666:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f81e 	bl	80026aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2220      	movs	r2, #32
 8002672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e00f      	b.n	80026a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	69da      	ldr	r2, [r3, #28]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4013      	ands	r3, r2
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	429a      	cmp	r2, r3
 8002690:	bf0c      	ite	eq
 8002692:	2301      	moveq	r3, #1
 8002694:	2300      	movne	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	429a      	cmp	r2, r3
 800269e:	d0a6      	beq.n	80025ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b095      	sub	sp, #84	; 0x54
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ba:	e853 3f00 	ldrex	r3, [r3]
 80026be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80026c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d0:	643b      	str	r3, [r7, #64]	; 0x40
 80026d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80026d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026d8:	e841 2300 	strex	r3, r2, [r1]
 80026dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80026de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1e6      	bne.n	80026b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	3308      	adds	r3, #8
 80026ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	e853 3f00 	ldrex	r3, [r3]
 80026f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f023 0301 	bic.w	r3, r3, #1
 80026fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3308      	adds	r3, #8
 8002702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002704:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800270a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800270c:	e841 2300 	strex	r3, r2, [r1]
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1e5      	bne.n	80026e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271c:	2b01      	cmp	r3, #1
 800271e:	d118      	bne.n	8002752 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	e853 3f00 	ldrex	r3, [r3]
 800272c:	60bb      	str	r3, [r7, #8]
   return(result);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f023 0310 	bic.w	r3, r3, #16
 8002734:	647b      	str	r3, [r7, #68]	; 0x44
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002742:	6979      	ldr	r1, [r7, #20]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	e841 2300 	strex	r3, r2, [r1]
 800274a:	613b      	str	r3, [r7, #16]
   return(result);
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1e6      	bne.n	8002720 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002766:	bf00      	nop
 8002768:	3754      	adds	r7, #84	; 0x54
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <memset>:
 8002772:	4402      	add	r2, r0
 8002774:	4603      	mov	r3, r0
 8002776:	4293      	cmp	r3, r2
 8002778:	d100      	bne.n	800277c <memset+0xa>
 800277a:	4770      	bx	lr
 800277c:	f803 1b01 	strb.w	r1, [r3], #1
 8002780:	e7f9      	b.n	8002776 <memset+0x4>
	...

08002784 <__libc_init_array>:
 8002784:	b570      	push	{r4, r5, r6, lr}
 8002786:	4d0d      	ldr	r5, [pc, #52]	; (80027bc <__libc_init_array+0x38>)
 8002788:	4c0d      	ldr	r4, [pc, #52]	; (80027c0 <__libc_init_array+0x3c>)
 800278a:	1b64      	subs	r4, r4, r5
 800278c:	10a4      	asrs	r4, r4, #2
 800278e:	2600      	movs	r6, #0
 8002790:	42a6      	cmp	r6, r4
 8002792:	d109      	bne.n	80027a8 <__libc_init_array+0x24>
 8002794:	4d0b      	ldr	r5, [pc, #44]	; (80027c4 <__libc_init_array+0x40>)
 8002796:	4c0c      	ldr	r4, [pc, #48]	; (80027c8 <__libc_init_array+0x44>)
 8002798:	f000 f818 	bl	80027cc <_init>
 800279c:	1b64      	subs	r4, r4, r5
 800279e:	10a4      	asrs	r4, r4, #2
 80027a0:	2600      	movs	r6, #0
 80027a2:	42a6      	cmp	r6, r4
 80027a4:	d105      	bne.n	80027b2 <__libc_init_array+0x2e>
 80027a6:	bd70      	pop	{r4, r5, r6, pc}
 80027a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ac:	4798      	blx	r3
 80027ae:	3601      	adds	r6, #1
 80027b0:	e7ee      	b.n	8002790 <__libc_init_array+0xc>
 80027b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b6:	4798      	blx	r3
 80027b8:	3601      	adds	r6, #1
 80027ba:	e7f2      	b.n	80027a2 <__libc_init_array+0x1e>
 80027bc:	0800281c 	.word	0x0800281c
 80027c0:	0800281c 	.word	0x0800281c
 80027c4:	0800281c 	.word	0x0800281c
 80027c8:	08002820 	.word	0x08002820

080027cc <_init>:
 80027cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ce:	bf00      	nop
 80027d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d2:	bc08      	pop	{r3}
 80027d4:	469e      	mov	lr, r3
 80027d6:	4770      	bx	lr

080027d8 <_fini>:
 80027d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027da:	bf00      	nop
 80027dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027de:	bc08      	pop	{r3}
 80027e0:	469e      	mov	lr, r3
 80027e2:	4770      	bx	lr
